// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('Unknown runtime environment. Where are we?');
}

if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var functionPointers = new Array(0);

function addFunction(func) {
  for (var i = 0; i < functionPointers.length; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return 2*(1 + i);
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[(index-2)/2] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 15184;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for (var i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      var lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for (var l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function __Unwind_Backtrace(func, arg) {
      var trace = _emscripten_get_callstack_js();
      var parts = trace.split('\n');
      for (var i = 0; i < parts.length; i++) {
        var ret = Module['dynCall_iii'](func, 0, arg);
        if (ret !== 0) return;
      }
    }

  function __Unwind_FindEnclosingFunction() {
      return 0; // we cannot succeed
    }

  function __Unwind_GetIPInfo() {
      abort('Unwind_GetIPInfo');
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}


  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
          var buf = Buffer.from ? Buffer.from(buffer.buffer) : new Buffer(buffer.buffer);
          try {
            return fs.readSync(stream.nfd, buf, offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
          var buf = Buffer.from ? Buffer.from(buffer.buffer) : new Buffer(buffer.buffer);
          try {
            return fs.writeSync(stream.nfd, buf, offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  function _dladdr(addr, info) {
      // report all function pointers as coming from this program itself XXX not really correct in any way
      var fname = allocate(intArrayFromString(Module['thisProgram'] || './this.program'), 'i8', ALLOC_NORMAL); // XXX leak
      HEAP32[((addr)>>2)]=fname;
      HEAP32[(((addr)+(4))>>2)]=0;
      HEAP32[(((addr)+(8))>>2)]=0;
      HEAP32[(((addr)+(12))>>2)]=0;
      return 1;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

   

   

   

  var _llvm_ctlz_i32=true;

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  var _llvm_nacl_atomic_cmpxchg_i8=undefined;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_destroy() { return 0; }

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_wait() { return 0; }

  function _pthread_condattr_destroy() { return 0; }

  function _pthread_condattr_init() { return 0; }

  function _pthread_condattr_setclock() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_key_delete(key) {
      if (key in PTHREAD_SPECIFIC) {
        delete PTHREAD_SPECIFIC[key];
        return 0;
      }
      return ERRNO_CODES.EINVAL;
    }

  function _pthread_mutex_destroy() {}

  function _pthread_mutex_init() {}

   

   

  function _pthread_mutexattr_destroy() {}

  function _pthread_mutexattr_init() {}

  function _pthread_mutexattr_settype() {}

  function _pthread_rwlock_rdlock() { return 0; }

  function _pthread_rwlock_unlock() { return 0; }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "__Unwind_Backtrace": __Unwind_Backtrace, "__Unwind_FindEnclosingFunction": __Unwind_FindEnclosingFunction, "__Unwind_GetIPInfo": __Unwind_GetIPInfo, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_free_exception": ___cxa_free_exception, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall4": ___syscall4, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__emscripten_traverse_stack": __emscripten_traverse_stack, "_abort": _abort, "_dladdr": _dladdr, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_getenv": _getenv, "_llvm_trap": _llvm_trap, "_pthread_cond_destroy": _pthread_cond_destroy, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_condattr_destroy": _pthread_condattr_destroy, "_pthread_condattr_init": _pthread_condattr_init, "_pthread_condattr_setclock": _pthread_condattr_setclock, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_key_delete": _pthread_key_delete, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_pthread_rwlock_rdlock": _pthread_rwlock_rdlock, "_pthread_rwlock_unlock": _pthread_rwlock_unlock, "_pthread_setspecific": _pthread_setspecific, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var __Unwind_Backtrace=env.__Unwind_Backtrace;
  var __Unwind_FindEnclosingFunction=env.__Unwind_FindEnclosingFunction;
  var __Unwind_GetIPInfo=env.__Unwind_GetIPInfo;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall4=env.___syscall4;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var _abort=env._abort;
  var _dladdr=env._dladdr;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _getenv=env._getenv;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_condattr_destroy=env._pthread_condattr_destroy;
  var _pthread_condattr_init=env._pthread_condattr_init;
  var _pthread_condattr_setclock=env._pthread_condattr_setclock;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_key_delete=env._pthread_key_delete;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_mutexattr_destroy=env._pthread_mutexattr_destroy;
  var _pthread_mutexattr_init=env._pthread_mutexattr_init;
  var _pthread_mutexattr_settype=env._pthread_mutexattr_settype;
  var _pthread_rwlock_rdlock=env._pthread_rwlock_rdlock;
  var _pthread_rwlock_unlock=env._pthread_rwlock_unlock;
  var _pthread_setspecific=env._pthread_setspecific;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN4main4main17hdb2247a3d8e3b570E() {
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_2 = sp;
 __ZN4core3fmt9Arguments6new_v117h2ae1ba613c13ecaeE($_2,2264,1,13564,0);
 __ZN3std2io5stdio6_print17hf88ba8f93377d797E($_2);
 STACKTOP = sp;return;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN3std2rt10lang_start17h9cca0072ff17d8f0E(86,$0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt9Arguments6new_v117h2ae1ba613c13ecaeE($0,$pieces$ptr,$pieces$meta,$args$ptr,$args$meta) {
 $0 = $0|0;
 $pieces$ptr = $pieces$ptr|0;
 $pieces$meta = $pieces$meta|0;
 $args$ptr = $args$ptr|0;
 $args$meta = $args$meta|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4 = sp;
 HEAP32[$_4>>2] = 0;
 HEAP32[$0>>2] = $pieces$ptr;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $pieces$meta;
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=HEAP32[$_4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$_4+4>>2]|0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = $args$ptr;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $args$meta;
 STACKTOP = sp;return;
}
function ___rust_alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___rdl_alloc($0,$1,$2)|0);
 return ($3|0);
}
function ___rust_oom($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rdl_oom($0);
 // unreachable;
}
function ___rust_dealloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rdl_dealloc($0,$1,$2);
 return;
}
function ___rust_realloc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (___rdl_realloc($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function __ZN68__LT_std__thread__local__AccessError_u20_as_u20_core__fmt__Debug_GT_3fmt17h3c3cef4761113c2aE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4 = sp;
 __ZN4core3fmt9Formatter12debug_struct17h5dce02a643da4789E($_4,$f,5078,11);
 $0 = (__ZN4core3fmt8builders11DebugStruct6finish17hf2bdbf18f30e331dE($_4)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h98747b8064f0dfd3E() {
 var $$pn = 0, $$pre = 0, $$pre$phi43Z2D = 0, $$pre41 = 0, $$sroa_idx3$i64$i = 0, $$sroa_idx3$i71$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$i = 0, $_0$0$i$i3$i = 0, $_0$sroa$0$0 = 0, $_10$i = 0;
 var $_11$sroa$5$0$$sroa_idx15$i = 0, $_14$i = 0, $_17$i = 0, $_18$i$sroa$0$sroa$0$0$_18$i$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_27$i = 0, $_5$i$i$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i62$i = 0, $cond$i$i$i69$i = 0, $cond$i$i1$i = 0, $err$i$i$i = 0, $magicptr = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$16$0$i = 0, $switch$i$i = 0, $switch3 = 0, $value$i$sroa$414$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $err$i$i$i = sp + 64|0;
 $_5$i$i$i$i = sp + 48|0;
 $_27$i = sp + 40|0;
 $_17$i = sp + 32|0;
 $_14$i = sp + 16|0;
 $_10$i = sp;
 $0 = HEAP32[568]|0;
 $cond$i$i1$i = ($0|0)==(0);
 if ($cond$i$i1$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2272)|0);
  $_0$0$i$i3$i = $1;
 } else {
  $_0$0$i$i3$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i3$i|0))|0);
 $magicptr = $2;
 switch ($magicptr|0) {
 case 0:  {
  label = 4;
  break;
 }
 case 1:  {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  $$pn = $2;
 }
 }
 if ((label|0) == 4) {
  $3 = (___rust_alloc(24,4,$err$i$i$i)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   ___rust_oom($_5$i$i$i$i);
   // unreachable;
  }
  HEAP32[$3>>2] = 2272;
  $_18$i$sroa$0$sroa$0$0$_18$i$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($3)) + 4|0);
  HEAP32[$_18$i$sroa$0$sroa$0$0$_18$i$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
  $5 = HEAP32[568]|0;
  $cond$i$i$i = ($5|0)==(0);
  if ($cond$i$i$i) {
   $6 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2272)|0);
   $_0$0$i$i$i = $6;
  } else {
   $_0$0$i$i$i = $5;
  }
  (_pthread_setspecific(($_0$0$i$i$i|0),($3|0))|0);
  $$pn = $3;
 }
 $7 = ((($$pn)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $switch3 = ($8|0)==(1);
 $9 = ((($$pn)) + 8|0);
 if ($switch3) {
  $$pre41 = HEAP32[$9>>2]|0;
  $cond$i$i$i$i = ($$pre41|0)==(-1);
  if ($cond$i$i$i$i) {
   __THREW__ = 0;
   invoke_v(87);
   $10 = __THREW__; __THREW__ = 0;
  } else {
   $$pre$phi43Z2D = $9;$14 = $$pre41;
   label = 14;
  }
 } else {
  HEAP8[$7>>0]=1&255;HEAP8[$7+1>>0]=(1>>8)&255;HEAP8[$7+2>>0]=(1>>16)&255;HEAP8[$7+3>>0]=1>>24;
  HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
  $value$i$sroa$414$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx = ((($$pn)) + 20|0);
  HEAP8[$value$i$sroa$414$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx>>0]=0&255;HEAP8[$value$i$sroa$414$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$414$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$414$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx+3>>0]=0>>24;
  $$pre$phi43Z2D = $9;$14 = 0;
  label = 14;
 }
 do {
  if ((label|0) == 14) {
   $11 = ((($$pn)) + 12|0);
   $12 = $9;
   $13 = (($14) + 1)|0;
   HEAP8[$$pre$phi43Z2D>>0]=$13&255;HEAP8[$$pre$phi43Z2D+1>>0]=($13>>8)&255;HEAP8[$$pre$phi43Z2D+2>>0]=($13>>16)&255;HEAP8[$$pre$phi43Z2D+3>>0]=$13>>24;
   $15 = $11;
   $16 = ((($$pn)) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   HEAP8[$$pre$phi43Z2D>>0]=$14&255;HEAP8[$$pre$phi43Z2D+1>>0]=($14>>8)&255;HEAP8[$$pre$phi43Z2D+2>>0]=($14>>16)&255;HEAP8[$$pre$phi43Z2D+3>>0]=$14>>24;
   if ($18) {
    HEAP32[$_14$i>>2] = 0;
    __THREW__ = 0;
    $19 = (invoke_ii(88,($_14$i|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
    $22 = $19;
    HEAP32[$_10$i>>2] = 0;
    $_11$sroa$5$0$$sroa_idx15$i = ((($_10$i)) + 8|0);
    HEAP32[$_11$sroa$5$0$$sroa_idx15$i>>2] = $22;
    $23 = HEAP32[$$pre$phi43Z2D>>2]|0;
    $cond$i$i$i62$i = ($23|0)==(0);
    if (!($cond$i$i$i62$i)) {
     __THREW__ = 0;
     invoke_v(89);
     $24 = __THREW__; __THREW__ = 0;
     $25 = ___cxa_find_matching_catch_2()|0;
     $26 = tempRet0;
     __ZN4core3ptr13drop_in_place17hbd5692331b548e10E($_10$i);
     $personalityslot$sroa$0$0$i = $25;$personalityslot$sroa$16$0$i = $26;
     ___resumeException($personalityslot$sroa$0$0$i|0);
     // unreachable;
    }
    HEAP8[$$pre$phi43Z2D>>0]=-1&255;HEAP8[$$pre$phi43Z2D+1>>0]=(-1>>8)&255;HEAP8[$$pre$phi43Z2D+2>>0]=(-1>>16)&255;HEAP8[$$pre$phi43Z2D+3>>0]=-1>>24;
    HEAP32[$_17$i>>2] = $15;
    $$sroa_idx3$i64$i = ((($_17$i)) + 4|0);
    HEAP32[$$sroa_idx3$i64$i>>2] = $12;
    $27 = HEAP32[$16>>2]|0;
    $28 = ($27|0)==(0|0);
    if (!($28)) {
     $29 = HEAP32[$27>>2]|0;HEAP32[$27>>2] = (($29-1)|0);
     $30 = ($29|0)==(1);
     if ($30) {
      /* fence */;
      __THREW__ = 0;
      invoke_vi(90,($16|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $47 = ___cxa_find_matching_catch_2()|0;
       $48 = tempRet0;
       ;HEAP32[$11>>2]=HEAP32[$_10$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_10$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_10$i+8>>2]|0;
       __ZN4core3ptr13drop_in_place17h9d7acdbda03f799fE($_17$i);
       $personalityslot$sroa$0$0$i = $47;$personalityslot$sroa$16$0$i = $48;
       ___resumeException($personalityslot$sroa$0$0$i|0);
       // unreachable;
      }
     }
    }
    ;HEAP32[$11>>2]=HEAP32[$_10$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_10$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_10$i+8>>2]|0;
    $33 = ((($_17$i)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    HEAP8[$34>>0]=0&255;HEAP8[$34+1>>0]=(0>>8)&255;HEAP8[$34+2>>0]=(0>>16)&255;HEAP8[$34+3>>0]=0>>24;
    $$pre = HEAP32[$$pre$phi43Z2D>>2]|0;
    $35 = $$pre;
   } else {
    $35 = $14;
   }
   $cond$i$i$i69$i = ($35|0)==(0);
   if (!($cond$i$i$i69$i)) {
    __THREW__ = 0;
    invoke_v(89);
    $36 = __THREW__; __THREW__ = 0;
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    $personalityslot$sroa$0$0$i = $37;$personalityslot$sroa$16$0$i = $38;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   }
   HEAP8[$$pre$phi43Z2D>>0]=-1&255;HEAP8[$$pre$phi43Z2D+1>>0]=(-1>>8)&255;HEAP8[$$pre$phi43Z2D+2>>0]=(-1>>16)&255;HEAP8[$$pre$phi43Z2D+3>>0]=-1>>24;
   HEAP32[$_27$i>>2] = $15;
   $$sroa_idx3$i71$i = ((($_27$i)) + 4|0);
   HEAP32[$$sroa_idx3$i71$i>>2] = $12;
   $39 = HEAP32[$16>>2]|0;
   $switch$i$i = ($39|0)==(0|0);
   if ($switch$i$i) {
    __THREW__ = 0;
    invoke_vi(91,(2280|0));
    $40 = __THREW__; __THREW__ = 0;
    $41 = ___cxa_find_matching_catch_2()|0;
    $42 = tempRet0;
    __ZN4core3ptr13drop_in_place17h9d7acdbda03f799fE($_27$i);
    $personalityslot$sroa$0$0$i = $41;$personalityslot$sroa$16$0$i = $42;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   }
   $43 = HEAP32[$39>>2]|0;HEAP32[$39>>2] = (($43+1)|0);
   $44 = ($43|0)<(0);
   if ($44) {
    _llvm_trap();
    // unreachable;
   }
   $49 = $39;
   HEAP8[$$pre$phi43Z2D>>0]=0&255;HEAP8[$$pre$phi43Z2D+1>>0]=(0>>8)&255;HEAP8[$$pre$phi43Z2D+2>>0]=(0>>16)&255;HEAP8[$$pre$phi43Z2D+3>>0]=0>>24;
   $_0$sroa$0$0 = $49;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 } while(0);
 $45 = ___cxa_find_matching_catch_2()|0;
 $46 = tempRet0;
 $personalityslot$sroa$0$0$i = $45;$personalityslot$sroa$16$0$i = $46;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h6dd585eab22f486eE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($arg0);
 return;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_3$sroa$0$0$copyload23 = 0, $_4$sroa$0$0$copyload2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_3$sroa$0$0$copyload23 = HEAP32[$self>>2]|0;
 $0 = ((($_3$sroa$0$0$copyload23)) + 8|0);
 __ZN4core3ptr13drop_in_place17h0881f3e38366acbaE($0);
 $_4$sroa$0$0$copyload2$i$i = HEAP32[$self>>2]|0;
 $1 = ((($_4$sroa$0$0$copyload2$i$i)) + 4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2-1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  return;
 }
 /* fence */;
 ___rust_dealloc($_3$sroa$0$0$copyload23,48,8);
 return;
}
function __ZN4core3ptr13drop_in_place17h0881f3e38366acbaE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  HEAP8[$1>>0] = 0;
  $3 = ((($arg0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = HEAP32[$0>>2]|0;
   ___rust_dealloc($6,$4,1);
  }
 }
 $7 = ((($arg0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 (_pthread_mutex_destroy(($8|0))|0);
 $9 = HEAP32[$7>>2]|0;
 ___rust_dealloc($9,28,4);
 $10 = ((($arg0)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 (_pthread_cond_destroy(($11|0))|0);
 $12 = HEAP32[$10>>2]|0;
 ___rust_dealloc($12,48,4);
 return;
}
function __ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$1 = 0, $_21$i = 0, $_21$i15 = 0, $_28$0$$sroa_idx = 0, $_28$0$copyload = 0, $_28$i = 0, $_34$0$copyload = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$0$0$$sroa_idx$i$i20 = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i21 = 0, $_6$i = 0, $_6$i18 = 0, $key$i = 0, $key$i19 = 0;
 var $key1$032 = 0, $left_val$i = 0, $left_val$i17 = 0, $right_val$i = 0, $right_val$i16 = 0, $success = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_21$i15 = sp + 40|0;
 $right_val$i16 = sp + 92|0;
 $left_val$i17 = sp + 88|0;
 $_6$i18 = sp + 84|0;
 $key$i19 = sp + 80|0;
 $_28$i = sp + 24|0;
 $_21$i = sp;
 $right_val$i = sp + 76|0;
 $left_val$i = sp + 72|0;
 $_6$i = sp + 68|0;
 $key$i = sp + 64|0;
 $_28$0$$sroa_idx = ((($self)) + 4|0);
 $_28$0$copyload = HEAP32[$_28$0$$sroa_idx>>2]|0;
 HEAP32[$key$i>>2] = 0;
 $0 = (_pthread_key_create(($key$i|0),($_28$0$copyload|0))|0);
 HEAP32[$_6$i>>2] = $0;
 HEAP32[$left_val$i>>2] = $_6$i;
 HEAP32[$right_val$i>>2] = 13380;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = $left_val$i;
  $3 = $right_val$i;
  HEAP32[$_28$i>>2] = $2;
  $4 = ((($_28$i)) + 4|0);
  HEAP32[$4>>2] = (92);
  $5 = ((($_28$i)) + 8|0);
  HEAP32[$5>>2] = $3;
  $6 = ((($_28$i)) + 12|0);
  HEAP32[$6>>2] = (92);
  HEAP32[$_21$i>>2] = 2352;
  $7 = ((($_21$i)) + 4|0);
  HEAP32[$7>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i$i = ((($_21$i)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 3556;
  $_5$sroa$4$0$$sroa_idx2$i$i = ((($_21$i)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2;
  $8 = ((($_21$i)) + 16|0);
  HEAP32[$8>>2] = $_28$i;
  $9 = ((($_21$i)) + 20|0);
  HEAP32[$9>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($_21$i,2976);
  // unreachable;
 }
 $10 = HEAP32[$key$i>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $_34$0$copyload = HEAP32[$_28$0$$sroa_idx>>2]|0;
  HEAP32[$key$i19>>2] = 0;
  $12 = (_pthread_key_create(($key$i19|0),($_34$0$copyload|0))|0);
  HEAP32[$_6$i18>>2] = $12;
  HEAP32[$left_val$i17>>2] = $_6$i18;
  HEAP32[$right_val$i16>>2] = 13380;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = $left_val$i17;
   $15 = $right_val$i16;
   HEAP32[$_28$i>>2] = $14;
   $16 = ((($_28$i)) + 4|0);
   HEAP32[$16>>2] = (92);
   $17 = ((($_28$i)) + 8|0);
   HEAP32[$17>>2] = $15;
   $18 = ((($_28$i)) + 12|0);
   HEAP32[$18>>2] = (92);
   HEAP32[$_21$i15>>2] = 2352;
   $19 = ((($_21$i15)) + 4|0);
   HEAP32[$19>>2] = 3;
   $_5$sroa$0$0$$sroa_idx$i$i20 = ((($_21$i15)) + 8|0);
   HEAP32[$_5$sroa$0$0$$sroa_idx$i$i20>>2] = 3556;
   $_5$sroa$4$0$$sroa_idx2$i$i21 = ((($_21$i15)) + 12|0);
   HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i21>>2] = 2;
   $20 = ((($_21$i15)) + 16|0);
   HEAP32[$20>>2] = $_28$i;
   $21 = ((($_21$i15)) + 20|0);
   HEAP32[$21>>2] = 2;
   __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($_21$i15,2976);
   // unreachable;
  }
  $22 = HEAP32[$key$i19>>2]|0;
  (_pthread_key_delete(0)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(7147,26,2992);
   // unreachable;
  } else {
   $key1$032 = $22;
  }
 } else {
  $key1$032 = $10;
 }
 $24 = HEAP32[$self>>2]|0;if (($24|0) == 0) HEAP32[$self>>2] = $key1$032;
 $success = ($24|0)==(0);
 if ($success) {
  $_0$1 = $key1$032;
  STACKTOP = sp;return ($_0$1|0);
 }
 (_pthread_key_delete(($key1$032|0))|0);
 $_0$1 = $24;
 STACKTOP = sp;return ($_0$1|0);
}
function __ZN4core6result13unwrap_failed17h0e4f698c49d94c0aE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 7123;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 24;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_10>>2] = $1;
 $3 = ((($_10)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_10)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_10)) + 12|0);
 HEAP32[$5>>2] = (94);
 HEAP32[$_3>>2] = 2304;
 $6 = ((($_3)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $7 = ((($_3)) + 16|0);
 HEAP32[$7>>2] = $_10;
 $8 = ((($_3)) + 20|0);
 HEAP32[$8>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_3,2320);
 // unreachable;
}
function __ZN3std6thread6Thread3new17ha003124fd8d98d59E($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $_10 = 0, $_12$i$i$i$i = 0, $_12$i$i$i$i$sroa_raw_idx = 0, $_13$i$i$i$i = 0;
 var $_2$i$i$i = 0, $_2$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i = 0, $_3$sroa$0$0$copyload = 0, $_3$sroa$6$0$$sroa_idx = 0, $_3$sroa$6$0$$sroa_idx52 = 0, $_3$sroa$9$4$$sroa_idx$i$i = 0, $_3$sroa$9$8$$sroa_idx$i$i = 0, $_4$sroa$0$0$$sroa_idx$i32 = 0, $_5$i$i$i$i = 0, $_5$i$i$i$i27 = 0, $_5$i$i$i$i30 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_6$sroa$4$0$$sroa_idx = 0, $_6$sroa$5$0$$sroa_idx = 0, $_6$sroa$6$0$$sroa_idx = 0, $_6$sroa$7$0$$sroa_idx = 0, $_7 = 0, $_7$sroa_raw_idx = 0;
 var $_8$i$i$i = 0, $attr$i$i$i = 0, $c$i = 0, $cname$sroa$0$0 = 0, $cname$sroa$5$0 = 0, $err$i$i$i = 0, $err$i$i$i26 = 0, $err$i$i$i29 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $switch$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $err$i$i$i29 = sp + 184|0;
 $_5$i$i$i$i30 = sp + 168|0;
 $c$i = sp + 160|0;
 $err$i$i$i26 = sp + 144|0;
 $_5$i$i$i$i27 = sp + 128|0;
 $attr$i$i$i = sp + 120|0;
 $err$i$i$i = sp + 104|0;
 $_5$i$i$i$i = sp + 88|0;
 $_8$i$i$i = sp + 72|0;
 $_13$i$i$i$i = sp + 56|0;
 $_12$i$i$i$i = sp + 48|0;
 $_2$i$i$i$i = sp + 32|0;
 $_2$i$i$i = sp + 16|0;
 $_10 = sp + 8|0;
 $_7 = sp;
 $_3$sroa$0$0$copyload = HEAP32[$name>>2]|0;
 $switch$i = ($_3$sroa$0$0$copyload|0)==(0|0);
 do {
  if ($switch$i) {
   $cname$sroa$0$0 = 0;$cname$sroa$5$0 = 0;
  } else {
   $_3$sroa$6$0$$sroa_idx = ((($name)) + 4|0);
   $0 = $_3$sroa$6$0$$sroa_idx;
   $1 = $0;
   $2 = HEAP32[$1>>2]|0;
   $3 = (($0) + 4)|0;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   HEAP32[$_2$i$i$i$i>>2] = $_3$sroa$0$0$copyload;
   $_3$sroa$6$0$$sroa_idx52 = ((($_2$i$i$i$i)) + 4|0);
   $6 = $_3$sroa$6$0$$sroa_idx52;
   $7 = $6;
   HEAP32[$7>>2] = $2;
   $8 = (($6) + 4)|0;
   $9 = $8;
   HEAP32[$9>>2] = $5;
   __ZN5alloc6string104__LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__vec__Vec_LT_u8_GT__GT_4from17h6ce0eff5d15b3488E($_2$i$i$i,$_2$i$i$i$i);
   $_2$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$_2$i$i$i>>2]|0;
   $10 = ((($_2$i$i$i)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_memchr($_2$sroa$0$0$copyload2$i$i$i$i$i$i,0,$11)|0);
   $13 = ($12|0)==(0|0);
   $14 = $_2$sroa$0$0$copyload2$i$i$i$i$i$i;
   if ($13) {
    ;HEAP32[$_13$i$i$i$i>>2]=HEAP32[$_2$i$i$i>>2]|0;HEAP32[$_13$i$i$i$i+4>>2]=HEAP32[$_2$i$i$i+4>>2]|0;HEAP32[$_13$i$i$i$i+8>>2]=HEAP32[$_2$i$i$i+8>>2]|0;
    __ZN3std3ffi5c_str7CString18from_vec_unchecked17hb6236fcb62cdef3cE($_12$i$i$i$i,$_13$i$i$i$i);
    $31 = HEAP32[$_12$i$i$i$i>>2]|0;
    $_12$i$i$i$i$sroa_raw_idx = ((($_12$i$i$i$i)) + 4|0);
    $32 = HEAP32[$_12$i$i$i$i$sroa_raw_idx>>2]|0;
    $cname$sroa$0$0 = $31;$cname$sroa$5$0 = $32;
    break;
   } else {
    $15 = $12;
    $16 = (($15) - ($14))|0;
    $_3$sroa$9$8$$sroa_idx$i$i = ((($_2$i$i$i)) + 4|0);
    $17 = $_3$sroa$9$8$$sroa_idx$i$i;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($17) + 4)|0;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $23 = $_8$i$i$i;
    $24 = $23;
    HEAP32[$24>>2] = $16;
    $25 = (($23) + 4)|0;
    $26 = $25;
    HEAP32[$26>>2] = $14;
    $_3$sroa$9$4$$sroa_idx$i$i = ((($_8$i$i$i)) + 8|0);
    $27 = $_3$sroa$9$4$$sroa_idx$i$i;
    $28 = $27;
    HEAP32[$28>>2] = $19;
    $29 = (($27) + 4)|0;
    $30 = $29;
    HEAP32[$30>>2] = $22;
    __ZN4core6result13unwrap_failed17hb16db00b3be39386E(5306,47,$_8$i$i$i);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$_7>>2] = $cname$sroa$0$0;
 $_7$sroa_raw_idx = ((($_7)) + 4|0);
 HEAP32[$_7$sroa_raw_idx>>2] = $cname$sroa$5$0;
 (_pthread_mutex_lock(((13352)|0))|0);
 $33 = 13264;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)==(-1);
 $40 = ($38|0)==(-1);
 $41 = $39 & $40;
 if ($41) {
  (_pthread_mutex_unlock(((13352)|0))|0);
  __THREW__ = 0;
  invoke_viii(95,(5353|0),55,(2336|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = ___cxa_find_matching_catch_2()|0;
  $44 = tempRet0;
  $personalityslot$sroa$0$0 = $43;$personalityslot$sroa$6$0 = $44;
  __ZN4core3ptr13drop_in_place17h745f29e40d7222a9E($_7);
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $45 = (_i64Add(($35|0),($38|0),1,0)|0);
 $46 = tempRet0;
 $47 = 13264;
 $48 = $47;
 HEAP32[$48>>2] = $45;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 (_pthread_mutex_unlock(((13352)|0))|0);
 $51 = (___rust_alloc(28,4,$err$i$i$i)|0);
 $52 = ($51|0)==(0|0);
 if ($52) {
  ___rust_oom($_5$i$i$i$i);
  // unreachable;
 }
 ;HEAP32[$51>>2]=HEAP32[(13272)>>2]|0;HEAP32[$51+4>>2]=HEAP32[(13272)+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[(13272)+8>>2]|0;HEAP32[$51+12>>2]=HEAP32[(13272)+12>>2]|0;HEAP32[$51+16>>2]=HEAP32[(13272)+16>>2]|0;HEAP32[$51+20>>2]=HEAP32[(13272)+20>>2]|0;HEAP32[$51+24>>2]=HEAP32[(13272)+24>>2]|0;
 $53 = $51;
 (_pthread_mutexattr_init(($attr$i$i$i|0))|0);
 (_pthread_mutexattr_settype(($attr$i$i$i|0),0)|0);
 (_pthread_mutex_init(($51|0),($attr$i$i$i|0))|0);
 (_pthread_mutexattr_destroy(($attr$i$i$i|0))|0);
 $54 = $_10;
 $55 = $54;
 HEAP32[$55>>2] = $53;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = 0;
 $58 = (___rust_alloc(48,4,$err$i$i$i29)|0);
 $59 = ($58|0)==(0|0);
 if ($59) {
  ___rust_oom($_5$i$i$i$i30);
  // unreachable;
 }
 dest=$58; src=(13304); stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $60 = $58;
 HEAP32[$c$i>>2] = $60;
 $_4$sroa$0$0$$sroa_idx$i32 = ((($c$i)) + 4|0);
 HEAP32[$_4$sroa$0$0$$sroa_idx$i32>>2] = 0;
 __THREW__ = 0;
 invoke_vi(96,($58|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if ($62) {
  $94 = ___cxa_find_matching_catch_2()|0;
  $95 = tempRet0;
  __ZN4core3ptr13drop_in_place17hebf0dc1037d432d8E($c$i);
  __ZN4core3ptr13drop_in_place17h60cc20deb1607e19E($_10);
  $personalityslot$sroa$0$0 = $94;$personalityslot$sroa$6$0 = $95;
  __ZN4core3ptr13drop_in_place17h745f29e40d7222a9E($_7);
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $63 = $c$i;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63) + 4)|0;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = $_7;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (___rust_alloc(48,8,$err$i$i$i26)|0);
 $76 = ($75|0)==(0|0);
 if ($76) {
  ___rust_oom($_5$i$i$i$i27);
  // unreachable;
 } else {
  HEAP32[$75>>2] = 1;
  $_5$sroa$0$0$$sroa_idx$i = ((($75)) + 4|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 1;
  $_6$sroa$0$0$$sroa_idx = ((($75)) + 8|0);
  $77 = $_6$sroa$0$0$$sroa_idx;
  $78 = $77;
  HEAP32[$78>>2] = $35;
  $79 = (($77) + 4)|0;
  $80 = $79;
  HEAP32[$80>>2] = $38;
  $_6$sroa$4$0$$sroa_idx = ((($75)) + 16|0);
  $81 = $_6$sroa$4$0$$sroa_idx;
  $82 = $81;
  HEAP32[$82>>2] = $71;
  $83 = (($81) + 4)|0;
  $84 = $83;
  HEAP32[$84>>2] = $74;
  $_6$sroa$5$0$$sroa_idx = ((($75)) + 24|0);
  HEAP32[$_6$sroa$5$0$$sroa_idx>>2] = 0;
  $_6$sroa$6$0$$sroa_idx = ((($75)) + 28|0);
  $85 = $_6$sroa$6$0$$sroa_idx;
  $86 = $85;
  HEAP32[$86>>2] = $53;
  $87 = (($85) + 4)|0;
  $88 = $87;
  HEAP32[$88>>2] = 0;
  $_6$sroa$7$0$$sroa_idx = ((($75)) + 36|0);
  $89 = $_6$sroa$7$0$$sroa_idx;
  $90 = $89;
  HEAP32[$90>>2] = $65;
  $91 = (($89) + 4)|0;
  $92 = $91;
  HEAP32[$92>>2] = $68;
  $93 = $75;
  STACKTOP = sp;return ($93|0);
 }
 return (0)|0;
}
function __ZN4core6result13unwrap_failed17hc56d5bdb79226250E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 5257;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 16;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_10>>2] = $1;
 $3 = ((($_10)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_10)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_10)) + 12|0);
 HEAP32[$5>>2] = (97);
 HEAP32[$_3>>2] = 2304;
 $6 = ((($_3)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $7 = ((($_3)) + 16|0);
 HEAP32[$7>>2] = $_10;
 $8 = ((($_3)) + 20|0);
 HEAP32[$8>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_3,2320);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hbd5692331b548e10E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($3-1)|0);
 $4 = ($3|0)==(1);
 if (!($4)) {
  return;
 }
 $5 = ((($arg0)) + 8|0);
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($5);
 return;
}
function __ZN4core3ptr13drop_in_place17h9d7acdbda03f799fE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$1>>0]=0&255;HEAP8[$1+1>>0]=(0>>8)&255;HEAP8[$1+2>>0]=(0>>16)&255;HEAP8[$1+3>>0]=0>>24;
 return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h3c2c4aa06f847fbbE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = ((($self)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h3950e9a41b16bb75E($0,$2,$f)|0);
 return ($3|0);
}
function __ZN4core6result13unwrap_failed17hb16db00b3be39386E($0,$1,$error) {
 $0 = $0|0;
 $1 = $1|0;
 $error = $error|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = $msg;
 $4 = $error;
 HEAP32[$_10>>2] = $3;
 $5 = ((($_10)) + 4|0);
 HEAP32[$5>>2] = (93);
 $6 = ((($_10)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_10)) + 12|0);
 HEAP32[$7>>2] = (98);
 HEAP32[$_3>>2] = 2304;
 $8 = ((($_3)) + 4|0);
 HEAP32[$8>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $9 = ((($_3)) + 16|0);
 HEAP32[$9>>2] = $_10;
 $10 = ((($_3)) + 20|0);
 HEAP32[$10>>2] = 2;
 __THREW__ = 0;
 invoke_vii(99,($_3|0),(2320|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 __ZN4core3ptr13drop_in_place17h82d235f41c68eb1cE($error);
 ___resumeException($12|0);
 // unreachable;
}
function __ZN3std3ffi5c_str7CString18from_vec_unchecked17hb6236fcb62cdef3cE($0,$v) {
 $0 = $0|0;
 $v = $v|0;
 var $$pre$i = 0, $$sink$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$sroa$0$0$copyload2$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i = 0, $_45$sroa$4$4$copyload1832$i$i = 0, $_45$sroa$8$4$$sroa_idx$i$i = 0, $_49$sroa$0$0$copyload31$i$i = 0, $_59$i$i = 0, $_7 = 0, $eh$lpad$body6$index2Z2D = 0, $eh$lpad$body6$indexZ2D = 0, $err$i$i$i = 0, $err$sroa$4$0$$sroa_idx$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i$i = sp + 32|0;
 $_59$i$i = sp + 16|0;
 $_7 = sp;
 __THREW__ = 0;
 invoke_vii(100,($v|0),1);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $3 = ((($v)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($v)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4|0)==($6|0);
   if ($7) {
    __THREW__ = 0;
    invoke_vi(101,($v|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     break;
    }
    $$pre$i = HEAP32[$3>>2]|0;
    $11 = $$pre$i;
   } else {
    $11 = $4;
   }
   $_2$sroa$0$0$copyload2$i$i$i = HEAP32[$v>>2]|0;
   $10 = (($_2$sroa$0$0$copyload2$i$i$i) + ($11)|0);
   HEAP8[$10>>0] = 0;
   $12 = (($11) + 1)|0;
   HEAP32[$3>>2] = $12;
   ;HEAP32[$_7>>2]=HEAP32[$v>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$v+8>>2]|0;
   $13 = ((($_7)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($_7)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16>>>0)<($14>>>0);
   if ($17) {
    __THREW__ = 0;
    invoke_vi(91,(2952|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($_7);
    $eh$lpad$body6$index2Z2D = $20;$eh$lpad$body6$indexZ2D = $19;
    ___resumeException($eh$lpad$body6$indexZ2D|0);
    // unreachable;
   }
   $21 = ($14|0)==(0);
   do {
    if ($21) {
     $22 = ($16|0)==(0);
     if (!($22)) {
      $_2$sroa$0$0$copyload2$i$i$i$i = HEAP32[$_7>>2]|0;
      ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i,$16,1);
     }
     HEAP32[$_7>>2] = 1;
     $$sink$i$i = 0;
    } else {
     $23 = ($16|0)==($14|0);
     if ($23) {
      $36 = $_7;
      $37 = $36;
      $38 = HEAP32[$37>>2]|0;
      $39 = (($36) + 4)|0;
      $40 = $39;
      $41 = HEAP32[$40>>2]|0;
      $42 = $38;
      HEAP32[$0>>2] = $42;
      $43 = ((($0)) + 4|0);
      HEAP32[$43>>2] = $41;
      STACKTOP = sp;return;
     }
     $_49$sroa$0$0$copyload31$i$i = HEAP32[$_7>>2]|0;
     $24 = (___rust_realloc($_49$sroa$0$0$copyload31$i$i,$16,1,$14,1,$err$i$i$i)|0);
     $25 = ($24|0)==(0|0);
     if ($25) {
      $_45$sroa$4$4$copyload1832$i$i = HEAP32[$err$i$i$i>>2]|0;
      $_45$sroa$8$4$$sroa_idx$i$i = ((($err$i$i$i)) + 4|0);
      $26 = $_45$sroa$8$4$$sroa_idx$i$i;
      $27 = $26;
      $28 = HEAP32[$27>>2]|0;
      $29 = (($26) + 4)|0;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      HEAP32[$_59$i$i>>2] = $_45$sroa$4$4$copyload1832$i$i;
      $err$sroa$4$0$$sroa_idx$i$i = ((($_59$i$i)) + 4|0);
      $32 = $err$sroa$4$0$$sroa_idx$i$i;
      $33 = $32;
      HEAP32[$33>>2] = $28;
      $34 = (($32) + 4)|0;
      $35 = $34;
      HEAP32[$35>>2] = $31;
      ___rust_oom($_59$i$i);
      // unreachable;
     } else {
      HEAP32[$_7>>2] = $24;
      $$sink$i$i = $14;
      break;
     }
    }
   } while(0);
   HEAP32[$15>>2] = $$sink$i$i;
   $36 = $_7;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = $38;
   HEAP32[$0>>2] = $42;
   $43 = ((($0)) + 4|0);
   HEAP32[$43>>2] = $41;
   STACKTOP = sp;return;
  }
 } while(0);
 $44 = ___cxa_find_matching_catch_2()|0;
 $45 = tempRet0;
 __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($v);
 $eh$lpad$body6$index2Z2D = $45;$eh$lpad$body6$indexZ2D = $44;
 ___resumeException($eh$lpad$body6$indexZ2D|0);
 // unreachable;
}
function __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E($msg$ptr,$msg$meta,$file_line_col) {
 $msg$ptr = $msg$ptr|0;
 $msg$meta = $msg$meta|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $2 = 0, $_5$i$i$i$i = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i$i = sp + 16|0;
 $_5$i$i$i$i = sp;
 $0 = (___rust_alloc(8,4,$err$i$i$i)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___rust_oom($_5$i$i$i$i);
  // unreachable;
 } else {
  HEAP32[$0>>2] = $msg$ptr;
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = $msg$meta;
  __ZN3std9panicking20rust_panic_with_hook17h13a6f270fa9e8d4eE($0,224,$file_line_col);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17h745f29e40d7222a9E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 HEAP8[$0>>0] = 0;
 $2 = ((($arg0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($5,$3,1);
 return;
}
function __ZN3std3sys3imp7condvar7Condvar4init17h0a6fc507c5b0f2ccE($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_101 = 0, $_108 = 0, $_141 = 0, $_148 = 0, $_19 = 0, $_26 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i26 = 0, $_5$sroa$0$0$$sroa_idx$i28 = 0, $_5$sroa$0$0$$sroa_idx$i30 = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i27 = 0, $_5$sroa$4$0$$sroa_idx2$i29 = 0, $_5$sroa$4$0$$sroa_idx2$i31 = 0, $_59 = 0, $_66 = 0, $attr = 0, $left_val = 0, $left_val2 = 0, $left_val5 = 0;
 var $left_val8 = 0, $r = 0, $r1 = 0, $r4 = 0, $r7 = 0, $right_val = 0, $right_val3 = 0, $right_val6 = 0, $right_val9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $_148 = sp + 152|0;
 $_141 = sp + 128|0;
 $right_val9 = sp + 212|0;
 $left_val8 = sp + 208|0;
 $r7 = sp + 204|0;
 $_108 = sp + 112|0;
 $_101 = sp + 88|0;
 $right_val6 = sp + 200|0;
 $left_val5 = sp + 196|0;
 $r4 = sp + 192|0;
 $_66 = sp + 72|0;
 $_59 = sp + 48|0;
 $right_val3 = sp + 188|0;
 $left_val2 = sp + 184|0;
 $r1 = sp + 180|0;
 $_26 = sp + 32|0;
 $_19 = sp + 8|0;
 $right_val = sp + 176|0;
 $left_val = sp + 172|0;
 $r = sp + 168|0;
 $attr = sp;
 $0 = (_pthread_condattr_init(($attr|0))|0);
 HEAP32[$r>>2] = $0;
 HEAP32[$left_val>>2] = $r;
 HEAP32[$right_val>>2] = 13380;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = $left_val;
  $3 = $right_val;
  HEAP32[$_26>>2] = $2;
  $4 = ((($_26)) + 4|0);
  HEAP32[$4>>2] = (92);
  $5 = ((($_26)) + 8|0);
  HEAP32[$5>>2] = $3;
  $6 = ((($_26)) + 12|0);
  HEAP32[$6>>2] = (92);
  HEAP32[$_19>>2] = 2352;
  $7 = ((($_19)) + 4|0);
  HEAP32[$7>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i = ((($_19)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
  $_5$sroa$4$0$$sroa_idx2$i = ((($_19)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
  $8 = ((($_19)) + 16|0);
  HEAP32[$8>>2] = $_26;
  $9 = ((($_19)) + 20|0);
  HEAP32[$9>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($_19,2376);
  // unreachable;
 }
 $10 = (_pthread_condattr_setclock(($attr|0),1)|0);
 HEAP32[$r1>>2] = $10;
 HEAP32[$left_val2>>2] = $r1;
 HEAP32[$right_val3>>2] = 13380;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = $left_val2;
  $13 = $right_val3;
  HEAP32[$_66>>2] = $12;
  $14 = ((($_66)) + 4|0);
  HEAP32[$14>>2] = (92);
  $15 = ((($_66)) + 8|0);
  HEAP32[$15>>2] = $13;
  $16 = ((($_66)) + 12|0);
  HEAP32[$16>>2] = (92);
  HEAP32[$_59>>2] = 2352;
  $17 = ((($_59)) + 4|0);
  HEAP32[$17>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i26 = ((($_59)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i26>>2] = 3556;
  $_5$sroa$4$0$$sroa_idx2$i27 = ((($_59)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i27>>2] = 2;
  $18 = ((($_59)) + 16|0);
  HEAP32[$18>>2] = $_66;
  $19 = ((($_59)) + 20|0);
  HEAP32[$19>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($_59,2392);
  // unreachable;
 }
 $20 = (_pthread_cond_init(($self|0),($attr|0))|0);
 HEAP32[$r4>>2] = $20;
 HEAP32[$left_val5>>2] = $r4;
 HEAP32[$right_val6>>2] = 13380;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = $left_val5;
  $23 = $right_val6;
  HEAP32[$_108>>2] = $22;
  $24 = ((($_108)) + 4|0);
  HEAP32[$24>>2] = (92);
  $25 = ((($_108)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = ((($_108)) + 12|0);
  HEAP32[$26>>2] = (92);
  HEAP32[$_101>>2] = 2352;
  $27 = ((($_101)) + 4|0);
  HEAP32[$27>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i28 = ((($_101)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i28>>2] = 3556;
  $_5$sroa$4$0$$sroa_idx2$i29 = ((($_101)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i29>>2] = 2;
  $28 = ((($_101)) + 16|0);
  HEAP32[$28>>2] = $_108;
  $29 = ((($_101)) + 20|0);
  HEAP32[$29>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($_101,2408);
  // unreachable;
 }
 $30 = (_pthread_condattr_destroy(($attr|0))|0);
 HEAP32[$r7>>2] = $30;
 HEAP32[$left_val8>>2] = $r7;
 HEAP32[$right_val9>>2] = 13380;
 $31 = ($30|0)==(0);
 if ($31) {
  STACKTOP = sp;return;
 } else {
  $32 = $left_val8;
  $33 = $right_val9;
  HEAP32[$_148>>2] = $32;
  $34 = ((($_148)) + 4|0);
  HEAP32[$34>>2] = (92);
  $35 = ((($_148)) + 8|0);
  HEAP32[$35>>2] = $33;
  $36 = ((($_148)) + 12|0);
  HEAP32[$36>>2] = (92);
  HEAP32[$_141>>2] = 2352;
  $37 = ((($_141)) + 4|0);
  HEAP32[$37>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i30 = ((($_141)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i30>>2] = 3556;
  $_5$sroa$4$0$$sroa_idx2$i31 = ((($_141)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i31>>2] = 2;
  $38 = ((($_141)) + 16|0);
  HEAP32[$38>>2] = $_148;
  $39 = ((($_141)) + 20|0);
  HEAP32[$39>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($_141,2424);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17hebf0dc1037d432d8E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 (_pthread_cond_destroy(($0|0))|0);
 $1 = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($1,48,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h60cc20deb1607e19E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 (_pthread_mutex_destroy(($0|0))|0);
 $1 = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($1,28,4);
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h432b9a854ec0b461E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17hbbf3ce441032312dE($0,$f)|0);
 return ($1|0);
}
function __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($msg,$file_line_col) {
 $msg = $msg|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_1$sroa$4$0$$sroa_idx2$i = 0, $_1$sroa$5$0$$sroa_idx4$i = 0, $_6$i = 0, $_7 = 0, $_8$i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_8$i = sp + 40|0;
 $_6$i = sp + 32|0;
 $_7 = sp + 16|0;
 $s = sp;
 HEAP32[$s>>2] = 1;
 $_1$sroa$4$0$$sroa_idx2$i = ((($s)) + 4|0);
 HEAP32[$_1$sroa$4$0$$sroa_idx2$i>>2] = 0;
 $_1$sroa$5$0$$sroa_idx4$i = ((($s)) + 8|0);
 HEAP32[$_1$sroa$5$0$$sroa_idx4$i>>2] = 0;
 HEAP32[$_6$i>>2] = $s;
 ;HEAP32[$_8$i>>2]=HEAP32[$msg>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$msg+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$msg+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$msg+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$msg+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$msg+20>>2]|0;
 __THREW__ = 0;
 (invoke_iiii(102,($_6$i|0),(8|0),($_8$i|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZN4core3ptr13drop_in_place17he89d6e432b57bbf5E($s);
  ___resumeException($2|0);
  // unreachable;
 } else {
  ;HEAP32[$_7>>2]=HEAP32[$s>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$s+8>>2]|0;
  __ZN3std9panicking11begin_panic17h6e188c1dad2a3b5bE($_7,$file_line_col);
  // unreachable;
 }
}
function __ZN3std9panicking11begin_panic17h6e188c1dad2a3b5bE($msg,$file_line_col) {
 $msg = $msg|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $_5$i$i$i$i = 0, $_5$sroa$0 = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i$i = sp + 32|0;
 $_5$i$i$i$i = sp + 16|0;
 $_5$sroa$0 = sp;
 ;HEAP32[$_5$sroa$0>>2]=HEAP32[$msg>>2]|0;HEAP32[$_5$sroa$0+4>>2]=HEAP32[$msg+4>>2]|0;HEAP32[$_5$sroa$0+8>>2]=HEAP32[$msg+8>>2]|0;
 $0 = (___rust_alloc(12,4,$err$i$i$i)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___rust_oom($_5$i$i$i$i);
  // unreachable;
 } else {
  ;HEAP32[$0>>2]=HEAP32[$_5$sroa$0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_5$sroa$0+8>>2]|0;
  __ZN3std9panicking20rust_panic_with_hook17h13a6f270fa9e8d4eE($0,32,$file_line_col);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17he89d6e432b57bbf5E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $_2$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i,$1,1);
 return;
}
function __ZN3std9panicking20rust_panic_with_hook17h13a6f270fa9e8d4eE($0,$1,$file_line_col) {
 $0 = $0|0;
 $1 = $1|0;
 $file_line_col = $file_line_col|0;
 var $$pre = 0, $$pre22 = 0, $$sink$in$phi$trans$insert = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_24$sroa$0$0$$sroa_idx = 0, $_24$sroa$4$0$$sroa_idx2 = 0, $_24$sroa$5$0$$sroa_idx4 = 0, $_24$sroa$6$0$$sroa_idx6 = 0, $_4$sroa$0$0$$sroa_idx$i = 0, $_4$sroa$0$0$$sroa_idx$i13 = 0;
 var $_45 = 0, $info = 0, $msg = 0, $not$ = 0, $phitmp = 0, $switch = 0, $switch$i2$i = 0, $switch2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_45 = sp + 56|0;
 $info = sp + 32|0;
 $_11 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$file_line_col>>2]|0;
 $4 = ((($file_line_col)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($file_line_col)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($file_line_col)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = $1;
 __THREW__ = 0;
 $12 = (invoke_i(103)|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 L1: do {
  if (!($14)) {
   $switch$i2$i = ($12|0)==(0|0);
   if ($switch$i2$i) {
    __THREW__ = 0;
    invoke_v(104);
    $20 = __THREW__; __THREW__ = 0;
    break;
   }
   $15 = HEAP32[$12>>2]|0;
   $switch2$i$i = ($15|0)==(1);
   if ($switch2$i$i) {
    $$sink$in$phi$trans$insert = ((($12)) + 4|0);
    $$pre = HEAP32[$$sink$in$phi$trans$insert>>2]|0;
    $phitmp = (($$pre) + 1)|0;
    HEAP8[$$sink$in$phi$trans$insert>>0]=$phitmp&255;HEAP8[$$sink$in$phi$trans$insert+1>>0]=($phitmp>>8)&255;HEAP8[$$sink$in$phi$trans$insert+2>>0]=($phitmp>>16)&255;HEAP8[$$sink$in$phi$trans$insert+3>>0]=$phitmp>>24;
    $21 = ($phitmp>>>0)>(2);
    if ($21) {
     HEAP32[$_11>>2] = 2472;
     $28 = ((($_11)) + 4|0);
     HEAP32[$28>>2] = 1;
     $_4$sroa$0$0$$sroa_idx$i = ((($_11)) + 8|0);
     HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0;
     $29 = ((($_11)) + 16|0);
     HEAP32[$29>>2] = 13564;
     $30 = ((($_11)) + 20|0);
     HEAP32[$30>>2] = 0;
     __THREW__ = 0;
     invoke_vi(105,($_11|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break;
     }
     _llvm_trap();
     // unreachable;
    } else {
     $43 = $phitmp;
    }
   } else {
    $16 = $12;
    $17 = $16;
    HEAP8[$17>>0]=1&255;HEAP8[$17+1>>0]=(1>>8)&255;HEAP8[$17+2>>0]=(1>>16)&255;HEAP8[$17+3>>0]=1>>24;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP8[$19>>0]=0&255;HEAP8[$19+1>>0]=(0>>8)&255;HEAP8[$19+2>>0]=(0>>16)&255;HEAP8[$19+3>>0]=0>>24;
    $$pre22 = ((($12)) + 4|0);
    HEAP8[$$pre22>>0]=1&255;HEAP8[$$pre22+1>>0]=(1>>8)&255;HEAP8[$$pre22+2>>0]=(1>>16)&255;HEAP8[$$pre22+3>>0]=1>>24;
    $43 = 1;
   }
   HEAP32[$info>>2] = $10;
   $22 = ((($info)) + 4|0);
   HEAP32[$22>>2] = $11;
   $_24$sroa$0$0$$sroa_idx = ((($info)) + 8|0);
   HEAP32[$_24$sroa$0$0$$sroa_idx>>2] = $3;
   $_24$sroa$4$0$$sroa_idx2 = ((($info)) + 12|0);
   HEAP32[$_24$sroa$4$0$$sroa_idx2>>2] = $5;
   $_24$sroa$5$0$$sroa_idx4 = ((($info)) + 16|0);
   HEAP32[$_24$sroa$5$0$$sroa_idx4>>2] = $7;
   $_24$sroa$6$0$$sroa_idx6 = ((($info)) + 20|0);
   HEAP32[$_24$sroa$6$0$$sroa_idx6>>2] = $9;
   $23 = (_pthread_rwlock_rdlock(((13384)|0))|0);
   switch ($23|0) {
   case 11:  {
    __THREW__ = 0;
    invoke_viii(95,(5448|0),36,(2440|0));
    $24 = __THREW__; __THREW__ = 0;
    break L1;
    break;
   }
   case 35:  {
    break;
   }
   default: {
    label = 9;
   }
   }
   do {
    if ((label|0) == 9) {
     $25 = HEAP8[(13420)>>0]|0;
     $not$ = ($25<<24>>24)==(0);
     if (!($not$)) {
      $26 = ($23|0)==(0);
      if (!($26)) {
       break;
      }
      (_pthread_rwlock_unlock(((13384)|0))|0);
      break;
     }
     $33 = HEAP32[(13416)>>2]|0;HEAP32[(13416)>>2] = (($33+1)|0);
     $switch = (0)==(1);
     if ($switch) {
      $36 = HEAP32[(13428)>>2]|0;
      $37 = HEAP32[(13432)>>2]|0;
      $38 = ((($37)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      invoke_vii($39|0,($36|0),($info|0));
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break L1;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(106,($info|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break L1;
      }
     }
     $42 = HEAP32[(13416)>>2]|0;HEAP32[(13416)>>2] = (($42-1)|0);
     (_pthread_rwlock_unlock(((13384)|0))|0);
     $44 = ($43>>>0)>(1);
     if (!($44)) {
      _rust_panic($0,$1);
      // unreachable;
     }
     HEAP32[$_45>>2] = 2480;
     $45 = ((($_45)) + 4|0);
     HEAP32[$45>>2] = 1;
     $_4$sroa$0$0$$sroa_idx$i13 = ((($_45)) + 8|0);
     HEAP32[$_4$sroa$0$0$$sroa_idx$i13>>2] = 0;
     $46 = ((($_45)) + 16|0);
     HEAP32[$46>>2] = 13564;
     $47 = ((($_45)) + 20|0);
     HEAP32[$47>>2] = 0;
     __THREW__ = 0;
     invoke_vi(105,($_45|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      break L1;
     }
     _llvm_trap();
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_viii(95,(5484|0),41,(2456|0));
   $27 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $50 = ___cxa_find_matching_catch_2()|0;
 $51 = tempRet0;
 __ZN4core3ptr13drop_in_place17hc1f9004804404202E($msg);
 ___resumeException($50|0);
 // unreachable;
}
function __ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$i = 0, $_0$0$i$i3$i = 0, $_5$i$i$i$i = 0;
 var $cond$i$i$i = 0, $cond$i$i1$i = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i$i = sp + 16|0;
 $_5$i$i$i$i = sp;
 $0 = HEAP32[736]|0;
 $cond$i$i$i = ($0|0)==(0);
 if ($cond$i$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2944)|0);
  $_0$0$i$i$i = $1;
 } else {
  $_0$0$i$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $15 = $$$i;
  STACKTOP = sp;return ($15|0);
 }
 $6 = (___rust_alloc(12,4,$err$i$i$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  ___rust_oom($_5$i$i$i$i);
  // unreachable;
 }
 HEAP32[$6>>2] = 2944;
 $8 = ((($6)) + 4|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[736]|0;
 $cond$i$i1$i = ($13|0)==(0);
 if ($cond$i$i1$i) {
  $14 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2944)|0);
  $_0$0$i$i3$i = $14;
 } else {
  $_0$0$i$i3$i = $13;
 }
 (_pthread_setspecific(($_0$0$i$i3$i|0),($6|0))|0);
 $15 = $8;
 STACKTOP = sp;return ($15|0);
}
function __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 6930;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 57;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_10>>2] = $1;
 $3 = ((($_10)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_10)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_10)) + 12|0);
 HEAP32[$5>>2] = (107);
 HEAP32[$_3>>2] = 2304;
 $6 = ((($_3)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $7 = ((($_3)) + 16|0);
 HEAP32[$7>>2] = $_10;
 $8 = ((($_3)) + 20|0);
 HEAP32[$8>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_3,2320);
 // unreachable;
}
function __ZN3std10sys_common4util10dumb_print17hfc0c323ae8a674b6E($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$sroa$14$4$$sroa_idx25 = 0, $_2$sroa$14$4$copyload = 0;
 var $_2$sroa$5$4$copyload = 0, $_2$sroa$9$4$$sroa_idx20 = 0, $_2$sroa$9$4$copyload = 0, $_2$sroa$9$sroa$0$0$extract$trunc = 0, $_4$i$i = 0, $_6$i = 0, $cond$i$i = 0, $or$cond = 0, $stderr$i$i = 0, $switch$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $stderr$i$i = sp + 40|0;
 $_4$i$i = sp + 16|0;
 $_6$i = sp;
 ;HEAP32[$_4$i$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_4$i$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_4$i$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_4$i$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_4$i$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_4$i$i+20>>2]=HEAP32[$args+20>>2]|0;
 __ZN3std2io5Write9write_fmt17hfa66eccf7643f23aE($_6$i,$stderr$i$i,$_4$i$i);
 $_2$sroa$5$4$copyload = HEAP32[$_6$i>>2]|0;
 $_2$sroa$9$4$$sroa_idx20 = ((($_6$i)) + 4|0);
 $_2$sroa$9$4$copyload = HEAP32[$_2$sroa$9$4$$sroa_idx20>>2]|0;
 $_2$sroa$9$sroa$0$0$extract$trunc = $_2$sroa$9$4$copyload&255;
 $_2$sroa$14$4$$sroa_idx25 = ((($_6$i)) + 8|0);
 $_2$sroa$14$4$copyload = HEAP32[$_2$sroa$14$4$$sroa_idx25>>2]|0;
 $cond$i$i = ($_2$sroa$5$4$copyload|0)==(0);
 $switch$i6 = ($_2$sroa$9$sroa$0$0$extract$trunc&255)<(2);
 $or$cond = $cond$i$i | $switch$i6;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $0 = ((($_2$sroa$14$4$copyload)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($_2$sroa$14$4$copyload)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  __ZN5alloc4heap8box_free17he2c7ab366ae97083E($16,$17);
  __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($_2$sroa$14$4$copyload);
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = ((($7)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  ___rust_dealloc($11,$9,$13);
 }
 ___rust_dealloc($_2$sroa$14$4$copyload,12,4);
 STACKTOP = sp;return;
}
function __ZN3std9panicking12default_hook17h4556ac4f9c07bfb2E($info) {
 $info = $info|0;
 var $$ = 0, $$cast = 0, $$fca$1$gep = 0, $$pre = 0, $$pre147 = 0, $$sink = 0, $$sink$sink = 0, $$sink145$in$phi$trans$insert = 0, $$sink9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i = 0, $_0$0$i$i85 = 0, $_10$i = 0, $_2$sroa$0$0$copyload2$i$i$i = 0, $_25$0$i = 0, $_3$i = 0, $_32$sroa$0$0 = 0;
 var $_32$sroa$6$0 = 0, $_48 = 0, $_50$0$$sroa_idx = 0, $_72$0$off0 = 0, $_72$1$off0132 = 0, $_72$2 = 0, $col = 0, $def$meta$sink$i = 0, $def$ptr$sink$i = 0, $err = 0, $extract$t = 0, $file = 0, $lhsc = 0, $line = 0, $log_backtrace = 0, $msg = 0, $name = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$2 = 0;
 var $personalityslot$sroa$0$3133 = 0, $personalityslot$sroa$12$0 = 0, $personalityslot$sroa$12$2 = 0, $personalityslot$sroa$12$3134 = 0, $s = 0, $stderr = 0, $storemerge = 0, $switch = 0, $switch$i = 0, $switch$i$i = 0, $switch$i$i$i$i$i = 0, $switch$i$i94 = 0, $switch$i2$i$i = 0, $switch$i78 = 0, $switch$i81 = 0, $switch$i90 = 0, $switch2$i$i$i = 0, $switch3$i = 0, $t$sroa$0$0$$sroa_idx2$i$i = 0, $thread = 0;
 var $val$0$i$ph = 0, $val$0$i128144 = 0, $write = 0, $x$i$sroa$6$0$$sroa_idx118 = 0, $x$i$sroa$6$0$copyload = 0, $x$i$sroa$7$0$$sroa_idx120 = 0, $x$i$sroa$7$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_3$i = sp + 112|0;
 $_10$i = sp + 96|0;
 $s = sp + 88|0;
 $stderr = sp + 80|0;
 $_48 = sp + 64|0;
 $write = sp + 40|0;
 $name = sp + 32|0;
 $thread = sp + 24|0;
 $err = sp + 16|0;
 $msg = sp + 8|0;
 $col = sp + 128|0;
 $line = sp + 124|0;
 $file = sp;
 $log_backtrace = sp + 132|0;
 $0 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
 $switch$i2$i$i = ($0|0)==(0|0);
 if ($switch$i2$i$i) {
  __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
  // unreachable;
 }
 $1 = HEAP32[$0>>2]|0;
 $switch2$i$i$i = ($1|0)==(1);
 if ($switch2$i$i$i) {
  $$sink145$in$phi$trans$insert = ((($0)) + 4|0);
  $$pre = HEAP32[$$sink145$in$phi$trans$insert>>2]|0;
  $6 = ($$pre>>>0)>(1);
  if ($6) {
   $storemerge = 2;
  } else {
   label = 6;
  }
 } else {
  $2 = $0;
  $3 = $2;
  HEAP8[$3>>0]=1&255;HEAP8[$3+1>>0]=(1>>8)&255;HEAP8[$3+2>>0]=(1>>16)&255;HEAP8[$3+3>>0]=1>>24;
  $4 = (($2) + 4)|0;
  $5 = $4;
  HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
  $$pre147 = ((($0)) + 4|0);
  HEAP8[$$pre147>>0]=0&255;HEAP8[$$pre147+1>>0]=(0>>8)&255;HEAP8[$$pre147+2>>0]=(0>>16)&255;HEAP8[$$pre147+3>>0]=0>>24;
  label = 6;
 }
 L7: do {
  if ((label|0) == 6) {
   $7 = HEAP32[3359]|0;
   switch ($7|0) {
   case 1:  {
    $storemerge = 0;
    break L7;
    break;
   }
   case 0:  {
    __ZN3std3env7_var_os17h4b6ebb9cf11873caE($_10$i,5622,14);
    $8 = HEAP32[$_10$i>>2]|0;
    $switch3$i = ($8|0)==(0|0);
    if ($switch3$i) {
     $val$0$i128144 = 0;
    } else {
     $x$i$sroa$6$0$$sroa_idx118 = ((($_10$i)) + 4|0);
     $x$i$sroa$6$0$copyload = HEAP32[$x$i$sroa$6$0$$sroa_idx118>>2]|0;
     $x$i$sroa$7$0$$sroa_idx120 = ((($_10$i)) + 8|0);
     $x$i$sroa$7$0$copyload = HEAP32[$x$i$sroa$7$0$$sroa_idx120>>2]|0;
     L14: do {
      switch ($x$i$sroa$7$0$copyload|0) {
      case 1:  {
       $9 = ($8|0)==(5676|0);
       if ($9) {
        $val$0$i$ph = 0;
       } else {
        $lhsc = HEAP8[$8>>0]|0;
        $10 = ($lhsc<<24>>24)==(48);
        $$ = $10 ? 0 : 3;
        $val$0$i$ph = $$;
       }
       break;
      }
      case 4:  {
       $11 = ($8|0)==(5677|0);
       if (!($11)) {
        $12 = (_memcmp($8,5677,4)|0);
        $13 = ($12|0)==(0);
        if (!($13)) {
         $val$0$i$ph = 3;
         break L14;
        }
       }
       $val$0$i$ph = 2;
       break;
      }
      default: {
       $val$0$i$ph = 3;
      }
      }
     } while(0);
     $14 = ($x$i$sroa$6$0$copyload|0)==(0);
     if ($14) {
      $val$0$i128144 = $val$0$i$ph;
     } else {
      ___rust_dealloc($8,$x$i$sroa$6$0$copyload,1);
      $val$0$i128144 = $val$0$i$ph;
     }
    }
    $switch$i90 = ($val$0$i128144<<24>>24)==(0);
    $15 = $val$0$i128144&255;
    $_25$0$i = $switch$i90 ? 1 : $15;
    HEAP32[3359] = $_25$0$i;
    $storemerge = $val$0$i128144;
    break L7;
    break;
   }
   case 2:  {
    $storemerge = 2;
    break L7;
    break;
   }
   case 3:  {
    $storemerge = 3;
    break L7;
    break;
   }
   default: {
    __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(5636,40,2512);
    // unreachable;
   }
   }
  }
 } while(0);
 HEAP8[$log_backtrace>>0] = $storemerge;
 $16 = ((($info)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($info)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$file>>2] = $17;
 $20 = ((($file)) + 4|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($info)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$line>>2] = $22;
 $23 = ((($info)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$col>>2] = $24;
 $25 = HEAP32[$info>>2]|0;
 $26 = ((($info)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_ii[$29 & 127]($25)|0);
 $31 = tempRet0;
 $32 = ($30|0)==(1890621284);
 $33 = ($31|0)==(286299353);
 $34 = $32 & $33;
 $_0$0$i$i85 = $34 ? $25 : 0;
 if ($34) {
  $40 = HEAP32[$_0$0$i$i85>>2]|0;
  $41 = ((($_0$0$i$i85)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$msg>>2] = $40;
  $$sink$sink = $42;
 } else {
  $35 = (FUNCTION_TABLE_ii[$29 & 127]($25)|0);
  $36 = tempRet0;
  $37 = ($35|0)==(-894576856);
  $38 = ($36|0)==(-1612970562);
  $39 = $37 & $38;
  if ($39) {
   $_2$sroa$0$0$copyload2$i$i$i = HEAP32[$25>>2]|0;
   $43 = ((($25)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $$sink = $44;$$sink9 = $_2$sroa$0$0$copyload2$i$i$i;
  } else {
   $$sink = 8;$$sink9 = 5681;
  }
  HEAP32[$msg>>2] = $$sink9;
  $$sink$sink = $$sink;
 }
 $45 = ((($msg)) + 4|0);
 HEAP32[$45>>2] = $$sink$sink;
 HEAP8[$err>>0] = 1;
 $46 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h98747b8064f0dfd3E()|0);
 HEAP32[$thread>>2] = $46;
 $switch$i81 = ($46|0)==(0);
 $47 = $46;
 do {
  if ($switch$i81) {
   $_32$sroa$0$0 = 0;$_32$sroa$6$0 = 0;
   label = 32;
  } else {
   $48 = ((($47)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $switch$i$i$i$i$i = ($49|0)==(0|0);
   if ($switch$i$i$i$i$i) {
    $_32$sroa$0$0 = 0;$_32$sroa$6$0 = 0;
    label = 32;
   } else {
    $50 = ((($47)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + -1)|0;
    $53 = ($51|0)==(0);
    if ($53) {
     __THREW__ = 0;
     invoke_vii(108,($52|0),0);
     $54 = __THREW__; __THREW__ = 0;
     break;
    } else {
     $55 = $49;
     $_32$sroa$0$0 = $55;$_32$sroa$6$0 = $52;
     label = 32;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 32) {
   $58 = $_32$sroa$0$0;
   $switch$i78 = ($_32$sroa$0$0|0)==(0);
   $def$ptr$sink$i = $switch$i78 ? 5689 : $58;
   $def$meta$sink$i = $switch$i78 ? 9 : $_32$sroa$6$0;
   HEAP32[$name>>2] = $def$ptr$sink$i;
   $$fca$1$gep = ((($name)) + 4|0);
   HEAP32[$$fca$1$gep>>2] = $def$meta$sink$i;
   HEAP32[$write>>2] = $name;
   $59 = ((($write)) + 4|0);
   HEAP32[$59>>2] = $msg;
   $60 = ((($write)) + 8|0);
   HEAP32[$60>>2] = $file;
   $61 = ((($write)) + 12|0);
   HEAP32[$61>>2] = $line;
   $62 = ((($write)) + 16|0);
   HEAP32[$62>>2] = $col;
   $63 = ((($write)) + 20|0);
   HEAP32[$63>>2] = $log_backtrace;
   __THREW__ = 0;
   invoke_vi(109,($_3$i|0));
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if (!($65)) {
    $66 = HEAP32[$_3$i>>2]|0;
    $switch$i$i = ($66|0)==(1);
    if ($switch$i$i) {
     __THREW__ = 0;
     invoke_v(104);
     $67 = __THREW__; __THREW__ = 0;
     break;
    }
    $t$sroa$0$0$$sroa_idx2$i$i = ((($_3$i)) + 4|0);
    $68 = $t$sroa$0$0$$sroa_idx2$i$i;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 4)|0;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = HEAP8[$err>>0]|0;
    $switch$i = ($74<<24>>24)==(1);
    $75 = ((($err)) + 1|0);
    $_0$0$i = $switch$i ? $75 : 0;
    $76 = $_48;
    $77 = $76;
    HEAP32[$77>>2] = $70;
    $78 = (($76) + 4)|0;
    $79 = $78;
    HEAP32[$79>>2] = $73;
    $_50$0$$sroa_idx = ((($_48)) + 8|0);
    HEAP32[$_50$0$$sroa_idx>>2] = $_0$0$i;
    $switch = ($70|0)==(0);
    L46: do {
     if ($switch) {
      $89 = ($_0$0$i|0)==(0|0);
      if ($89) {
       $_72$2 = 1;
       label = 51;
      } else {
       __THREW__ = 0;
       invoke_viii(110,($write|0),($_50$0$$sroa_idx|0),(48|0));
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        $96 = ___cxa_find_matching_catch_2()|0;
        $97 = tempRet0;
        $_72$1$off0132 = 1;$personalityslot$sroa$0$3133 = $96;$personalityslot$sroa$12$3134 = $97;
        label = 37;
       } else {
        $_72$2 = 1;
        label = 51;
       }
      }
     } else {
      $82 = $73;
      HEAP32[$stderr>>2] = $70;
      $83 = ((($stderr)) + 4|0);
      HEAP32[$83>>2] = $82;
      $$cast = $70;
      $84 = $73;
      __THREW__ = 0;
      invoke_viii(110,($write|0),($$cast|0),($84|0));
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if ($86) {
       $122 = ___cxa_find_matching_catch_2()|0;
       $123 = tempRet0;
       __ZN4core3ptr13drop_in_place17hb7907b3dcb11f012E($stderr);
       $_72$1$off0132 = 0;$personalityslot$sroa$0$3133 = $122;$personalityslot$sroa$12$3134 = $123;
       label = 37;
       break;
      }
      HEAP32[$s>>2] = $70;
      $90 = ((($s)) + 4|0);
      HEAP32[$90>>2] = $73;
      $91 = $s;
      __THREW__ = 0;
      $92 = (invoke_ii(111,($91|0))|0);
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      do {
       if (!($94)) {
        $switch$i$i94 = ($92<<24>>24)==(0);
        if (!($switch$i$i94)) {
         __THREW__ = 0;
         invoke_v(104);
         $95 = __THREW__; __THREW__ = 0;
         break;
        }
        $98 = HEAP32[$s>>2]|0;
        $99 = ($98|0)==(0|0);
        if (!($99)) {
         $100 = HEAP32[$90>>2]|0;
         $101 = HEAP32[$100>>2]|0;
         __THREW__ = 0;
         invoke_vi($101|0,($98|0));
         $102 = __THREW__; __THREW__ = 0;
         $103 = $102&1;
         if ($103) {
          $111 = ___cxa_find_matching_catch_2()|0;
          $112 = tempRet0;
          $113 = HEAP32[$s>>2]|0;
          $114 = HEAP32[$90>>2]|0;
          __ZN5alloc4heap8box_free17hf07ec92f73b319e5E($113,$114);
          $_72$1$off0132 = 0;$personalityslot$sroa$0$3133 = $111;$personalityslot$sroa$12$3134 = $112;
          label = 37;
          break L46;
         }
         $104 = HEAP32[$90>>2]|0;
         $105 = ((($104)) + 4|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = ($106|0)==(0);
         if (!($107)) {
          $108 = HEAP32[$s>>2]|0;
          $109 = ((($104)) + 8|0);
          $110 = HEAP32[$109>>2]|0;
          ___rust_dealloc($108,$106,$110);
         }
        }
        $_72$2 = 0;
        label = 51;
        break L46;
       }
      } while(0);
      $140 = ___cxa_find_matching_catch_2()|0;
      $141 = tempRet0;
      __ZN4core3ptr13drop_in_place17h19cbc04135e7a0ccE($s);
      $_72$1$off0132 = 0;$personalityslot$sroa$0$3133 = $140;$personalityslot$sroa$12$3134 = $141;
      label = 37;
     }
    } while(0);
    do {
     if ((label|0) == 37) {
      __ZN4core3ptr13drop_in_place17h6dd585eab22f486eE($thread);
      $_72$0$off0 = $_72$1$off0132;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3133;$personalityslot$sroa$12$2 = $personalityslot$sroa$12$3134;
     }
     else if ((label|0) == 51) {
      if (!($switch$i81)) {
       $115 = HEAP32[$47>>2]|0;HEAP32[$47>>2] = (($115-1)|0);
       $116 = ($115|0)==(1);
       if ($116) {
        /* fence */;
        __THREW__ = 0;
        invoke_vi(90,($thread|0));
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if ($118) {
         $142 = ___cxa_find_matching_catch_2()|0;
         $143 = tempRet0;
         $extract$t = ($_72$2<<24>>24)!=(0);
         $_72$0$off0 = $extract$t;$personalityslot$sroa$0$2 = $142;$personalityslot$sroa$12$2 = $143;
         break;
        }
       }
      }
      $119 = HEAP32[$_48>>2]|0;
      $120 = ($119|0)==(0|0);
      $121 = ($_72$2<<24>>24)==(0);
      $or$cond = $121 | $120;
      if ($or$cond) {
       STACKTOP = sp;return;
      }
      $124 = ((($_48)) + 4|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = HEAP32[$125>>2]|0;
      __THREW__ = 0;
      invoke_vi($126|0,($119|0));
      $127 = __THREW__; __THREW__ = 0;
      $128 = $127&1;
      if ($128) {
       $136 = ___cxa_find_matching_catch_2()|0;
       $137 = tempRet0;
       $138 = HEAP32[$_48>>2]|0;
       $139 = HEAP32[$124>>2]|0;
       __ZN5alloc4heap8box_free17hf07ec92f73b319e5E($138,$139);
       ___resumeException($136|0);
       // unreachable;
      }
      $129 = HEAP32[$124>>2]|0;
      $130 = ((($129)) + 4|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ($131|0)==(0);
      if ($132) {
       STACKTOP = sp;return;
      }
      $133 = HEAP32[$_48>>2]|0;
      $134 = ((($129)) + 8|0);
      $135 = HEAP32[$134>>2]|0;
      ___rust_dealloc($133,$131,$135);
      STACKTOP = sp;return;
     }
    } while(0);
    $80 = HEAP32[$_48>>2]|0;
    $81 = ($80|0)==(0|0);
    if ($81) {
     __ZN4core3ptr13drop_in_place17h19cbc04135e7a0ccE($_48);
     $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    if (!($_72$0$off0)) {
     $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    __ZN4core3ptr13drop_in_place17hb7907b3dcb11f012E($_48);
    $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
  }
 } while(0);
 $56 = ___cxa_find_matching_catch_2()|0;
 $57 = tempRet0;
 __ZN4core3ptr13drop_in_place17h6dd585eab22f486eE($thread);
 $personalityslot$sroa$0$0 = $56;$personalityslot$sroa$12$0 = $57;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function _rust_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $_16 = 0, $_3$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0;
 var $_9 = 0, $code = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_10$i = sp + 56|0;
 $_3$i = sp + 32|0;
 $_16 = sp + 24|0;
 $_9 = sp;
 $code = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $4 = (___rust_start_panic($2,$3)|0);
 HEAP32[$code>>2] = $4;
 $5 = $code;
 HEAP32[$_16>>2] = $5;
 $6 = ((($_16)) + 4|0);
 HEAP32[$6>>2] = (112);
 HEAP32[$_9>>2] = 2488;
 $7 = ((($_9)) + 4|0);
 HEAP32[$7>>2] = 1;
 $_5$sroa$0$0$$sroa_idx$i = ((($_9)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 4460;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_9)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1;
 $8 = ((($_9)) + 16|0);
 HEAP32[$8>>2] = $_16;
 $9 = ((($_9)) + 20|0);
 HEAP32[$9>>2] = 1;
 $10 = $_9;
 HEAP32[$_10$i>>2] = $10;
 $11 = ((($_10$i)) + 4|0);
 HEAP32[$11>>2] = (113);
 HEAP32[$_3$i>>2] = 2496;
 $12 = ((($_3$i)) + 4|0);
 HEAP32[$12>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i$i = ((($_3$i)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 4460;
 $_5$sroa$4$0$$sroa_idx2$i$i = ((($_3$i)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 1;
 $13 = ((($_3$i)) + 16|0);
 HEAP32[$13>>2] = $_10$i;
 $14 = ((($_3$i)) + 20|0);
 HEAP32[$14>>2] = 1;
 __ZN3std10sys_common4util10dumb_print17hfc0c323ae8a674b6E($_3$i);
 _abort();
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hc1f9004804404202E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi($3|0,($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$arg0>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  __ZN5alloc4heap8box_free17h77e562e15155f989E($15,$16);
  ___resumeException($13|0);
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 $10 = HEAP32[$arg0>>2]|0;
 $11 = ((($6)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 ___rust_dealloc($10,$8,$12);
 return;
}
function __ZN5alloc4heap8box_free17h77e562e15155f989E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN3std3env7_var_os17h4b6ebb9cf11873caE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phi13Z2D = 0, $$sroa_idx$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $_10$i = 0, $_11$i = 0, $_12$i = 0;
 var $_2 = 0, $_2$sroa$0$0$$sroa_idx2$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i48$i = 0, $_3$i = 0, $_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i = 0, $_34$sroa$0$sroa$4$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i = 0, $_35$i$i$i$i$i$i = 0, $_5$i = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $_8$i = 0, $cond$i = 0, $e$sroa$0$0$$sroa_idx$i$pre$phiZZZZZZZ2D = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $err$i$i$i$i$i$i$i = 0, $k$i = 0, $key = 0;
 var $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$8$0$i = 0, $phitmp = 0, $ptr$0$i$i$i$i$i$i = 0, $ret$sroa$0$0$i = 0, $switch$i = 0, $val$sroa$0$0$$sroa_idx8$i = 0, $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $_12$i = sp + 160|0;
 $_5$i = sp + 136|0;
 $_8$i = sp + 128|0;
 $err$i$i$i$i$i$i$i = sp + 112|0;
 $_35$i$i$i$i$i$i = sp + 96|0;
 $vector$i$i$i = sp + 80|0;
 $_11$i = sp + 64|0;
 $_10$i = sp + 56|0;
 $_3$i = sp + 32|0;
 $k$i = sp + 24|0;
 $_2 = sp + 8|0;
 $key = sp;
 HEAP32[$key>>2] = $1;
 $3 = ((($key)) + 4|0);
 HEAP32[$3>>2] = $2;
 __ZN3std3ffi5c_str7CString3new17he0b1c0791391965eE($_3$i,$1,$2);
 $4 = HEAP32[$_3$i>>2]|0;
 $switch$i = ($4|0)==(1);
 do {
  if ($switch$i) {
   $5 = ((($_3$i)) + 4|0);
   ;HEAP32[$_11$i>>2]=HEAP32[$5>>2]|0;HEAP32[$_11$i+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$_11$i+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$_11$i+12>>2]=HEAP32[$5+12>>2]|0;
   __THREW__ = 0;
   invoke_vii(114,($_10$i|0),($_11$i|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    $55 = $_10$i;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($55) + 4)|0;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    HEAP32[$_2>>2] = 1;
    $_2$sroa$0$0$$sroa_idx2$i$i = ((($_2)) + 4|0);
    $61 = $_2$sroa$0$0$$sroa_idx2$i$i;
    $62 = $61;
    HEAP32[$62>>2] = $57;
    $63 = (($61) + 4)|0;
    $64 = $63;
    HEAP32[$64>>2] = $60;
    $$pre$phi13Z2D = $_2;$77 = $57;$80 = $60;$e$sroa$0$0$$sroa_idx$i$pre$phiZZZZZZZ2D = $_2$sroa$0$0$$sroa_idx2$i$i;
    break;
   }
   $65 = ___cxa_find_matching_catch_2()|0;
   $66 = tempRet0;
   $personalityslot$sroa$0$0$i = $65;$personalityslot$sroa$8$0$i = $66;
   ___resumeException($personalityslot$sroa$0$0$i|0);
   // unreachable;
  } else {
   $val$sroa$0$0$$sroa_idx8$i = ((($_3$i)) + 4|0);
   $8 = $val$sroa$0$0$$sroa_idx8$i;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = (($8) + 4)|0;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = $k$i;
   $15 = $14;
   HEAP32[$15>>2] = $10;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = $13;
   $18 = $10;
   $19 = $10;
   (_pthread_mutex_lock(((13468)|0))|0);
   $20 = ((($k$i)) + 4|0);
   $21 = (_getenv(($18|0))|0);
   $22 = ($21|0)==(0|0);
   L8: do {
    if ($22) {
     $48 = 0;$51 = 0;$ret$sroa$0$0$i = 0;
    } else {
     $23 = (_strlen($21)|0);
     $24 = ($23|0)==(-1);
     do {
      if ($24) {
       __THREW__ = 0;
       invoke_vii(108,-1,0);
       $25 = __THREW__; __THREW__ = 0;
       label = 20;
      } else {
       $26 = ($23|0)<(0);
       if ($26) {
        __THREW__ = 0;
        invoke_vi(91,(2824|0));
        $27 = __THREW__; __THREW__ = 0;
        label = 20;
        break;
       }
       $28 = ($23|0)==(0);
       if ($28) {
        $ptr$0$i$i$i$i$i$i = (1);
       } else {
        $29 = (___rust_alloc($23,1,$err$i$i$i$i$i$i$i)|0);
        $30 = ($29|0)==(0|0);
        if ($30) {
         ___rust_oom($_35$i$i$i$i$i$i);
         // unreachable;
        } else {
         $ptr$0$i$i$i$i$i$i = $29;
        }
       }
       $31 = $ptr$0$i$i$i$i$i$i;
       HEAP32[$vector$i$i$i>>2] = $31;
       $$sroa_idx$i$i$i$i = ((($vector$i$i$i)) + 4|0);
       HEAP32[$$sroa_idx$i$i$i$i>>2] = $23;
       $32 = ((($vector$i$i$i)) + 8|0);
       HEAP32[$32>>2] = 0;
       __THREW__ = 0;
       invoke_vii(115,($vector$i$i$i|0),($23|0));
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $35 = ___cxa_find_matching_catch_2()|0;
        $36 = tempRet0;
        __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($vector$i$i$i);
        $eh$lpad$body$i$index2Z2D = $36;$eh$lpad$body$i$indexZ2D = $35;
        break;
       } else {
        $37 = HEAP32[$32>>2]|0;
        $38 = (($37) + ($23))|0;
        HEAP32[$32>>2] = $38;
        $_2$sroa$0$0$copyload2$i$i$i$i$i$i48$i = HEAP32[$vector$i$i$i>>2]|0;
        $39 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i48$i) + ($37)|0);
        _memcpy(($39|0),($21|0),($23|0))|0;
        $40 = $$sroa_idx$i$i$i$i;
        $41 = $40;
        $42 = HEAP32[$41>>2]|0;
        $43 = (($40) + 4)|0;
        $44 = $43;
        $45 = HEAP32[$44>>2]|0;
        $48 = $42;$51 = $45;$ret$sroa$0$0$i = $_2$sroa$0$0$copyload2$i$i$i$i$i$i48$i;
        break L8;
       }
      }
     } while(0);
     if ((label|0) == 20) {
      $67 = ___cxa_find_matching_catch_2()|0;
      $68 = tempRet0;
      $eh$lpad$body$i$index2Z2D = $68;$eh$lpad$body$i$indexZ2D = $67;
     }
     __ZN4core3ptr13drop_in_place17h85cbb67c77cbcedaE($k$i);
     $personalityslot$sroa$0$0$i = $eh$lpad$body$i$indexZ2D;$personalityslot$sroa$8$0$i = $eh$lpad$body$i$index2Z2D;
     ___resumeException($personalityslot$sroa$0$0$i|0);
     // unreachable;
    }
   } while(0);
   (_pthread_mutex_unlock(((13468)|0))|0);
   HEAP32[$_2>>2] = 0;
   $_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i = ((($_2)) + 4|0);
   HEAP32[$_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i>>2] = $ret$sroa$0$0$i;
   $_34$sroa$0$sroa$4$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i = ((($_2)) + 8|0);
   $46 = $_34$sroa$0$sroa$4$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i;
   $47 = $46;
   HEAP32[$47>>2] = $48;
   $49 = (($46) + 4)|0;
   $50 = $49;
   HEAP32[$50>>2] = $51;
   HEAP8[$19>>0] = 0;
   $52 = HEAP32[$20>>2]|0;
   $53 = ($52|0)==(0);
   if (!($53)) {
    $54 = HEAP32[$k$i>>2]|0;
    ___rust_dealloc($54,$52,1);
   }
   $$pre = HEAP32[$_2>>2]|0;
   $phitmp = ($$pre|0)==(1);
   if ($phitmp) {
    $69 = $_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 4)|0;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $$pre$phi13Z2D = $_2;$77 = $71;$80 = $74;$e$sroa$0$0$$sroa_idx$i$pre$phiZZZZZZZ2D = $_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i;
    break;
   } else {
    ;HEAP32[$0>>2]=HEAP32[$_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_34$sroa$0$sroa$0$0$_34$sroa$0$0$$sroa_cast25$sroa_idx$i+8>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $75 = $_8$i;
 $76 = $75;
 HEAP32[$76>>2] = $77;
 $78 = (($75) + 4)|0;
 $79 = $78;
 HEAP32[$79>>2] = $80;
 $81 = $key;
 $82 = $_8$i;
 HEAP32[$_12$i>>2] = $81;
 $83 = ((($_12$i)) + 4|0);
 HEAP32[$83>>2] = (116);
 $84 = ((($_12$i)) + 8|0);
 HEAP32[$84>>2] = $82;
 $85 = ((($_12$i)) + 12|0);
 HEAP32[$85>>2] = (117);
 HEAP32[$_5$i>>2] = 2848;
 $86 = ((($_5$i)) + 4|0);
 HEAP32[$86>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i$i = ((($_5$i)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i$i = ((($_5$i)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2;
 $87 = ((($_5$i)) + 16|0);
 HEAP32[$87>>2] = $_12$i;
 $88 = ((($_5$i)) + 20|0);
 HEAP32[$88>>2] = 2;
 __THREW__ = 0;
 invoke_vii(118,($_5$i|0),(2864|0));
 $89 = __THREW__; __THREW__ = 0;
 $90 = ___cxa_find_matching_catch_2()|0;
 $91 = tempRet0;
 __THREW__ = 0;
 invoke_vi(119,($_8$i|0));
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 if ($93) {
  $94 = ___cxa_find_matching_catch_2()|0;
  $95 = tempRet0;
  $eh$lpad$body$index7Z2D = $95;$eh$lpad$body$indexZ2D = $94;
 } else {
  $eh$lpad$body$index7Z2D = $91;$eh$lpad$body$indexZ2D = $90;
 }
 $96 = HEAP32[$$pre$phi13Z2D>>2]|0;
 $cond$i = ($96|0)==(0);
 if (!($cond$i)) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 __ZN4core3ptr13drop_in_place17h35a97d0211672430E($e$sroa$0$0$$sroa_idx$i$pre$phiZZZZZZZ2D);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h8e0a33686c59d41dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx18 = 0, $cond$i$i$i$i = 0, $switch = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2949dc4d687237faE(2528)|0);
 $switch = ($1|0)==(0|0);
 if ($switch) {
  HEAP32[$0>>2] = 1;
  return;
 }
 $2 = HEAP32[$1>>2]|0;
 $switch2 = ($2|0)==(1);
 $3 = ((($1)) + 4|0);
 if (!($switch2)) {
  $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx18 = ((($1)) + 8|0);
  HEAP8[$1>>0]=1&255;HEAP8[$1+1>>0]=(1>>8)&255;HEAP8[$1+2>>0]=(1>>16)&255;HEAP8[$1+3>>0]=1>>24;
  HEAP8[$3>>0]=0&255;HEAP8[$3+1>>0]=(0>>8)&255;HEAP8[$3+2>>0]=(0>>16)&255;HEAP8[$3+3>>0]=0>>24;
  $4 = $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx18;
  $5 = $4;
  HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP8[$7>>0]=0&255;HEAP8[$7+1>>0]=(0>>8)&255;HEAP8[$7+2>>0]=(0>>16)&255;HEAP8[$7+3>>0]=0>>24;
 }
 $8 = HEAP32[$3>>2]|0;
 $cond$i$i$i$i = ($8|0)==(0);
 if (!($cond$i$i$i$i)) {
  __ZN4core6result13unwrap_failed17hc56d5bdb79226250E();
  // unreachable;
 }
 $9 = ((($1)) + 8|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8)|(HEAPU8[$11+2>>0]<<16)|(HEAPU8[$11+3>>0]<<24);
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8)|(HEAPU8[$14+2>>0]<<16)|(HEAPU8[$14+3>>0]<<24);
 HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
 HEAP8[$3>>0]=0&255;HEAP8[$3+1>>0]=(0>>8)&255;HEAP8[$3+2>>0]=(0>>16)&255;HEAP8[$3+3>>0]=0>>24;
 HEAP32[$0>>2] = 0;
 $16 = ((($0)) + 4|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $12;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $15;
 return;
}
function __ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h7909033ebd12f15aE($arg0,$0,$1) {
 $arg0 = $arg0|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$$$i$i$i$i$i$i = 0, $$$i$i$i$i$i$i = 0, $$add$i$i$i$i$i$i = 0, $$add3224$i$i$i$i$i$i = 0, $$add3225$i$i$i$i$i$i = 0, $$add3226$i$i$i$i$i$i = 0, $$cast$i$i$i$i$i$i$i$i$i = 0, $$idx$i$i$i$i$i$i = 0, $$idx3220$i$i$i$i$i$i = 0, $$idx3221$i$i$i$i$i$i = 0, $$idx3222$i$i$i$i$i$i = 0, $$idx3223$i$i$i$i$i$i = 0, $$lcssa961$i$i$i$i$i = 0, $$phi$trans$insert$i$i$i$i$i$i = 0, $$phi$trans$insert3174$i$i$i$i$i$i = 0, $$phi$trans$insert3176$i$i$i$i$i$i = 0, $$phi$trans$insert3178$i$i$i$i$i$i = 0, $$phi$trans$insert3180$i$i$i$i$i$i = 0, $$phi$trans$insert3182$i$i$i$i$i$i = 0, $$phi$trans$insert3184$i$i$i$i$i$i = 0;
 var $$phi$trans$insert3186$i$i$i$i$i$i = 0, $$phi$trans$insert3188$i$i$i$i$i$i = 0, $$phi$trans$insert3190$i$i$i$i$i$i = 0, $$phi$trans$insert3192$i$i$i$i$i$i = 0, $$phi$trans$insert3194$i$i$i$i$i$i = 0, $$phi$trans$insert3196$i$i$i$i$i$i = 0, $$phi$trans$insert3198$i$i$i$i$i$i = 0, $$phi$trans$insert3200$i$i$i$i$i$i = 0, $$phi$trans$insert3202$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i1144$i$i$i$i$i$i = 0, $$pre$i$i$i1173$i$i$i$i$i$i = 0, $$pre$i$i$i1202$i$i$i$i$i$i = 0, $$pre$i$i$i1231$i$i$i$i$i$i = 0, $$pre$i$i$i1260$i$i$i$i$i$i = 0, $$pre$i$i$i1289$i$i$i$i$i$i = 0, $$pre$i$i$i1318$i$i$i$i$i$i = 0, $$pre$i$i$i1347$i$i$i$i$i$i = 0, $$pre$i$i$i1376$i$i$i$i$i$i = 0;
 var $$pre$i$i$i1405$i$i$i$i$i$i = 0, $$pre$i$i$i1434$i$i$i$i$i$i = 0, $$pre$i$i$i1463$i$i$i$i$i$i = 0, $$pre$i$i$i1492$i$i$i$i$i$i = 0, $$pre$i$i$i1521$i$i$i$i$i$i = 0, $$pre$i$i$i1550$i$i$i$i$i$i = 0, $$pre$i$i$i1579$i$i$i$i$i$i = 0, $$pre$i$i$i1608$i$i$i$i$i$i = 0, $$pre$i$i$i1630$i$i$i$i$i$i = 0, $$pre$i$i$i1673$i$i$i$i$i$i = 0, $$pre$i$i$i900$i$i$i$i$i$i = 0, $$pre$i$i$i985$i$i$i$i$i$i = 0, $$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i$i$i$i824$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1082$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1352$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1381$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1410$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1439$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1468$i$i$i$i$i$iZ2D = 0;
 var $$pre$phi$i$ph$i$i1497$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1526$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1555$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1584$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1613$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1635$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1678$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i2021$i$i$i$i$i$iZ2D = 0, $$pre3175$i$i$i$i$i$i = 0, $$pre3177$i$i$i$i$i$i = 0, $$pre3179$i$i$i$i$i$i = 0, $$pre3181$i$i$i$i$i$i = 0, $$pre3183$i$i$i$i$i$i = 0, $$pre3185$i$i$i$i$i$i = 0, $$pre3187$i$i$i$i$i$i = 0, $$pre3189$i$i$i$i$i$i = 0, $$pre3191$i$i$i$i$i$i = 0, $$pre3193$i$i$i$i$i$i = 0, $$pre3195$i$i$i$i$i$i = 0, $$pre3197$i$i$i$i$i$i = 0;
 var $$pre3199$i$i$i$i$i$i = 0, $$pre3201$i$i$i$i$i$i = 0, $$pre3203$i$i$i$i$i$i = 0, $$pre5$i$i$i902$i$i$i$i$i$i = 0, $$pre963$i$i$i$i$i = 0, $$ptr$i$i$i$i$i$i = 0, $$ptr3227$i$i$i$i$i$i = 0, $$ptr3229$i$i$i$i$i$i = 0, $$ptr3230$i$i$i$i$i$i = 0, $$ptr3232$i$i$i$i$i$i = 0, $$ptr3240$i$i$i$i$i$i = 0, $$ptr3241$i$i$i$i$i$i = 0, $$ptr3242$i$i$i$i$i$i = 0, $$sink$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $$sink$i1961386$i$i = 0, $$sink$i6$i$i$i$i = 0, $$sink1022586$i$i$i$i$i$i = 0, $$sink2062$i$i$i$i$i$i = 0, $$sink2587$i$i$i$i$i$i = 0, $$sink2587$lcssa2737$i$i$i$i$i$i = 0;
 var $$sink813$i$i$i$i$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $98 = 0, $99 = 0, $_0$0$i14$i$i$i$i$i$i$i$i$i = 0, $_0$0$i14$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i14$i$i$i$i$i$i$i$i$i$i$i = 0;
 var $_0$0$i14$i$i1047$i$i$i$i$i$i = 0, $_0$0$i14$i$i958$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i1041$i$i$i$i$i$i = 0, $_0$0$i20$i$i952$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i1052$i$i$i$i$i$i = 0, $_0$0$i9$i$i963$i$i$i$i$i$i = 0, $_0$sroa$0$0$i$i$i$i$i$i$i$i$i = 0, $_10$sroa$0$0$copyload$i$i = 0, $_10$sroa$6$0$$sroa_idx242$i$i = 0, $_10$sroa$6$0$copyload$i$i = 0, $_10$sroa$9$0$$sroa_idx247$i$i = 0, $_10$sroa$9$0$copyload$i$i = 0, $_102$i$i$i$i$i = 0, $_104$i$sroa$0$0$copyload$i = 0;
 var $_104$i$sroa$0$0$copyload$pre$i = 0, $_105$i$i = 0, $_11$i$i = 0, $_110$sroa$0$0$copyload$i$i$i$i$i$i = 0, $_110$sroa$5$0$$sroa_idx169$i$i$i$i$i$i = 0, $_110$sroa$5$0$copyload$i$i$i$i$i$i = 0, $_111$i$i$i$i$i$i = 0, $_113$i$i$i$i$i$i = 0, $_12 = 0, $_139$i$i$i$i$i$i = 0, $_15$i$i$i$i$i = 0, $_15$sroa$0$0$i$i$i = 0, $_15$sroa$0$0$in$i$i$i = 0, $_156$sroa$4$2$ph$i$i$i$i$i$i = 0, $_165$i$i$i$i$i$i = 0, $_17$i$i$i = 0, $_17$i$i$i$i$i = 0, $_197$sroa$5$2$ph$i$i$i$i$i$i = 0, $_2$sroa$0$0$$sroa_idx2$i121$i$i$i$i$i = 0, $_20$i$i$i$i$i = 0;
 var $_206$i$i$i$i$i$i = 0, $_223$i$i$i$i$i$i = 0, $_244$i$i$i$i$i$i = 0, $_266$i$i$i$i$i$i = 0, $_27$i$i$i$i$i = 0, $_288$i$i$i$i$i$i = 0, $_3 = 0, $_310$i$i$i$i$i$i = 0, $_332$i$i$i$i$i$i = 0, $_354$i$i$i$i$i$i = 0, $_36$i$i$i$i$i = 0, $_376$i$i$i$i$i$i = 0, $_398$i$i$i$i$i$i = 0, $_4$sroa$0$0$$sroa_idx$i = 0, $_4$sroa$0$0$$sroa_idx$i$i$i = 0, $_4$sroa$0$0$$sroa_idx$i135$i$i = 0, $_4$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i = 0, $_4$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i = 0, $_4$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i = 0, $_4$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i = 0;
 var $_4$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i = 0, $_40$i$i = 0, $_420$i$i$i$i$i$i = 0, $_43$i$i = 0, $_442$i$i$i$i$i$i = 0, $_464$i$i$i$i$i$i = 0, $_486$i$i$i$i$i$i = 0, $_5 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i99$i$i$i$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i$i$i$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i100$i$i$i$i$i = 0, $_508$i$i$i$i$i$i = 0, $_51 = 0, $_52$i$i$i$i$i = 0, $_53 = 0, $_530$i$i$i$i$i$i = 0, $_54$sroa$5$2$ph$i$i$i$i$i$i = 0;
 var $_55$i$i$i$i$i = 0, $_552$i$i$i$i$i$i = 0, $_57$i$i$i$i$i = 0, $_574$i$i$i$i$i$i = 0, $_58$i$i = 0, $_596$i$i$i$i$i$i = 0, $_61$i$i = 0, $_618$i$i$i$i$i$i = 0, $_62$i$i$i$i$i = 0, $_638$i$i$i$i$i$i = 0, $_653$sroa$0$0$i$i$i$i$i$i = 0, $_661$i$i$i$i$i$i = 0, $_78$i$i$i$i$i = 0, $_8$sroa$6$1$ph$i$i$i$i$i$i$i$i = 0, $_92$i$i$i$i$i$i = 0, $_93$i$i$i$i$i = 0, $accum$0$i$i$i$i$i = 0, $accum$0$i$i$i$i$i$i$i$i$i$i = 0, $accum$1$i18$i$i$i$i = 0, $accum$1$sink$i$ph$i$i$i$i = 0;
 var $arg$i$i$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i11 = 0, $cond93$i$i$i$i$i$i = 0, $context$i$i = 0, $context$i$i$i = 0, $def$meta$sink$i$i$i$i$i$i$i = 0, $def$ptr$sink$i$i$i$i$i$i$i = 0, $e$sroa$0$0$copyload$i$i$i$i$i$i$i = 0, $err$sroa$0$0$$sroa_idx$i$i$i$i$i = 0, $err$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err1$sroa$0$0$$sroa_idx$i$i = 0, $err1$sroa$0$0$$sroa_idx$i$i$i$i$i = 0, $err1$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err10$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err11$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err12$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err13$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err14$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0;
 var $err15$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err16$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err17$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err18$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err19$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err2$sroa$0$0$$sroa_idx$i$i = 0, $err20$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err21$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err22$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err23$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err24$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err3$sroa$0$0$$sroa_idx$i$i$i$i$i = 0, $err3$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err4$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err5$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err6$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err7$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err8$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err9$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $extract$t47 = 0;
 var $f$i$i$i$i$i = 0, $first$0$off02674$i$i$i$i$i$i = 0, $frames$i$i = 0, $i$0$lcssa$i$i$i$i$i$i = 0, $i$02677$i$i$i$i$i$i = 0, $idx$0$i$i$i$i$i$i = 0, $idx$i$i$i$i$i = 0, $info$i$i$i = 0, $inner$sroa$0$2$i$i$i$i$i$i = 0, $inner$sroa$0$5$ph$i$i$i$i$i$i = 0, $inner$sroa$0$52676$i$i$i$i$i$i = 0, $inner$sroa$14$1$i$i$i$i$i$i = 0, $inner$sroa$14$1$in$i$i$i$i$i$i = 0, $inner$sroa$14$2$i$i$i$i$i$i = 0, $inner$sroa$14$5$ph$i$i$i$i$i$i = 0, $inner$sroa$14$52675$i$i$i$i$i$i = 0, $iter$sroa$0$0$iter$sroa$0$0$313358$i$i = 0, $iter$sroa$15$0$i$i = 0, $not$$i$i$i904$i$i$i$i$i$i = 0, $or$cond = 0;
 var $or$cond$i$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i$i$i$i = 0, $or$cond$i$i$i$i1653$i$i$i$i$i$i = 0, $or$cond$i$i$i$i878$i$i$i$i$i$i = 0, $or$cond$i$i$i$i976$i$i$i$i$i$i = 0, $or$cond$i$i$i$i984$i$i$i$i$i$i = 0, $or$cond18$i$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i918$i$i$i$i$i$i = 0, $phitmp$i$i1039$i$i$i$i$i$i = 0, $phitmp$i$i950$i$i$i$i$i$i = 0, $phitmp26$i$i$i$i$i$i$i$i$i = 0, $phitmp26$i$i$i$i$i$i$i$i$i$i = 0, $phitmp26$i$i$i$i$i$i$i$i$i$i$i = 0, $phitmp26$i$i1045$i$i$i$i$i$i = 0, $phitmp26$i$i956$i$i$i$i$i$i = 0, $phitmp27$i$i$i$i$i$i$i$i$i = 0;
 var $phitmp27$i$i$i$i$i$i$i$i$i$i = 0, $phitmp27$i$i$i$i$i$i$i$i$i$i$i = 0, $phitmp27$i$i1050$i$i$i$i$i$i = 0, $phitmp27$i$i961$i$i$i$i$i$i = 0, $res$sroa$0$1$i = 0, $res$sroa$8$0$i$off0 = 0, $res$sroa$8$0$i$off32 = 0, $res$sroa$8$1$i$off0 = 0, $res$sroa$8$1$i$off32 = 0, $rest2$sroa$0$0$be$i$i$i$i$i$i = 0, $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = 0, $rest2$sroa$0$02596$i$i$i$i$i$i = 0, $rest2$sroa$80$0$be$i$i$i$i$i$i = 0, $rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = 0, $rest2$sroa$80$02633$i$i$i$i$i$i = 0, $rhsc$i$i$i$i$i$i$i$i$i = 0, $rhsc$i$i$i826$i$i$i$i$i$i = 0, $rhsc2061$i$i$i$i$i$i = 0, $self$off$i$i$i$i$i$i$i = 0, $self$off$i$i$i$i$i$i$i$i$i$i$i$i$i = 0;
 var $self$off$i971$i$i$i$i$i$i = 0, $self$off1$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $self$off2$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $split$i$i$i$i$i$i = 0, $switch$i = 0, $switch$i$i = 0, $switch$i$i$i$i = 0, $switch$i$i$i$i$i = 0, $switch$i122$i$i$i$i$i = 0, $switch$i14 = 0, $switch$i198$i$i = 0, $switch$i25 = 0, $switch$i931$i$i$i$i$i$i = 0, $switch$i982$i$i$i$i$i$i = 0, $switch104$i$i$i$i$i$i = 0, $switch105$i$i$i$i$i$i = 0, $switch106$i$i$i$i$i$i = 0, $switch107$i$i$i$i$i$i = 0, $switch113$i$i$i$i$i$i = 0, $switch114$i$i$i$i$i$i = 0;
 var $switch115$i$i$i$i$i$i = 0, $switch116$i$i$i$i$i$i = 0, $switch117$i$i$i$i$i$i = 0, $switch118$i$i$i$i$i$i = 0, $switch119$i$i$i$i$i$i = 0, $switch120$i$i$i$i$i$i = 0, $switch121$i$i$i$i$i$i = 0, $switch122$i$i$i$i$i$i = 0, $switch123$i$i$i$i$i$i = 0, $switch124$i$i$i$i$i$i = 0, $switch125$i$i$i$i$i$i = 0, $switch126$i$i$i$i$i$i = 0, $switch127$i$i$i$i$i$i = 0, $switch128$i$i$i$i$i$i = 0, $switch129$i$i$i$i$i$i = 0, $switch130$i$i$i$i$i$i = 0, $switch131$i$i$i$i$i$i = 0, $switch132$i$i$i$i$i$i = 0, $switch17$i$i$i$i$i = 0, $switch18$i$i$i$i$i = 0;
 var $switch19$i$i$i$i$i = 0, $switch20$i$i$i$i$i = 0, $switch23$i$i = 0, $switch24$i$i = 0, $switch25$i$i$i$i$i = 0, $switch26$i$i = 0, $switch26$i$i$i$i$i = 0, $switch27$i$i$i$i$i = 0, $switch28$i$i$i$i$i = 0, $switch3647$i$i$i$i$i$i = 0, $symname$sroa$0$0$i$i$i = 0, $symname$sroa$0$1$i$i$i = 0, $symname$sroa$6$1$i$i$i = 0, $tmp_ret6$i$i$i$i$i = 0, $trunc$i$i$i$i$i$i$i$i$i$i = 0, $trunc$i$i$i$i$i$i$i$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1760|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1760|0);
 $context$i$i = sp + 1752|0;
 $_102$i$i$i$i$i = sp + 1744|0;
 $_78$i$i$i$i$i = sp + 1736|0;
 $_57$i$i$i$i$i = sp + 1728|0;
 $_36$i$i$i$i$i = sp + 1720|0;
 $_15$i$i$i$i$i = sp + 1712|0;
 $f$i$i$i$i$i = sp + 1704|0;
 $context$i$i$i = sp + 1756|0;
 $_661$i$i$i$i$i$i = sp + 1688|0;
 $_638$i$i$i$i$i$i = sp + 1672|0;
 $_618$i$i$i$i$i$i = sp + 1656|0;
 $_596$i$i$i$i$i$i = sp + 1640|0;
 $_574$i$i$i$i$i$i = sp + 1624|0;
 $_552$i$i$i$i$i$i = sp + 1608|0;
 $_530$i$i$i$i$i$i = sp + 1592|0;
 $_508$i$i$i$i$i$i = sp + 1576|0;
 $_486$i$i$i$i$i$i = sp + 1560|0;
 $_464$i$i$i$i$i$i = sp + 1544|0;
 $_442$i$i$i$i$i$i = sp + 1528|0;
 $_420$i$i$i$i$i$i = sp + 1512|0;
 $_398$i$i$i$i$i$i = sp + 1496|0;
 $_376$i$i$i$i$i$i = sp + 1480|0;
 $_354$i$i$i$i$i$i = sp + 1464|0;
 $_332$i$i$i$i$i$i = sp + 1448|0;
 $_310$i$i$i$i$i$i = sp + 1432|0;
 $_288$i$i$i$i$i$i = sp + 1416|0;
 $_266$i$i$i$i$i$i = sp + 1400|0;
 $_244$i$i$i$i$i$i = sp + 1384|0;
 $_223$i$i$i$i$i$i = sp + 1368|0;
 $_206$i$i$i$i$i$i = sp + 1352|0;
 $_165$i$i$i$i$i$i = sp + 1344|0;
 $_139$i$i$i$i$i$i = sp + 1328|0;
 $_113$i$i$i$i$i$i = sp + 1320|0;
 $_111$i$i$i$i$i$i = sp + 1312|0;
 $split$i$i$i$i$i$i = sp + 1224|0;
 $_92$i$i$i$i$i$i = sp + 1208|0;
 $tmp_ret6$i$i$i$i$i = sp + 1200|0;
 $_93$i$i$i$i$i = sp + 1184|0;
 $_62$i$i$i$i$i = sp + 1176|0;
 $_55$i$i$i$i$i = sp + 1152|0;
 $_52$i$i$i$i$i = sp + 1136|0;
 $_27$i$i$i$i$i = sp + 1112|0;
 $_20$i$i$i$i$i = sp + 1088|0;
 $_17$i$i$i$i$i = sp + 1072|0;
 $idx$i$i$i$i$i = sp + 1752|0;
 $arg$i$i$i$i = sp + 1064|0;
 $_17$i$i$i = sp + 1048|0;
 $info$i$i$i = sp + 1032|0;
 $_105$i$i = sp + 1016|0;
 $_61$i$i = sp + 992|0;
 $_58$i$i = sp + 976|0;
 $_43$i$i = sp + 952|0;
 $_40$i$i = sp + 936|0;
 $_11$i$i = sp + 920|0;
 $frames$i$i = sp + 120|0;
 $_53 = sp + 96|0;
 $_51 = sp + 80|0;
 $_12 = sp + 40|0;
 $_5 = sp + 16|0;
 $_3 = sp;
 $2 = HEAP32[$arg0>>2]|0;
 $3 = ((($arg0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($arg0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($arg0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($arg0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$_12>>2] = $2;
 $11 = ((($_12)) + 4|0);
 HEAP32[$11>>2] = (93);
 $12 = ((($_12)) + 8|0);
 HEAP32[$12>>2] = $4;
 $13 = ((($_12)) + 12|0);
 HEAP32[$13>>2] = (93);
 $14 = ((($_12)) + 16|0);
 HEAP32[$14>>2] = $6;
 $15 = ((($_12)) + 20|0);
 HEAP32[$15>>2] = (93);
 $16 = ((($_12)) + 24|0);
 HEAP32[$16>>2] = $8;
 $17 = ((($_12)) + 28|0);
 HEAP32[$17>>2] = (112);
 $18 = ((($_12)) + 32|0);
 HEAP32[$18>>2] = $10;
 $19 = ((($_12)) + 36|0);
 HEAP32[$19>>2] = (112);
 HEAP32[$_5>>2] = 2536;
 $20 = ((($_5)) + 4|0);
 HEAP32[$20>>2] = 6;
 $_5$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 4096;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_5)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 5;
 $21 = ((($_5)) + 16|0);
 HEAP32[$21>>2] = $_12;
 $22 = ((($_5)) + 20|0);
 HEAP32[$22>>2] = 5;
 $23 = ((($1)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_viii[$24 & 255]($_3,$0,$_5);
 $25 = HEAP32[$_3>>2]|0;
 $cond$i11 = ($25|0)==(0);
 if (!($cond$i11)) {
  $26 = ((($_3)) + 4|0);
  $27 = HEAP8[$26>>0]|0;
  $switch$i14 = ($27&255)<(2);
  if (!($switch$i14)) {
   $28 = ((($_3)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($29)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   __THREW__ = 0;
   invoke_vi($34|0,($31|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $44 = ___cxa_find_matching_catch_2()|0;
    $45 = tempRet0;
    $46 = HEAP32[$30>>2]|0;
    $47 = HEAP32[$32>>2]|0;
    __ZN5alloc4heap8box_free17he2c7ab366ae97083E($46,$47);
    __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($29);
    ___resumeException($44|0);
    // unreachable;
   }
   $37 = HEAP32[$32>>2]|0;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $41 = HEAP32[$30>>2]|0;
    $42 = ((($37)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    ___rust_dealloc($41,$39,$43);
   }
   ___rust_dealloc($29,12,4);
  }
 }
 $48 = ((($arg0)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP8[$49>>0]|0;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $52 = HEAP8[5752]|0;if (($52<<24>>24) == 1) HEAP8[5752] = 0;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   STACKTOP = sp;return;
  }
  HEAP32[$_53>>2] = 2752;
  $935 = ((($_53)) + 4|0);
  HEAP32[$935>>2] = 1;
  $_4$sroa$0$0$$sroa_idx$i = ((($_53)) + 8|0);
  HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0;
  $936 = ((($_53)) + 16|0);
  HEAP32[$936>>2] = 13564;
  $937 = ((($_53)) + 20|0);
  HEAP32[$937>>2] = 0;
  FUNCTION_TABLE_viii[$24 & 255]($_51,$0,$_53);
  $938 = HEAP32[$_51>>2]|0;
  $cond$i = ($938|0)==(0);
  if (!($cond$i)) {
   $939 = ((($_51)) + 4|0);
   $940 = HEAP8[$939>>0]|0;
   $switch$i = ($940&255)<(2);
   if (!($switch$i)) {
    $941 = ((($_51)) + 8|0);
    $942 = HEAP32[$941>>2]|0;
    $943 = ((($942)) + 4|0);
    $944 = HEAP32[$943>>2]|0;
    $945 = ((($942)) + 8|0);
    $946 = HEAP32[$945>>2]|0;
    $947 = HEAP32[$946>>2]|0;
    __THREW__ = 0;
    invoke_vi($947|0,($944|0));
    $948 = __THREW__; __THREW__ = 0;
    $949 = $948&1;
    if ($949) {
     $957 = ___cxa_find_matching_catch_2()|0;
     $958 = tempRet0;
     $959 = HEAP32[$943>>2]|0;
     $960 = HEAP32[$945>>2]|0;
     __ZN5alloc4heap8box_free17he2c7ab366ae97083E($959,$960);
     __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($942);
     ___resumeException($957|0);
     // unreachable;
    }
    $950 = HEAP32[$945>>2]|0;
    $951 = ((($950)) + 4|0);
    $952 = HEAP32[$951>>2]|0;
    $953 = ($952|0)==(0);
    if (!($953)) {
     $954 = HEAP32[$943>>2]|0;
     $955 = ((($950)) + 8|0);
     $956 = HEAP32[$955>>2]|0;
     ___rust_dealloc($954,$952,$956);
    }
    ___rust_dealloc($942,12,4);
   }
  }
  STACKTOP = sp;return;
 }
 (_pthread_mutex_lock(((13440)|0))|0);
 _memset(($frames$i$i|0),0,800)|0;
 __ZN3std3sys3imp9backtrace7tracing3imp16unwind_backtrace17h30c609a3f977068cE($_11$i$i,$frames$i$i);
 $_10$sroa$0$0$copyload$i$i = HEAP32[$_11$i$i>>2]|0;
 $_10$sroa$6$0$$sroa_idx242$i$i = ((($_11$i$i)) + 4|0);
 $_10$sroa$6$0$copyload$i$i = HEAP32[$_10$sroa$6$0$$sroa_idx242$i$i>>2]|0;
 $_10$sroa$9$0$$sroa_idx247$i$i = ((($_11$i$i)) + 8|0);
 $_10$sroa$9$0$copyload$i$i = HEAP32[$_10$sroa$9$0$$sroa_idx247$i$i>>2]|0;
 $switch$i$i = ($_10$sroa$0$0$copyload$i$i|0)==(1);
 $extract$t47 = $_10$sroa$6$0$copyload$i$i&255;
 L28: do {
  if ($switch$i$i) {
   $res$sroa$8$0$i$off0 = $extract$t47;$res$sroa$8$0$i$off32 = $_10$sroa$9$0$copyload$i$i;
   label = 13;
  } else {
   $cond$i$i = ($_10$sroa$0$0$copyload$i$i|0)==(0);
   $switch$i198$i$i = ($extract$t47&255)<(2);
   $or$cond$i$i = $cond$i$i | $switch$i198$i$i;
   if (!($or$cond$i$i)) {
    $897 = $_10$sroa$9$0$copyload$i$i;
    $898 = ((($897)) + 4|0);
    $899 = HEAP32[$898>>2]|0;
    $900 = ((($897)) + 8|0);
    $901 = HEAP32[$900>>2]|0;
    $902 = HEAP32[$901>>2]|0;
    __THREW__ = 0;
    invoke_vi($902|0,($899|0));
    $903 = __THREW__; __THREW__ = 0;
    $904 = $903&1;
    if ($904) {
     $912 = ___cxa_find_matching_catch_2()|0;
     $913 = tempRet0;
     $914 = HEAP32[$898>>2]|0;
     $915 = HEAP32[$900>>2]|0;
     __ZN5alloc4heap8box_free17he2c7ab366ae97083E($914,$915);
     __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($897);
     ___resumeException($912|0);
     // unreachable;
    }
    $905 = HEAP32[$900>>2]|0;
    $906 = ((($905)) + 4|0);
    $907 = HEAP32[$906>>2]|0;
    $908 = ($907|0)==(0);
    if (!($908)) {
     $909 = HEAP32[$898>>2]|0;
     $910 = ((($905)) + 8|0);
     $911 = HEAP32[$910>>2]|0;
     ___rust_dealloc($909,$907,$911);
    }
    ___rust_dealloc($897,12,4);
   }
   $863 = ($_10$sroa$6$0$copyload$i$i>>>0)>(100);
   if ($863) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($_10$sroa$6$0$copyload$i$i,100);
    // unreachable;
   }
   HEAP32[$context$i$i$i>>2] = $context$i$i;
   $864 = ($50<<24>>24)==(2);
   do {
    if ($864) {
     label = 464;
    } else {
     $865 = (($frames$i$i) + ($_10$sroa$6$0$copyload$i$i<<3)|0);
     $866 = $865;
     $867 = $context$i$i$i;
     HEAP32[$f$i$i$i$i$i>>2] = $867;
     $868 = ((($_15$i$i$i$i$i)) + 4|0);
     $869 = ((($_36$i$i$i$i$i)) + 4|0);
     $870 = ((($_57$i$i$i$i$i)) + 4|0);
     $871 = ((($_78$i$i$i$i$i)) + 4|0);
     $_15$sroa$0$0$in$i$i$i = $frames$i$i;$accum$0$i$i$i$i$i = 0;
     while(1) {
      $_15$sroa$0$0$i$i$i = $_15$sroa$0$0$in$i$i$i;
      $872 = (($866) - ($_15$sroa$0$0$i$i$i))|0;
      $873 = (($872|0) / 8)&-1;
      $874 = ($873>>>0)>(3);
      if (!($874)) {
       label = 454;
       break;
      }
      __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h12332f02158c6566E($_15$i$i$i$i$i,$f$i$i$i$i$i,$accum$0$i$i$i$i$i,$_15$sroa$0$0$in$i$i$i);
      $877 = HEAP32[$_15$i$i$i$i$i>>2]|0;
      $878 = HEAP32[$868>>2]|0;
      $switch$i$i$i$i$i = ($877|0)==(1);
      if ($switch$i$i$i$i$i) {
       $accum$1$sink$i$ph$i$i$i$i = $878;
       label = 462;
       break;
      }
      $879 = ((($_15$sroa$0$0$in$i$i$i)) + 8|0);
      __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h12332f02158c6566E($_36$i$i$i$i$i,$f$i$i$i$i$i,$878,$879);
      $880 = HEAP32[$_36$i$i$i$i$i>>2]|0;
      $881 = HEAP32[$869>>2]|0;
      $switch25$i$i$i$i$i = ($880|0)==(1);
      if ($switch25$i$i$i$i$i) {
       $accum$1$sink$i$ph$i$i$i$i = $881;
       label = 462;
       break;
      }
      $882 = ((($_15$sroa$0$0$in$i$i$i)) + 16|0);
      __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h12332f02158c6566E($_57$i$i$i$i$i,$f$i$i$i$i$i,$881,$882);
      $883 = HEAP32[$_57$i$i$i$i$i>>2]|0;
      $884 = HEAP32[$870>>2]|0;
      $switch26$i$i$i$i$i = ($883|0)==(1);
      if ($switch26$i$i$i$i$i) {
       $accum$1$sink$i$ph$i$i$i$i = $884;
       label = 462;
       break;
      }
      $885 = ((($_15$sroa$0$0$in$i$i$i)) + 24|0);
      $886 = ((($_15$sroa$0$0$in$i$i$i)) + 32|0);
      __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h12332f02158c6566E($_78$i$i$i$i$i,$f$i$i$i$i$i,$884,$885);
      $887 = HEAP32[$_78$i$i$i$i$i>>2]|0;
      $888 = HEAP32[$871>>2]|0;
      $switch27$i$i$i$i$i = ($887|0)==(1);
      if ($switch27$i$i$i$i$i) {
       $accum$1$sink$i$ph$i$i$i$i = $888;
       label = 462;
       break;
      } else {
       $_15$sroa$0$0$in$i$i$i = $886;$accum$0$i$i$i$i$i = $888;
      }
     }
     L50: do {
      if ((label|0) == 454) {
       $875 = ((($_102$i$i$i$i$i)) + 4|0);
       $876 = ($_15$sroa$0$0$in$i$i$i|0)==($865|0);
       if (!($876)) {
        $890 = $_15$sroa$0$0$in$i$i$i;$accum$1$i18$i$i$i$i = $accum$0$i$i$i$i$i;
        while(1) {
         $889 = ((($890)) + 8|0);
         __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h12332f02158c6566E($_102$i$i$i$i$i,$f$i$i$i$i$i,$accum$1$i18$i$i$i$i,$890);
         $891 = HEAP32[$_102$i$i$i$i$i>>2]|0;
         $892 = HEAP32[$875>>2]|0;
         $switch28$i$i$i$i$i = ($891|0)==(1);
         if ($switch28$i$i$i$i$i) {
          $accum$1$sink$i$ph$i$i$i$i = $892;
          label = 462;
          break L50;
         }
         $893 = ($889|0)==($865|0);
         if ($893) {
          break;
         } else {
          $890 = $889;$accum$1$i18$i$i$i$i = $892;
         }
        }
       }
       $$sink$i6$i$i$i$i = $_10$sroa$6$0$copyload$i$i;
      }
     } while(0);
     if ((label|0) == 462) {
      $$sink$i6$i$i$i$i = $accum$1$sink$i$ph$i$i$i$i;
     }
     $894 = (($_10$sroa$6$0$copyload$i$i) - ($$sink$i6$i$i$i$i))|0;
     $895 = ($894>>>0)<($_10$sroa$6$0$copyload$i$i>>>0);
     if ($895) {
      $896 = ($894|0)==(0);
      if ($896) {
       $$sink$i1961386$i$i = 0;
      } else {
       HEAP32[$_43$i$i>>2] = 2584;
       $56 = ((($_43$i$i)) + 4|0);
       HEAP32[$56>>2] = 1;
       $_4$sroa$0$0$$sroa_idx$i$i$i = ((($_43$i$i)) + 8|0);
       HEAP32[$_4$sroa$0$0$$sroa_idx$i$i$i>>2] = 0;
       $57 = ((($_43$i$i)) + 16|0);
       HEAP32[$57>>2] = 13564;
       $58 = ((($_43$i$i)) + 20|0);
       HEAP32[$58>>2] = 0;
       FUNCTION_TABLE_viii[$24 & 255]($_40$i$i,$0,$_43$i$i);
       $59 = HEAP32[$_40$i$i>>2]|0;
       $switch23$i$i = ($59|0)==(1);
       if ($switch23$i$i) {
        $err1$sroa$0$0$$sroa_idx$i$i = ((($_40$i$i)) + 4|0);
        $60 = $err1$sroa$0$0$$sroa_idx$i$i;
        $61 = $60;
        $62 = HEAP32[$61>>2]|0;
        $63 = (($60) + 4)|0;
        $64 = $63;
        $65 = HEAP32[$64>>2]|0;
        $66 = $62&255;
        $res$sroa$8$0$i$off0 = $66;$res$sroa$8$0$i$off32 = $65;
        label = 13;
        break L28;
       } else {
        $$sink$i1961386$i$i = $894;
        break;
       }
      }
     } else {
      label = 464;
     }
    }
   } while(0);
   if ((label|0) == 464) {
    $$sink$i1961386$i$i = 0;
   }
   HEAP32[$_61$i$i>>2] = 2592;
   $67 = ((($_61$i$i)) + 4|0);
   HEAP32[$67>>2] = 1;
   $_4$sroa$0$0$$sroa_idx$i135$i$i = ((($_61$i$i)) + 8|0);
   HEAP32[$_4$sroa$0$0$$sroa_idx$i135$i$i>>2] = 0;
   $68 = ((($_61$i$i)) + 16|0);
   HEAP32[$68>>2] = 13564;
   $69 = ((($_61$i$i)) + 20|0);
   HEAP32[$69>>2] = 0;
   FUNCTION_TABLE_viii[$24 & 255]($_58$i$i,$0,$_61$i$i);
   $70 = HEAP32[$_58$i$i>>2]|0;
   $switch24$i$i = ($70|0)==(1);
   if ($switch24$i$i) {
    $err2$sroa$0$0$$sroa_idx$i$i = ((($_58$i$i)) + 4|0);
    $98 = $err2$sroa$0$0$$sroa_idx$i$i;
    $99 = $98;
    $100 = HEAP32[$99>>2]|0;
    $101 = (($98) + 4)|0;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = $100&255;
    $res$sroa$8$0$i$off0 = $104;$res$sroa$8$0$i$off32 = $103;
    label = 13;
    break;
   }
   $71 = (($_10$sroa$6$0$copyload$i$i) - ($$sink$i1961386$i$i))|0;
   $72 = ($71>>>0)>(100);
   if ($72) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($71,100);
    // unreachable;
   }
   $73 = (($frames$i$i) + ($71<<3)|0);
   $74 = ((($arg$i$i$i$i)) + 4|0);
   $75 = $idx$i$i$i$i$i;
   $76 = ((($_62$i$i$i$i$i)) + 4|0);
   $77 = ((($_55$i$i$i$i$i)) + 4|0);
   $_5$sroa$0$0$$sroa_idx$i99$i$i$i$i$i = ((($_55$i$i$i$i$i)) + 8|0);
   $_5$sroa$4$0$$sroa_idx2$i100$i$i$i$i$i = ((($_55$i$i$i$i$i)) + 12|0);
   $78 = ((($_55$i$i$i$i$i)) + 16|0);
   $79 = ((($_55$i$i$i$i$i)) + 20|0);
   $err1$sroa$0$0$$sroa_idx$i$i$i$i$i = ((($_52$i$i$i$i$i)) + 4|0);
   $_2$sroa$0$0$$sroa_idx2$i121$i$i$i$i$i = ((($_105$i$i)) + 4|0);
   $80 = ((($1)) + 20|0);
   $err3$sroa$0$0$$sroa_idx$i$i$i$i$i = ((($_93$i$i$i$i$i)) + 4|0);
   $_4$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 64|0);
   $_4$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 68|0);
   $_4$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 72|0);
   $_4$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 73|0);
   $_4$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 80|0);
   $_110$sroa$5$0$$sroa_idx169$i$i$i$i$i$i = ((($_111$i$i$i$i$i$i)) + 4|0);
   $81 = ((($split$i$i$i$i$i$i)) + 48|0);
   $82 = ((($_113$i$i$i$i$i$i)) + 4|0);
   $83 = ((($_165$i$i$i$i$i$i)) + 4|0);
   $err4$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_223$i$i$i$i$i$i)) + 4|0);
   $err3$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_206$i$i$i$i$i$i)) + 4|0);
   $err5$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_244$i$i$i$i$i$i)) + 4|0);
   $err6$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_266$i$i$i$i$i$i)) + 4|0);
   $err7$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_288$i$i$i$i$i$i)) + 4|0);
   $err8$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_310$i$i$i$i$i$i)) + 4|0);
   $err9$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_332$i$i$i$i$i$i)) + 4|0);
   $err10$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_354$i$i$i$i$i$i)) + 4|0);
   $err11$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_376$i$i$i$i$i$i)) + 4|0);
   $err12$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_398$i$i$i$i$i$i)) + 4|0);
   $err13$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_420$i$i$i$i$i$i)) + 4|0);
   $err14$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_442$i$i$i$i$i$i)) + 4|0);
   $err15$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_464$i$i$i$i$i$i)) + 4|0);
   $err16$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_486$i$i$i$i$i$i)) + 4|0);
   $err17$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_508$i$i$i$i$i$i)) + 4|0);
   $err18$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_530$i$i$i$i$i$i)) + 4|0);
   $err19$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_552$i$i$i$i$i$i)) + 4|0);
   $err20$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_574$i$i$i$i$i$i)) + 4|0);
   $err21$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_596$i$i$i$i$i$i)) + 4|0);
   $err22$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_618$i$i$i$i$i$i)) + 4|0);
   $err23$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_638$i$i$i$i$i$i)) + 4|0);
   $err24$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_661$i$i$i$i$i$i)) + 4|0);
   $err1$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_139$i$i$i$i$i$i)) + 4|0);
   $err$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_92$i$i$i$i$i$i)) + 4|0);
   $84 = $arg$i$i$i$i;
   $85 = ((($tmp_ret6$i$i$i$i$i)) + 4|0);
   $86 = ((($_27$i$i$i$i$i)) + 4|0);
   $87 = ((($_27$i$i$i$i$i)) + 8|0);
   $88 = ((($_27$i$i$i$i$i)) + 12|0);
   $89 = ((($_27$i$i$i$i$i)) + 16|0);
   $90 = ((($_27$i$i$i$i$i)) + 20|0);
   $91 = ((($_20$i$i$i$i$i)) + 4|0);
   $_5$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_20$i$i$i$i$i)) + 8|0);
   $_5$sroa$4$0$$sroa_idx2$i$i$i$i$i$i = ((($_20$i$i$i$i$i)) + 12|0);
   $92 = ((($_20$i$i$i$i$i)) + 16|0);
   $93 = ((($_20$i$i$i$i$i)) + 20|0);
   $err$sroa$0$0$$sroa_idx$i$i$i$i$i = ((($_17$i$i$i$i$i)) + 4|0);
   $94 = ((($info$i$i$i)) + 8|0);
   $95 = ((($_17$i$i$i)) + 4|0);
   $96 = ((($_17$i$i$i)) + 8|0);
   $97 = ($50<<24>>24)==(3);
   $iter$sroa$0$0$iter$sroa$0$0$313358$i$i = $frames$i$i;$iter$sroa$15$0$i$i = 0;
   L74: while(1) {
    $105 = ($iter$sroa$0$0$iter$sroa$0$0$313358$i$i|0)==($73|0);
    if ($105) {
     label = 24;
     break;
    }
    $106 = ((($iter$sroa$0$0$iter$sroa$0$0$313358$i$i)) + 8|0);
    $107 = (($iter$sroa$15$0$i$i) + 1)|0;
    $108 = HEAP32[$iter$sroa$0$0$iter$sroa$0$0$313358$i$i>>2]|0;
    ;HEAP32[$info$i$i$i>>2]=0|0;HEAP32[$info$i$i$i+4>>2]=0|0;HEAP32[$info$i$i$i+8>>2]=0|0;HEAP32[$info$i$i$i+12>>2]=0|0;
    $109 = (_dladdr(($108|0),($info$i$i$i|0))|0);
    $110 = ($109|0)==(0);
    if ($110) {
     $symname$sroa$0$1$i$i$i = 0;$symname$sroa$6$1$i$i$i = 0;
    } else {
     $111 = HEAP32[$94>>2]|0;
     $117 = ($111|0)==(0|0);
     if ($117) {
      $symname$sroa$0$1$i$i$i = 0;$symname$sroa$6$1$i$i$i = 0;
     } else {
      $112 = (_strlen($111)|0);
      $113 = ($112|0)==(-1);
      if ($113) {
       label = 26;
       break;
      }
      __ZN4core3str9from_utf817h350e3a6fdb8dca1aE($_17$i$i$i,$111,$112);
      $114 = HEAP32[$_17$i$i$i>>2]|0;
      $switch$i$i$i$i = ($114|0)==(1);
      $115 = HEAP32[$95>>2]|0;
      $116 = HEAP32[$96>>2]|0;
      $symname$sroa$0$0$i$i$i = $switch$i$i$i$i ? 0 : $115;
      $symname$sroa$0$1$i$i$i = $symname$sroa$0$0$i$i$i;$symname$sroa$6$1$i$i$i = $116;
     }
    }
    $118 = ((($iter$sroa$0$0$iter$sroa$0$0$313358$i$i)) + 4|0);
    $119 = HEAP32[$iter$sroa$0$0$iter$sroa$0$0$313358$i$i>>2]|0;
    $120 = HEAP32[$118>>2]|0;
    $121 = $symname$sroa$0$1$i$i$i;
    HEAP32[$arg$i$i$i$i>>2] = $119;
    HEAP32[$74>>2] = $120;
    HEAP32[$idx$i$i$i$i$i>>2] = $iter$sroa$15$0$i$i;
    do {
     if ($97) {
      $122 = ($119|0)==(0);
      if ($122) {
       HEAP32[$_105$i$i>>2] = 0;
       $_104$i$sroa$0$0$copyload$i = 0;
       break;
      }
      HEAP32[$_62$i$i$i$i$i>>2] = $75;
      HEAP32[$76>>2] = (120);
      HEAP32[$_55$i$i$i$i$i>>2] = 2700;
      HEAP32[$77>>2] = 2;
      HEAP32[$_5$sroa$0$0$$sroa_idx$i99$i$i$i$i$i>>2] = 2716;
      HEAP32[$_5$sroa$4$0$$sroa_idx2$i100$i$i$i$i$i>>2] = 1;
      HEAP32[$78>>2] = $_62$i$i$i$i$i;
      HEAP32[$79>>2] = 1;
      FUNCTION_TABLE_viii[$24 & 255]($_52$i$i$i$i$i,$0,$_55$i$i$i$i$i);
      $126 = HEAP32[$_52$i$i$i$i$i>>2]|0;
      $switch19$i$i$i$i$i = ($126|0)==(1);
      if ($switch19$i$i$i$i$i) {
       $137 = $err1$sroa$0$0$$sroa_idx$i$i$i$i$i;
       $138 = $137;
       $139 = HEAP32[$138>>2]|0;
       $140 = (($137) + 4)|0;
       $141 = $140;
       $142 = HEAP32[$141>>2]|0;
       HEAP32[$_105$i$i>>2] = 1;
       $143 = $_2$sroa$0$0$$sroa_idx2$i121$i$i$i$i$i;
       $144 = $143;
       HEAP32[$144>>2] = $139;
       $145 = (($143) + 4)|0;
       $146 = $145;
       HEAP32[$146>>2] = $142;
       $_104$i$sroa$0$0$copyload$i = 1;
       break;
      } else {
       label = 34;
       break;
      }
     } else {
      __ZN4core3fmt10ArgumentV110from_usize17h002f4bf68d5451d7E($tmp_ret6$i$i$i$i$i,2600);
      $123 = HEAP32[$tmp_ret6$i$i$i$i$i>>2]|0;
      $124 = HEAP32[$85>>2]|0;
      HEAP32[$_27$i$i$i$i$i>>2] = $75;
      HEAP32[$86>>2] = (120);
      HEAP32[$87>>2] = $84;
      HEAP32[$88>>2] = (121);
      HEAP32[$89>>2] = $123;
      HEAP32[$90>>2] = $124;
      HEAP32[$_20$i$i$i$i$i>>2] = 2604;
      HEAP32[$91>>2] = 3;
      HEAP32[$_5$sroa$0$0$$sroa_idx$i$i$i$i$i$i>>2] = 2628;
      HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i$i$i$i$i>>2] = 2;
      HEAP32[$92>>2] = $_27$i$i$i$i$i;
      HEAP32[$93>>2] = 3;
      FUNCTION_TABLE_viii[$24 & 255]($_17$i$i$i$i$i,$0,$_20$i$i$i$i$i);
      $125 = HEAP32[$_17$i$i$i$i$i>>2]|0;
      $switch18$i$i$i$i$i = ($125|0)==(1);
      if ($switch18$i$i$i$i$i) {
       $127 = $err$sroa$0$0$$sroa_idx$i$i$i$i$i;
       $128 = $127;
       $129 = HEAP32[$128>>2]|0;
       $130 = (($127) + 4)|0;
       $131 = $130;
       $132 = HEAP32[$131>>2]|0;
       HEAP32[$_105$i$i>>2] = 1;
       $133 = $_2$sroa$0$0$$sroa_idx2$i121$i$i$i$i$i;
       $134 = $133;
       HEAP32[$134>>2] = $129;
       $135 = (($133) + 4)|0;
       $136 = $135;
       HEAP32[$136>>2] = $132;
       $_104$i$sroa$0$0$copyload$i = 1;
       break;
      } else {
       label = 34;
       break;
      }
     }
    } while(0);
    L94: do {
     if ((label|0) == 34) {
      label = 0;
      $switch17$i$i$i$i$i = ($symname$sroa$0$1$i$i$i|0)==(0);
      do {
       if ($switch17$i$i$i$i$i) {
        $147 = HEAP32[$80>>2]|0;
        FUNCTION_TABLE_viiii[$147 & 255]($_93$i$i$i$i$i,$0,5753,9);
        $148 = HEAP32[$_93$i$i$i$i$i>>2]|0;
        $switch20$i$i$i$i$i = ($148|0)==(1);
        if ($switch20$i$i$i$i$i) {
         $848 = $err3$sroa$0$0$$sroa_idx$i$i$i$i$i;
         $849 = $848;
         $850 = HEAP32[$849>>2]|0;
         $851 = (($848) + 4)|0;
         $852 = $851;
         $853 = HEAP32[$852>>2]|0;
         HEAP32[$_105$i$i>>2] = 1;
         $854 = $_2$sroa$0$0$$sroa_idx2$i121$i$i$i$i$i;
         $855 = $854;
         HEAP32[$855>>2] = $850;
         $856 = (($854) + 4)|0;
         $857 = $856;
         HEAP32[$857>>2] = $853;
         $_104$i$sroa$0$0$copyload$i = 1;
         break L94;
        } else {
         $841 = $147;
         break;
        }
       } else {
        $149 = ($symname$sroa$6$1$i$i$i>>>0)>(4);
        do {
         if ($149) {
          $157 = ((($121)) + 3|0);
          $158 = HEAP8[$157>>0]|0;
          $159 = ($158<<24>>24)>(-65);
          if ($159) {
           $160 = ($121|0)==(5763|0);
           if (!($160)) {
            $161 = (_memcmp(5763,$121,3)|0);
            $162 = ($161|0)==(0);
            if (!($162)) {
             label = 56;
             break;
            }
           }
           $152 = (($symname$sroa$6$1$i$i$i) + -1)|0;
           $153 = ($152|0)==(0);
           if ($153) {
            $$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D = $121;
           } else {
            $154 = (($121) + ($152)|0);
            $155 = HEAP8[$154>>0]|0;
            $156 = ($155<<24>>24)>(-65);
            if ($156) {
             $$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D = $154;
            } else {
             label = 56;
             break;
            }
           }
           $150 = ($$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D|0)==(5762|0);
           if (!($150)) {
            $rhsc$i$i$i$i$i$i$i$i$i = HEAP8[$$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D>>0]|0;
            $151 = ($rhsc$i$i$i$i$i$i$i$i$i<<24>>24)==(69);
            if (!($151)) {
             label = 51;
             break;
            }
           }
           $switch3647$i$i$i$i$i$i = ($symname$sroa$6$1$i$i$i>>>0)<(4);
           if ($switch3647$i$i$i$i$i$i) {
            label = 50;
            break L74;
           }
           $163 = (($121) + ($152)|0);
           $164 = HEAP8[$163>>0]|0;
           $165 = ($164<<24>>24)>(-65);
           if ($165) {
            $$sink2062$i$i$i$i$i$i = 3;$inner$sroa$14$1$in$i$i$i$i$i$i = $152;
            label = 62;
           } else {
            label = 50;
            break L74;
           }
          } else {
           label = 56;
          }
         } else {
          label = 51;
         }
        } while(0);
        if ((label|0) == 51) {
         label = 0;
         $166 = ($symname$sroa$6$1$i$i$i>>>0)>(3);
         if ($166) {
          label = 56;
         } else {
          label = 87;
         }
        }
        do {
         if ((label|0) == 56) {
          label = 0;
          $174 = ((($121)) + 2|0);
          $175 = HEAP8[$174>>0]|0;
          $176 = ($175<<24>>24)>(-65);
          if ($176) {
           $177 = ($121|0)==(5766|0);
           if (!($177)) {
            $178 = (_memcmp(5766,$121,2)|0);
            $179 = ($178|0)==(0);
            if (!($179)) {
             label = 87;
             break;
            }
           }
           $169 = (($symname$sroa$6$1$i$i$i) + -1)|0;
           $170 = ($169|0)==(0);
           if ($170) {
            $$pre$phi$i$ph$i$i$i$i$i824$i$i$i$i$i$iZ2D = $121;
           } else {
            $171 = (($121) + ($169)|0);
            $172 = HEAP8[$171>>0]|0;
            $173 = ($172<<24>>24)>(-65);
            if ($173) {
             $$pre$phi$i$ph$i$i$i$i$i824$i$i$i$i$i$iZ2D = $171;
            } else {
             label = 87;
             break;
            }
           }
           $167 = ($$pre$phi$i$ph$i$i$i$i$i824$i$i$i$i$i$iZ2D|0)==(5762|0);
           if (!($167)) {
            $rhsc$i$i$i826$i$i$i$i$i$i = HEAP8[$$pre$phi$i$ph$i$i$i$i$i824$i$i$i$i$i$iZ2D>>0]|0;
            $168 = ($rhsc$i$i$i826$i$i$i$i$i$i<<24>>24)==(69);
            if (!($168)) {
             label = 87;
             break;
            }
           }
           $switch$i122$i$i$i$i$i = ($symname$sroa$6$1$i$i$i>>>0)<(3);
           if ($switch$i122$i$i$i$i$i) {
            label = 61;
            break L74;
           }
           $180 = (($121) + ($169)|0);
           $181 = HEAP8[$180>>0]|0;
           $182 = ($181<<24>>24)>(-65);
           if ($182) {
            $$sink2062$i$i$i$i$i$i = 2;$inner$sroa$14$1$in$i$i$i$i$i$i = $symname$sroa$6$1$i$i$i;
            label = 62;
           } else {
            label = 61;
            break L74;
           }
          } else {
           label = 87;
          }
         }
        } while(0);
        L130: do {
         if ((label|0) == 62) {
          label = 0;
          $183 = (($121) + ($$sink2062$i$i$i$i$i$i)|0);
          $inner$sroa$14$1$i$i$i$i$i$i = (($inner$sroa$14$1$in$i$i$i$i$i$i) + -3)|0;
          $184 = (($183) + ($inner$sroa$14$1$i$i$i$i$i$i)|0);
          $185 = $183;
          while(1) {
           $186 = ($185|0)==($184|0);
           if ($186) {
            break;
           } else {
            $194 = $185;$i$02677$i$i$i$i$i$i = 0;
           }
           while(1) {
            $191 = ((($194)) + 1|0);
            $188 = HEAP8[$194>>0]|0;
            $200 = ($188<<24>>24)>(-1);
            do {
             if ($200) {
              $187 = $188&255;
              $228 = $191;$_54$sroa$5$2$ph$i$i$i$i$i$i = $187;
             } else {
              $189 = $188 & 31;
              $190 = $189&255;
              $192 = ($191|0)==($184|0);
              if ($192) {
               $201 = $184;$_0$0$i20$i$i$i$i$i$i$i$i$i = 0;
              } else {
               $193 = ((($194)) + 2|0);
               $195 = HEAP8[$191>>0]|0;
               $phitmp$i$i$i$i$i$i$i$i$i = $195 & 63;
               $201 = $193;$_0$0$i20$i$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i$i;
              }
              $196 = $190 << 6;
              $197 = $_0$0$i20$i$i$i$i$i$i$i$i$i&255;
              $198 = $197 | $196;
              $199 = ($188&255)>(223);
              if (!($199)) {
               $228 = $201;$_54$sroa$5$2$ph$i$i$i$i$i$i = $198;
               break;
              }
              $202 = ($201|0)==($184|0);
              if ($202) {
               $211 = $184;$_0$0$i14$i$i$i$i$i$i$i$i$i = 0;
              } else {
               $203 = ((($201)) + 1|0);
               $204 = HEAP8[$201>>0]|0;
               $phitmp26$i$i$i$i$i$i$i$i$i = $204 & 63;
               $211 = $203;$_0$0$i14$i$i$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i$i$i;
              }
              $205 = $197 << 6;
              $206 = $_0$0$i14$i$i$i$i$i$i$i$i$i&255;
              $207 = $206 | $205;
              $208 = $190 << 12;
              $209 = $207 | $208;
              $210 = ($188&255)>(239);
              if (!($210)) {
               $228 = $211;$_54$sroa$5$2$ph$i$i$i$i$i$i = $209;
               break;
              }
              $212 = ($211|0)==($184|0);
              if ($212) {
               $961 = $184;$_0$0$i9$i$i$i$i$i$i$i$i$i = 0;
              } else {
               $213 = ((($211)) + 1|0);
               $214 = HEAP8[$211>>0]|0;
               $phitmp27$i$i$i$i$i$i$i$i$i = $214 & 63;
               $961 = $213;$_0$0$i9$i$i$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i$i$i;
              }
              $215 = $190 << 18;
              $216 = $215 & 1835008;
              $217 = $207 << 6;
              $218 = $_0$0$i9$i$i$i$i$i$i$i$i$i&255;
              $219 = $217 | $216;
              $220 = $219 | $218;
              $228 = $961;$_54$sroa$5$2$ph$i$i$i$i$i$i = $220;
             }
            } while(0);
            $self$off$i$i$i$i$i$i$i = (($_54$sroa$5$2$ph$i$i$i$i$i$i) + -48)|0;
            $221 = ($self$off$i$i$i$i$i$i$i>>>0)<(10);
            if (!($221)) {
             $222 = ($_54$sroa$5$2$ph$i$i$i$i$i$i>>>0)>(127);
             if (!($222)) {
              $$lcssa961$i$i$i$i$i = $228;$i$0$lcssa$i$i$i$i$i$i = $i$02677$i$i$i$i$i$i;
              break;
             }
             $223 = (__ZN11std_unicode6tables16general_category1N17h2b23837ef743c59bE($_54$sroa$5$2$ph$i$i$i$i$i$i)|0);
             if (!($223)) {
              $$lcssa961$i$i$i$i$i = $228;$i$0$lcssa$i$i$i$i$i$i = $i$02677$i$i$i$i$i$i;
              break;
             }
            }
            $225 = ($i$02677$i$i$i$i$i$i*10)|0;
            $226 = (($225) + -48)|0;
            $227 = (($226) + ($_54$sroa$5$2$ph$i$i$i$i$i$i))|0;
            $229 = ($228|0)==($184|0);
            if ($229) {
             $$lcssa961$i$i$i$i$i = $184;$i$0$lcssa$i$i$i$i$i$i = $227;
             break;
            } else {
             $194 = $228;$i$02677$i$i$i$i$i$i = $227;
            }
           }
           $224 = ($i$0$lcssa$i$i$i$i$i$i|0)==(0);
           if ($224) {
            label = 80;
            break;
           }
           $231 = (($i$0$lcssa$i$i$i$i$i$i) + -1)|0;
           $232 = ($231|0)==(0);
           L157: do {
            if ($232) {
             $962 = $$lcssa961$i$i$i$i$i;$_0$sroa$0$0$i$i$i$i$i$i$i$i$i = 0;
            } else {
             $233 = $$lcssa961$i$i$i$i$i;$247 = $231;$accum$0$i$i$i$i$i$i$i$i$i$i = 0;
             while(1) {
              $234 = ($233|0)==($184|0);
              if ($234) {
               $962 = $184;$_0$sroa$0$0$i$i$i$i$i$i$i$i$i = $accum$0$i$i$i$i$i$i$i$i$i$i;
               break L157;
              }
              $243 = ((($233)) + 1|0);
              $236 = HEAP8[$233>>0]|0;
              $244 = ($236<<24>>24)>(-1);
              $245 = ($243|0)==($184|0);
              $or$cond$i$i$i$i$i$i$i$i$i = $245 | $244;
              if ($or$cond$i$i$i$i$i$i$i$i$i) {
               $963 = $243;
              } else {
               $235 = ((($233)) + 2|0);
               $237 = ($236&255)<(224);
               $238 = ($235|0)==($184|0);
               $or$cond18$i$i$i$i$i$i$i$i$i$i = $238 | $237;
               $239 = ((($233)) + 3|0);
               $240 = ($236&255)<(240);
               $241 = ($239|0)==($184|0);
               $or$cond$i$i$i$i878$i$i$i$i$i$i = $241 | $240;
               $242 = ((($233)) + 4|0);
               $$$i$i$i$i$i$i = $or$cond$i$i$i$i878$i$i$i$i$i$i ? $239 : $242;
               $$$$i$i$i$i$i$i = $or$cond18$i$i$i$i$i$i$i$i$i$i ? $235 : $$$i$i$i$i$i$i;
               $963 = $$$$i$i$i$i$i$i;
              }
              $246 = (($247) + -1)|0;
              $248 = (($accum$0$i$i$i$i$i$i$i$i$i$i) + 1)|0;
              $249 = ($246|0)==(0);
              if ($249) {
               $962 = $963;$_0$sroa$0$0$i$i$i$i$i$i$i$i$i = $248;
               break;
              } else {
               $233 = $963;$247 = $246;$accum$0$i$i$i$i$i$i$i$i$i$i = $248;
              }
             }
            }
           } while(0);
           $250 = ($_0$sroa$0$0$i$i$i$i$i$i$i$i$i|0)==($231|0);
           if ($250) {
            $185 = $962;
           } else {
            label = 87;
            break L130;
           }
          }
          if ((label|0) == 80) {
           label = 0;
           $230 = ($$lcssa961$i$i$i$i$i|0)==($184|0);
           if (!($230)) {
            label = 87;
            break;
           }
          }
          if ($97) {
           __ZN4core3str7pattern11StrSearcher3new17h608fb1447ba385b9E($split$i$i$i$i$i$i,$183,$inner$sroa$14$1$i$i$i$i$i$i,5768,3);
           HEAP32[$_4$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i>>2] = 0;
           HEAP32[$_4$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i>>2] = $inner$sroa$14$1$i$i$i$i$i$i;
           HEAP8[$_4$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i>>0] = 1;
           HEAP8[$_4$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i>>0] = 0;
           HEAP32[$_4$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2] = 1;
           __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h7c3856816e7fdc25E($_111$i$i$i$i$i$i,$split$i$i$i$i$i$i);
           $259 = HEAP32[$_4$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2]|0;
           L170: do {
            switch ($259|0) {
            case 0:  {
             HEAP32[$_113$i$i$i$i$i$i>>2] = 0;
             break;
            }
            case 1:  {
             HEAP32[$_4$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2] = 0;
             $260 = HEAP8[$_4$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i>>0]|0;
             $261 = ($260<<24>>24)==(0);
             do {
              if ($261) {
               $262 = HEAP8[$_4$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i>>0]|0;
               $263 = ($262<<24>>24)==(0);
               if ($263) {
                $264 = HEAP32[$_4$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i>>2]|0;
                $265 = HEAP32[$_4$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i>>2]|0;
                $not$$i$i$i904$i$i$i$i$i$i = ($264|0)==($265|0);
                if ($not$$i$i$i904$i$i$i$i$i$i) {
                 break;
                } else {
                 $268 = $265;$270 = $264;
                }
               } else {
                $$pre$i$i$i900$i$i$i$i$i$i = HEAP32[$_4$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i>>2]|0;
                $$pre5$i$i$i902$i$i$i$i$i$i = HEAP32[$_4$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i>>2]|0;
                $268 = $$pre$i$i$i900$i$i$i$i$i$i;$270 = $$pre5$i$i$i902$i$i$i$i$i$i;
               }
               HEAP8[$_4$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i>>0] = 1;
               $266 = HEAP32[$81>>2]|0;
               $267 = (($266) + ($268)|0);
               $269 = (($270) - ($268))|0;
               HEAP32[$_113$i$i$i$i$i$i>>2] = $267;
               HEAP32[$82>>2] = $269;
               break L170;
              }
             } while(0);
             HEAP32[$_113$i$i$i$i$i$i>>2] = 0;
             break;
            }
            default: {
             $271 = (($259) + -1)|0;
             HEAP32[$_4$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2] = $271;
             __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h7c3856816e7fdc25E($_113$i$i$i$i$i$i,$split$i$i$i$i$i$i);
            }
            }
           } while(0);
           $_110$sroa$0$0$copyload$i$i$i$i$i$i = HEAP32[$_111$i$i$i$i$i$i>>2]|0;
           $_110$sroa$5$0$copyload$i$i$i$i$i$i = HEAP32[$_110$sroa$5$0$$sroa_idx169$i$i$i$i$i$i>>2]|0;
           $272 = $_113$i$i$i$i$i$i;
           $273 = $272;
           $274 = HEAP32[$273>>2]|0;
           $275 = (($272) + 4)|0;
           $276 = $275;
           $277 = HEAP32[$276>>2]|0;
           $278 = ($_110$sroa$0$0$copyload$i$i$i$i$i$i|0)==(0|0);
           L182: do {
            if ($278) {
             $inner$sroa$0$2$i$i$i$i$i$i = $183;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
            } else {
             $280 = ($_110$sroa$5$0$copyload$i$i$i$i$i$i|0)==(16);
             if ($280) {
              $$idx$i$i$i$i$i$i = 0;
             } else {
              $inner$sroa$0$2$i$i$i$i$i$i = $183;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
              break;
             }
             while(1) {
              $281 = ($$idx$i$i$i$i$i$i|0)==(16);
              if ($281) {
               break;
              }
              $$ptr3227$i$i$i$i$i$i = (($_110$sroa$0$0$copyload$i$i$i$i$i$i) + ($$idx$i$i$i$i$i$i)|0);
              $$add$i$i$i$i$i$i = (($$idx$i$i$i$i$i$i) + 1)|0;
              $$ptr3232$i$i$i$i$i$i = (($_110$sroa$0$0$copyload$i$i$i$i$i$i) + ($$add$i$i$i$i$i$i)|0);
              $283 = HEAP8[$$ptr3227$i$i$i$i$i$i>>0]|0;
              $292 = ($283<<24>>24)>(-1);
              do {
               if ($292) {
                $282 = $283&255;
                $$idx3220$i$i$i$i$i$i = $$add$i$i$i$i$i$i;$_8$sroa$6$1$ph$i$i$i$i$i$i$i$i = $282;
               } else {
                $284 = $283 & 31;
                $285 = $284&255;
                $286 = ($$add$i$i$i$i$i$i|0)==(16);
                if ($286) {
                 $$idx3221$i$i$i$i$i$i = 16;$_0$0$i20$i$i$i$i$i$i$i$i$i$i = 0;
                } else {
                 $$add3226$i$i$i$i$i$i = (($$idx$i$i$i$i$i$i) + 2)|0;
                 $287 = HEAP8[$$ptr3232$i$i$i$i$i$i>>0]|0;
                 $phitmp$i$i$i$i$i$i$i$i$i$i = $287 & 63;
                 $$idx3221$i$i$i$i$i$i = $$add3226$i$i$i$i$i$i;$_0$0$i20$i$i$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i$i$i;
                }
                $$ptr3229$i$i$i$i$i$i = (($_110$sroa$0$0$copyload$i$i$i$i$i$i) + ($$idx3221$i$i$i$i$i$i)|0);
                $288 = $285 << 6;
                $289 = $_0$0$i20$i$i$i$i$i$i$i$i$i$i&255;
                $290 = $289 | $288;
                $291 = ($283&255)>(223);
                if (!($291)) {
                 $$idx3220$i$i$i$i$i$i = $$idx3221$i$i$i$i$i$i;$_8$sroa$6$1$ph$i$i$i$i$i$i$i$i = $290;
                 break;
                }
                $293 = ($$idx3221$i$i$i$i$i$i|0)==(16);
                if ($293) {
                 $$idx3222$i$i$i$i$i$i = 16;$_0$0$i14$i$i$i$i$i$i$i$i$i$i = 0;
                } else {
                 $$add3225$i$i$i$i$i$i = (($$idx3221$i$i$i$i$i$i) + 1)|0;
                 $294 = HEAP8[$$ptr3229$i$i$i$i$i$i>>0]|0;
                 $phitmp26$i$i$i$i$i$i$i$i$i$i = $294 & 63;
                 $$idx3222$i$i$i$i$i$i = $$add3225$i$i$i$i$i$i;$_0$0$i14$i$i$i$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i$i$i$i;
                }
                $$ptr3230$i$i$i$i$i$i = (($_110$sroa$0$0$copyload$i$i$i$i$i$i) + ($$idx3222$i$i$i$i$i$i)|0);
                $295 = $289 << 6;
                $296 = $_0$0$i14$i$i$i$i$i$i$i$i$i$i&255;
                $297 = $296 | $295;
                $298 = $285 << 12;
                $299 = $297 | $298;
                $300 = ($283&255)>(239);
                if (!($300)) {
                 $$idx3220$i$i$i$i$i$i = $$idx3222$i$i$i$i$i$i;$_8$sroa$6$1$ph$i$i$i$i$i$i$i$i = $299;
                 break;
                }
                $301 = ($$idx3222$i$i$i$i$i$i|0)==(16);
                if ($301) {
                 $$idx3223$i$i$i$i$i$i = 16;$_0$0$i9$i$i$i$i$i$i$i$i$i$i = 0;
                } else {
                 $$add3224$i$i$i$i$i$i = (($$idx3222$i$i$i$i$i$i) + 1)|0;
                 $302 = HEAP8[$$ptr3230$i$i$i$i$i$i>>0]|0;
                 $phitmp27$i$i$i$i$i$i$i$i$i$i = $302 & 63;
                 $$idx3223$i$i$i$i$i$i = $$add3224$i$i$i$i$i$i;$_0$0$i9$i$i$i$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i$i$i$i;
                }
                $303 = $285 << 18;
                $304 = $303 & 1835008;
                $305 = $297 << 6;
                $306 = $_0$0$i9$i$i$i$i$i$i$i$i$i$i&255;
                $307 = $305 | $304;
                $308 = $307 | $306;
                $$idx3220$i$i$i$i$i$i = $$idx3223$i$i$i$i$i$i;$_8$sroa$6$1$ph$i$i$i$i$i$i$i$i = $308;
               }
              } while(0);
              $self$off$i$i$i$i$i$i$i$i$i$i$i$i$i = (($_8$sroa$6$1$ph$i$i$i$i$i$i$i$i) + -48)|0;
              $309 = ($self$off$i$i$i$i$i$i$i$i$i$i$i$i$i>>>0)<(10);
              do {
               if ($309) {
                $$sink$i$i$i$i$i$i$i$i$i$i$i$i$i = -48;
               } else {
                $self$off1$i$i$i$i$i$i$i$i$i$i$i$i$i = (($_8$sroa$6$1$ph$i$i$i$i$i$i$i$i) + -97)|0;
                $310 = ($self$off1$i$i$i$i$i$i$i$i$i$i$i$i$i>>>0)<(26);
                if ($310) {
                 $$sink$i$i$i$i$i$i$i$i$i$i$i$i$i = -87;
                 break;
                }
                $self$off2$i$i$i$i$i$i$i$i$i$i$i$i$i = (($_8$sroa$6$1$ph$i$i$i$i$i$i$i$i) + -65)|0;
                $311 = ($self$off2$i$i$i$i$i$i$i$i$i$i$i$i$i>>>0)<(26);
                if ($311) {
                 $$sink$i$i$i$i$i$i$i$i$i$i$i$i$i = -55;
                } else {
                 $inner$sroa$0$2$i$i$i$i$i$i = $183;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
                 break L182;
                }
               }
              } while(0);
              $312 = (($$sink$i$i$i$i$i$i$i$i$i$i$i$i$i) + ($_8$sroa$6$1$ph$i$i$i$i$i$i$i$i))|0;
              $phitmp$i$i$i918$i$i$i$i$i$i = ($312>>>0)>(15);
              if ($phitmp$i$i$i918$i$i$i$i$i$i) {
               $inner$sroa$0$2$i$i$i$i$i$i = $183;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
               break L182;
              } else {
               $$idx$i$i$i$i$i$i = $$idx3220$i$i$i$i$i$i;
              }
             }
             $313 = $274;
             $switch$i931$i$i$i$i$i$i = ($274|0)==(0);
             $def$ptr$sink$i$i$i$i$i$i$i = $switch$i931$i$i$i$i$i$i ? 14140 : $313;
             $def$meta$sink$i$i$i$i$i$i$i = $switch$i931$i$i$i$i$i$i ? 0 : $277;
             $inner$sroa$0$2$i$i$i$i$i$i = $def$ptr$sink$i$i$i$i$i$i$i;$inner$sroa$14$2$i$i$i$i$i$i = $def$meta$sink$i$i$i$i$i$i$i;
            }
           } while(0);
           $inner$sroa$0$5$ph$i$i$i$i$i$i = $inner$sroa$0$2$i$i$i$i$i$i;$inner$sroa$14$5$ph$i$i$i$i$i$i = $inner$sroa$14$2$i$i$i$i$i$i;
          } else {
           $inner$sroa$0$5$ph$i$i$i$i$i$i = $183;$inner$sroa$14$5$ph$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
          }
          $279 = ($inner$sroa$14$5$ph$i$i$i$i$i$i|0)==(0);
          if ($279) {
           label = 443;
          } else {
           $first$0$off02674$i$i$i$i$i$i = 1;$inner$sroa$0$52676$i$i$i$i$i$i = $inner$sroa$0$5$ph$i$i$i$i$i$i;$inner$sroa$14$52675$i$i$i$i$i$i = $inner$sroa$14$5$ph$i$i$i$i$i$i;
           L209: while(1) {
            if (!($first$0$off02674$i$i$i$i$i$i)) {
             $314 = HEAP32[$80>>2]|0;
             FUNCTION_TABLE_viiii[$314 & 255]($_139$i$i$i$i$i$i,$0,5771,2);
             $315 = HEAP32[$_139$i$i$i$i$i$i>>2]|0;
             $switch105$i$i$i$i$i$i = ($315|0)==(1);
             if ($switch105$i$i$i$i$i$i) {
              label = 124;
              break;
             }
            }
            $322 = (($inner$sroa$0$52676$i$i$i$i$i$i) + ($inner$sroa$14$52675$i$i$i$i$i$i)|0);
            $$pre$i$i$i$i$i = HEAP8[$inner$sroa$0$52676$i$i$i$i$i$i>>0]|0;
            $$sink1022586$i$i$i$i$i$i = $inner$sroa$0$52676$i$i$i$i$i$i;$$sink2587$i$i$i$i$i$i = $inner$sroa$14$52675$i$i$i$i$i$i;$324 = $$pre$i$i$i$i$i;$338 = $322;
            while(1) {
             $330 = ((($$sink1022586$i$i$i$i$i$i)) + 1|0);
             $335 = ($324<<24>>24)>(-1);
             do {
              if ($335) {
               $323 = $324&255;
               $_156$sroa$4$2$ph$i$i$i$i$i$i = $323;
              } else {
               $325 = $324 & 31;
               $326 = $325&255;
               $327 = ($$sink2587$i$i$i$i$i$i|0)==(1);
               if ($327) {
                $336 = $338;$_0$0$i20$i$i952$i$i$i$i$i$i = 0;
               } else {
                $328 = ((($$sink1022586$i$i$i$i$i$i)) + 2|0);
                $329 = HEAP8[$330>>0]|0;
                $phitmp$i$i950$i$i$i$i$i$i = $329 & 63;
                $336 = $328;$_0$0$i20$i$i952$i$i$i$i$i$i = $phitmp$i$i950$i$i$i$i$i$i;
               }
               $331 = $326 << 6;
               $332 = $_0$0$i20$i$i952$i$i$i$i$i$i&255;
               $333 = $332 | $331;
               $334 = ($324&255)>(223);
               if (!($334)) {
                $_156$sroa$4$2$ph$i$i$i$i$i$i = $333;
                break;
               }
               $337 = ($336|0)==($338|0);
               if ($337) {
                $347 = $338;$_0$0$i14$i$i958$i$i$i$i$i$i = 0;
               } else {
                $339 = ((($336)) + 1|0);
                $340 = HEAP8[$336>>0]|0;
                $phitmp26$i$i956$i$i$i$i$i$i = $340 & 63;
                $347 = $339;$_0$0$i14$i$i958$i$i$i$i$i$i = $phitmp26$i$i956$i$i$i$i$i$i;
               }
               $341 = $332 << 6;
               $342 = $_0$0$i14$i$i958$i$i$i$i$i$i&255;
               $343 = $342 | $341;
               $344 = $326 << 12;
               $345 = $343 | $344;
               $346 = ($324&255)>(239);
               if (!($346)) {
                $_156$sroa$4$2$ph$i$i$i$i$i$i = $345;
                break;
               }
               $348 = ($347|0)==($338|0);
               if ($348) {
                $_0$0$i9$i$i963$i$i$i$i$i$i = 0;
               } else {
                $349 = HEAP8[$347>>0]|0;
                $phitmp27$i$i961$i$i$i$i$i$i = $349 & 63;
                $_0$0$i9$i$i963$i$i$i$i$i$i = $phitmp27$i$i961$i$i$i$i$i$i;
               }
               $350 = $326 << 18;
               $351 = $350 & 1835008;
               $352 = $343 << 6;
               $353 = $_0$0$i9$i$i963$i$i$i$i$i$i&255;
               $354 = $352 | $351;
               $355 = $354 | $353;
               $_156$sroa$4$2$ph$i$i$i$i$i$i = $355;
              }
             } while(0);
             $self$off$i971$i$i$i$i$i$i = (($_156$sroa$4$2$ph$i$i$i$i$i$i) + -48)|0;
             $356 = ($self$off$i971$i$i$i$i$i$i>>>0)<(10);
             if (!($356)) {
              $357 = ($_156$sroa$4$2$ph$i$i$i$i$i$i>>>0)>(127);
              if (!($357)) {
               break;
              }
              $358 = (__ZN11std_unicode6tables16general_category1N17h2b23837ef743c59bE($_156$sroa$4$2$ph$i$i$i$i$i$i)|0);
              if (!($358)) {
               break;
              }
             }
             switch ($$sink2587$i$i$i$i$i$i|0) {
             case 1:  {
              label = 137;
              break L74;
              break;
             }
             case 0:  {
              $$sink2587$lcssa2737$i$i$i$i$i$i = 0;
              label = 159;
              break L74;
              break;
             }
             default: {
             }
             }
             $384 = HEAP8[$330>>0]|0;
             $385 = ($384<<24>>24)>(-65);
             if (!($385)) {
              $$sink2587$lcssa2737$i$i$i$i$i$i = $$sink2587$i$i$i$i$i$i;
              label = 159;
              break L74;
             }
             $386 = (($$sink2587$i$i$i$i$i$i) + -1)|0;
             $387 = (($330) + ($386)|0);
             $388 = ($386|0)==(0);
             if ($388) {
              label = 137;
              break L74;
             } else {
              $$sink1022586$i$i$i$i$i$i = $330;$$sink2587$i$i$i$i$i$i = $386;$324 = $384;$338 = $387;
             }
            }
            $359 = (($inner$sroa$14$52675$i$i$i$i$i$i) - ($$sink2587$i$i$i$i$i$i))|0;
            $360 = ($359|0)==(0);
            $361 = ($$sink2587$i$i$i$i$i$i|0)==(0);
            $or$cond$i$i$i$i976$i$i$i$i$i$i = $361 | $360;
            if (!($or$cond$i$i$i$i976$i$i$i$i$i$i)) {
             $362 = ($inner$sroa$14$52675$i$i$i$i$i$i>>>0)>($359>>>0);
             if (!($362)) {
              label = 144;
              break L74;
             }
             $363 = (($inner$sroa$0$52676$i$i$i$i$i$i) + ($359)|0);
             $364 = HEAP8[$363>>0]|0;
             $365 = ($364<<24>>24)>(-65);
             if (!($365)) {
              label = 144;
              break L74;
             }
            }
            __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17ha5133f801bd4021cE($_165$i$i$i$i$i$i,$inner$sroa$0$52676$i$i$i$i$i$i,$359);
            $366 = HEAP8[$_165$i$i$i$i$i$i>>0]|0;
            $switch$i982$i$i$i$i$i$i = ($366<<24>>24)==(1);
            if ($switch$i982$i$i$i$i$i$i) {
             label = 146;
             break L74;
            }
            $368 = HEAP32[$83>>2]|0;
            $369 = ($368|0)==(0);
            $370 = ($$sink2587$i$i$i$i$i$i|0)==($368|0);
            $or$cond$i$i$i$i984$i$i$i$i$i$i = $369 | $370;
            if ($or$cond$i$i$i$i984$i$i$i$i$i$i) {
             $$pre$i$i$i985$i$i$i$i$i$i = (($$sink1022586$i$i$i$i$i$i) + ($368)|0);
             $$pre$phi$i$ph$i$i2021$i$i$i$i$i$iZ2D = $$pre$i$i$i985$i$i$i$i$i$i;
            } else {
             $371 = ($$sink2587$i$i$i$i$i$i>>>0)>($368>>>0);
             if (!($371)) {
              label = 151;
              break L74;
             }
             $372 = (($$sink1022586$i$i$i$i$i$i) + ($368)|0);
             $373 = HEAP8[$372>>0]|0;
             $374 = ($373<<24>>24)>(-65);
             if ($374) {
              $$pre$phi$i$ph$i$i2021$i$i$i$i$i$iZ2D = $372;
             } else {
              label = 151;
              break L74;
             }
            }
            $375 = (($$sink2587$i$i$i$i$i$i) - ($368))|0;
            $376 = ($368|0)==(2);
            do {
             if ($376) {
              label = 155;
             } else {
              $377 = ($368>>>0)>(2);
              if ($377) {
               $378 = ((($$sink1022586$i$i$i$i$i$i)) + 2|0);
               $379 = HEAP8[$378>>0]|0;
               $380 = ($379<<24>>24)>(-65);
               if ($380) {
                label = 155;
                break;
               } else {
                $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = $$sink1022586$i$i$i$i$i$i;$rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = $368;
                label = 164;
                break;
               }
              } else {
               if ($369) {
                break;
               } else {
                $rest2$sroa$0$02596$i$i$i$i$i$i = $$sink1022586$i$i$i$i$i$i;$rest2$sroa$80$02633$i$i$i$i$i$i = 1;
                label = 166;
                break;
               }
              }
             }
            } while(0);
            do {
             if ((label|0) == 155) {
              label = 0;
              $381 = ($$sink1022586$i$i$i$i$i$i|0)==(5773|0);
              if (!($381)) {
               $382 = (_memcmp(5773,$$sink1022586$i$i$i$i$i$i,2)|0);
               $383 = ($382|0)==(0);
               if (!($383)) {
                $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = $$sink1022586$i$i$i$i$i$i;$rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = $368;
                label = 164;
                break;
               }
              }
              $389 = HEAP8[$330>>0]|0;
              $390 = ($389<<24>>24)>(-65);
              if (!($390)) {
               label = 162;
               break L74;
              }
              $391 = (($368) + -1)|0;
              $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = $330;$rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = $391;
              label = 164;
             }
            } while(0);
            if ((label|0) == 164) {
             label = 0;
             $rest2$sroa$0$02596$i$i$i$i$i$i = $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i;$rest2$sroa$80$02633$i$i$i$i$i$i = $rest2$sroa$80$0$ph$ph$i$i$i$i$i$i;
             label = 166;
            }
            L262: do {
             if ((label|0) == 166) {
              L263: while(1) {
               label = 0;
               $392 = ($rest2$sroa$80$02633$i$i$i$i$i$i|0)==(1);
               if ($392) {
                label = 168;
               } else {
                $393 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 1|0);
                $394 = HEAP8[$393>>0]|0;
                $395 = ($394<<24>>24)>(-65);
                if ($395) {
                 label = 168;
                } else {
                 label = 204;
                }
               }
               L267: do {
                if ((label|0) == 168) {
                 label = 0;
                 $396 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5775|0);
                 do {
                  if (!($396)) {
                   $rhsc2061$i$i$i$i$i$i = HEAP8[$rest2$sroa$0$02596$i$i$i$i$i$i>>0]|0;
                   $397 = ($rhsc2061$i$i$i$i$i$i<<24>>24)==(46);
                   if ($397) {
                    break;
                   }
                   if (!($392)) {
                    $$phi$trans$insert$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 1|0);
                    $$pre$i$i$i$i$i$i = HEAP8[$$phi$trans$insert$i$i$i$i$i$i>>0]|0;
                    $431 = ($$pre$i$i$i$i$i$i<<24>>24)>(-65);
                    if (!($431)) {
                     label = 204;
                     break L267;
                    }
                   }
                   $432 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5776|0);
                   $433 = ($rhsc2061$i$i$i$i$i$i<<24>>24)==(36);
                   $or$cond$i$i$i$i$i = $432 | $433;
                   if (!($or$cond$i$i$i$i$i)) {
                    label = 204;
                    break L267;
                   }
                   $456 = ($rest2$sroa$80$02633$i$i$i$i$i$i|0)==(4);
                   do {
                    if ($456) {
                     label = 202;
                    } else {
                     $457 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(4);
                     if ($457) {
                      $458 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                      $459 = HEAP8[$458>>0]|0;
                      $460 = ($459<<24>>24)>(-65);
                      if ($460) {
                       label = 202;
                       break;
                      } else {
                       label = 280;
                       break;
                      }
                     } else {
                      $600 = ($rest2$sroa$80$02633$i$i$i$i$i$i|0)==(3);
                      if ($600) {
                       $967 = 1;
                       label = 281;
                       break;
                      } else {
                       break L263;
                      }
                     }
                    }
                   } while(0);
                   L281: do {
                    if ((label|0) == 202) {
                     label = 0;
                     $461 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5777|0);
                     do {
                      if (!($461)) {
                       $462 = (_memcmp(5777,$rest2$sroa$0$02596$i$i$i$i$i$i,4)|0);
                       $463 = ($462|0)==(0);
                       if ($463) {
                        break;
                       }
                       if (!($456)) {
                        $$phi$trans$insert3174$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                        $$pre3175$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3174$i$i$i$i$i$i>>0]|0;
                        $510 = ($$pre3175$i$i$i$i$i$i<<24>>24)>(-65);
                        if (!($510)) {
                         label = 280;
                         break L281;
                        }
                       }
                       $511 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5782|0);
                       do {
                        if (!($511)) {
                         $512 = (_memcmp(5782,$rest2$sroa$0$02596$i$i$i$i$i$i,4)|0);
                         $513 = ($512|0)==(0);
                         if ($513) {
                          break;
                         }
                         if (!($456)) {
                          $$phi$trans$insert3176$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                          $$pre3177$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3176$i$i$i$i$i$i>>0]|0;
                          $525 = ($$pre3177$i$i$i$i$i$i<<24>>24)>(-65);
                          if (!($525)) {
                           label = 280;
                           break L281;
                          }
                         }
                         $526 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5787|0);
                         do {
                          if (!($526)) {
                           $527 = (_memcmp(5787,$rest2$sroa$0$02596$i$i$i$i$i$i,4)|0);
                           $528 = ($527|0)==(0);
                           if ($528) {
                            break;
                           }
                           if (!($456)) {
                            $$phi$trans$insert3178$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                            $$pre3179$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3178$i$i$i$i$i$i>>0]|0;
                            $540 = ($$pre3179$i$i$i$i$i$i<<24>>24)>(-65);
                            if (!($540)) {
                             label = 280;
                             break L281;
                            }
                           }
                           $541 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5792|0);
                           do {
                            if (!($541)) {
                             $542 = (_memcmp(5792,$rest2$sroa$0$02596$i$i$i$i$i$i,4)|0);
                             $543 = ($542|0)==(0);
                             if ($543) {
                              break;
                             }
                             if (!($456)) {
                              $$phi$trans$insert3180$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                              $$pre3181$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3180$i$i$i$i$i$i>>0]|0;
                              $555 = ($$pre3181$i$i$i$i$i$i<<24>>24)>(-65);
                              if (!($555)) {
                               label = 280;
                               break L281;
                              }
                             }
                             $556 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5797|0);
                             do {
                              if (!($556)) {
                               $557 = (_memcmp(5797,$rest2$sroa$0$02596$i$i$i$i$i$i,4)|0);
                               $558 = ($557|0)==(0);
                               if ($558) {
                                break;
                               }
                               if (!($456)) {
                                $$phi$trans$insert3182$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                                $$pre3183$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3182$i$i$i$i$i$i>>0]|0;
                                $570 = ($$pre3183$i$i$i$i$i$i<<24>>24)>(-65);
                                if (!($570)) {
                                 label = 280;
                                 break L281;
                                }
                               }
                               $571 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5802|0);
                               do {
                                if (!($571)) {
                                 $572 = (_memcmp(5802,$rest2$sroa$0$02596$i$i$i$i$i$i,4)|0);
                                 $573 = ($572|0)==(0);
                                 if ($573) {
                                  break;
                                 }
                                 if (!($456)) {
                                  $$phi$trans$insert3184$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                                  $$pre3185$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3184$i$i$i$i$i$i>>0]|0;
                                  $585 = ($$pre3185$i$i$i$i$i$i<<24>>24)>(-65);
                                  if (!($585)) {
                                   label = 280;
                                   break L281;
                                  }
                                 }
                                 $586 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5807|0);
                                 if (!($586)) {
                                  $587 = (_memcmp(5807,$rest2$sroa$0$02596$i$i$i$i$i$i,4)|0);
                                  $588 = ($587|0)==(0);
                                  if (!($588)) {
                                   label = 280;
                                   break L281;
                                  }
                                 }
                                 $598 = HEAP32[$80>>2]|0;
                                 FUNCTION_TABLE_viiii[$598 & 255]($_376$i$i$i$i$i$i,$0,5811,1);
                                 $599 = HEAP32[$_376$i$i$i$i$i$i>>2]|0;
                                 $switch119$i$i$i$i$i$i = ($599|0)==(1);
                                 if ($switch119$i$i$i$i$i$i) {
                                  label = 287;
                                  break L209;
                                 }
                                 $$pre$i$i$i1318$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                                 if (!($456)) {
                                  $607 = HEAP8[$$pre$i$i$i1318$i$i$i$i$i$i>>0]|0;
                                  $608 = ($607<<24>>24)>(-65);
                                  if (!($608)) {
                                   label = 285;
                                   break L74;
                                  }
                                 }
                                 $609 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -4)|0;
                                 $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1318$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $609;
                                 break L267;
                                }
                               } while(0);
                               $583 = HEAP32[$80>>2]|0;
                               FUNCTION_TABLE_viiii[$583 & 255]($_354$i$i$i$i$i$i,$0,5806,1);
                               $584 = HEAP32[$_354$i$i$i$i$i$i>>2]|0;
                               $switch118$i$i$i$i$i$i = ($584|0)==(1);
                               if ($switch118$i$i$i$i$i$i) {
                                label = 277;
                                break L209;
                               }
                               $$pre$i$i$i1289$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                               if (!($456)) {
                                $589 = HEAP8[$$pre$i$i$i1289$i$i$i$i$i$i>>0]|0;
                                $590 = ($589<<24>>24)>(-65);
                                if (!($590)) {
                                 label = 275;
                                 break L74;
                                }
                               }
                               $591 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -4)|0;
                               $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1289$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $591;
                               break L267;
                              }
                             } while(0);
                             $568 = HEAP32[$80>>2]|0;
                             FUNCTION_TABLE_viiii[$568 & 255]($_332$i$i$i$i$i$i,$0,5801,1);
                             $569 = HEAP32[$_332$i$i$i$i$i$i>>2]|0;
                             $switch117$i$i$i$i$i$i = ($569|0)==(1);
                             if ($switch117$i$i$i$i$i$i) {
                              label = 267;
                              break L209;
                             }
                             $$pre$i$i$i1260$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                             if (!($456)) {
                              $574 = HEAP8[$$pre$i$i$i1260$i$i$i$i$i$i>>0]|0;
                              $575 = ($574<<24>>24)>(-65);
                              if (!($575)) {
                               label = 265;
                               break L74;
                              }
                             }
                             $576 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -4)|0;
                             $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1260$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $576;
                             break L267;
                            }
                           } while(0);
                           $553 = HEAP32[$80>>2]|0;
                           FUNCTION_TABLE_viiii[$553 & 255]($_310$i$i$i$i$i$i,$0,5796,1);
                           $554 = HEAP32[$_310$i$i$i$i$i$i>>2]|0;
                           $switch116$i$i$i$i$i$i = ($554|0)==(1);
                           if ($switch116$i$i$i$i$i$i) {
                            label = 257;
                            break L209;
                           }
                           $$pre$i$i$i1231$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                           if (!($456)) {
                            $559 = HEAP8[$$pre$i$i$i1231$i$i$i$i$i$i>>0]|0;
                            $560 = ($559<<24>>24)>(-65);
                            if (!($560)) {
                             label = 255;
                             break L74;
                            }
                           }
                           $561 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -4)|0;
                           $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1231$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $561;
                           break L267;
                          }
                         } while(0);
                         $538 = HEAP32[$80>>2]|0;
                         FUNCTION_TABLE_viiii[$538 & 255]($_288$i$i$i$i$i$i,$0,5791,1);
                         $539 = HEAP32[$_288$i$i$i$i$i$i>>2]|0;
                         $switch115$i$i$i$i$i$i = ($539|0)==(1);
                         if ($switch115$i$i$i$i$i$i) {
                          label = 247;
                          break L209;
                         }
                         $$pre$i$i$i1202$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                         if (!($456)) {
                          $544 = HEAP8[$$pre$i$i$i1202$i$i$i$i$i$i>>0]|0;
                          $545 = ($544<<24>>24)>(-65);
                          if (!($545)) {
                           label = 245;
                           break L74;
                          }
                         }
                         $546 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -4)|0;
                         $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1202$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $546;
                         break L267;
                        }
                       } while(0);
                       $523 = HEAP32[$80>>2]|0;
                       FUNCTION_TABLE_viiii[$523 & 255]($_266$i$i$i$i$i$i,$0,5786,1);
                       $524 = HEAP32[$_266$i$i$i$i$i$i>>2]|0;
                       $switch114$i$i$i$i$i$i = ($524|0)==(1);
                       if ($switch114$i$i$i$i$i$i) {
                        label = 237;
                        break L209;
                       }
                       $$pre$i$i$i1173$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                       if (!($456)) {
                        $529 = HEAP8[$$pre$i$i$i1173$i$i$i$i$i$i>>0]|0;
                        $530 = ($529<<24>>24)>(-65);
                        if (!($530)) {
                         label = 235;
                         break L74;
                        }
                       }
                       $531 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -4)|0;
                       $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1173$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $531;
                       break L267;
                      }
                     } while(0);
                     $508 = HEAP32[$80>>2]|0;
                     FUNCTION_TABLE_viiii[$508 & 255]($_244$i$i$i$i$i$i,$0,5781,1);
                     $509 = HEAP32[$_244$i$i$i$i$i$i>>2]|0;
                     $switch113$i$i$i$i$i$i = ($509|0)==(1);
                     if ($switch113$i$i$i$i$i$i) {
                      label = 227;
                      break L209;
                     }
                     $$pre$i$i$i1144$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 4|0);
                     if (!($456)) {
                      $514 = HEAP8[$$pre$i$i$i1144$i$i$i$i$i$i>>0]|0;
                      $515 = ($514<<24>>24)>(-65);
                      if (!($515)) {
                       label = 225;
                       break L74;
                      }
                     }
                     $516 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -4)|0;
                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1144$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $516;
                     break L267;
                    }
                   } while(0);
                   if ((label|0) == 280) {
                    label = 0;
                    $601 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 3|0);
                    $602 = HEAP8[$601>>0]|0;
                    $603 = ($602<<24>>24)>(-65);
                    if ($603) {
                     $967 = 0;
                     label = 281;
                    }
                   }
                   do {
                    if ((label|0) == 281) {
                     label = 0;
                     $604 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5812|0);
                     if (!($604)) {
                      $605 = (_memcmp(5812,$rest2$sroa$0$02596$i$i$i$i$i$i,3)|0);
                      $606 = ($605|0)==(0);
                      if (!($606)) {
                       break;
                      }
                     }
                     $616 = HEAP32[$80>>2]|0;
                     FUNCTION_TABLE_viiii[$616 & 255]($_398$i$i$i$i$i$i,$0,5815,1);
                     $617 = HEAP32[$_398$i$i$i$i$i$i>>2]|0;
                     $switch120$i$i$i$i$i$i = ($617|0)==(1);
                     if ($switch120$i$i$i$i$i$i) {
                      label = 300;
                      break L209;
                     }
                     if ($967) {
                      $$pre$i$i$i1347$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 3|0);
                      $$pre$phi$i$ph$i$i1352$i$i$i$i$i$iZ2D = $$pre$i$i$i1347$i$i$i$i$i$i;
                     } else {
                      $626 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(3);
                      if (!($626)) {
                       label = 298;
                       break L74;
                      }
                      $627 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 3|0);
                      $628 = HEAP8[$627>>0]|0;
                      $629 = ($628<<24>>24)>(-65);
                      if ($629) {
                       $$pre$phi$i$ph$i$i1352$i$i$i$i$i$iZ2D = $627;
                      } else {
                       label = 298;
                       break L74;
                      }
                     }
                     $630 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -3)|0;
                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1352$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $630;
                     break L267;
                    }
                   } while(0);
                   $618 = ($rest2$sroa$80$02633$i$i$i$i$i$i|0)==(5);
                   if ($618) {
                    $968 = 1;
                   } else {
                    $619 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                    if (!($619)) {
                     break L263;
                    }
                    $620 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                    $621 = HEAP8[$620>>0]|0;
                    $622 = ($621<<24>>24)>(-65);
                    if ($622) {
                     $968 = 0;
                    } else {
                     break L263;
                    }
                   }
                   $623 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5816|0);
                   do {
                    if (!($623)) {
                     $624 = (_memcmp(5816,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                     $625 = ($624|0)==(0);
                     if ($625) {
                      break;
                     }
                     if ($968) {
                      $969 = 1;
                     } else {
                      $639 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                      if (!($639)) {
                       break L263;
                      }
                      $$phi$trans$insert3186$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                      $$pre3187$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3186$i$i$i$i$i$i>>0]|0;
                      $640 = ($$pre3187$i$i$i$i$i$i<<24>>24)>(-65);
                      if ($640) {
                       $969 = 0;
                      } else {
                       break L263;
                      }
                     }
                     $641 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5822|0);
                     do {
                      if (!($641)) {
                       $642 = (_memcmp(5822,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                       $643 = ($642|0)==(0);
                       if ($643) {
                        break;
                       }
                       if ($969) {
                        $970 = 1;
                       } else {
                        $657 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                        if (!($657)) {
                         break L263;
                        }
                        $$phi$trans$insert3188$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                        $$pre3189$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3188$i$i$i$i$i$i>>0]|0;
                        $658 = ($$pre3189$i$i$i$i$i$i<<24>>24)>(-65);
                        if ($658) {
                         $970 = 0;
                        } else {
                         break L263;
                        }
                       }
                       $659 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5828|0);
                       do {
                        if (!($659)) {
                         $660 = (_memcmp(5828,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                         $661 = ($660|0)==(0);
                         if ($661) {
                          break;
                         }
                         if ($970) {
                          $971 = 1;
                         } else {
                          $675 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                          if (!($675)) {
                           break L263;
                          }
                          $$phi$trans$insert3190$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                          $$pre3191$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3190$i$i$i$i$i$i>>0]|0;
                          $676 = ($$pre3191$i$i$i$i$i$i<<24>>24)>(-65);
                          if ($676) {
                           $971 = 0;
                          } else {
                           break L263;
                          }
                         }
                         $677 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5834|0);
                         do {
                          if (!($677)) {
                           $678 = (_memcmp(5834,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                           $679 = ($678|0)==(0);
                           if ($679) {
                            break;
                           }
                           if ($971) {
                            $972 = 1;
                           } else {
                            $693 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                            if (!($693)) {
                             break L263;
                            }
                            $$phi$trans$insert3192$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                            $$pre3193$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3192$i$i$i$i$i$i>>0]|0;
                            $694 = ($$pre3193$i$i$i$i$i$i<<24>>24)>(-65);
                            if ($694) {
                             $972 = 0;
                            } else {
                             break L263;
                            }
                           }
                           $695 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5840|0);
                           do {
                            if (!($695)) {
                             $696 = (_memcmp(5840,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                             $697 = ($696|0)==(0);
                             if ($697) {
                              break;
                             }
                             if ($972) {
                              $973 = 1;
                             } else {
                              $711 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                              if (!($711)) {
                               break L263;
                              }
                              $$phi$trans$insert3194$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                              $$pre3195$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3194$i$i$i$i$i$i>>0]|0;
                              $712 = ($$pre3195$i$i$i$i$i$i<<24>>24)>(-65);
                              if ($712) {
                               $973 = 0;
                              } else {
                               break L263;
                              }
                             }
                             $713 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5846|0);
                             do {
                              if (!($713)) {
                               $714 = (_memcmp(5846,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                               $715 = ($714|0)==(0);
                               if ($715) {
                                break;
                               }
                               if ($973) {
                                $974 = 1;
                               } else {
                                $729 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                if (!($729)) {
                                 break L263;
                                }
                                $$phi$trans$insert3196$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                $$pre3197$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3196$i$i$i$i$i$i>>0]|0;
                                $730 = ($$pre3197$i$i$i$i$i$i<<24>>24)>(-65);
                                if ($730) {
                                 $974 = 0;
                                } else {
                                 break L263;
                                }
                               }
                               $731 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5852|0);
                               do {
                                if (!($731)) {
                                 $732 = (_memcmp(5852,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                                 $733 = ($732|0)==(0);
                                 if ($733) {
                                  break;
                                 }
                                 if ($974) {
                                  $975 = 1;
                                 } else {
                                  $747 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                  if (!($747)) {
                                   break L263;
                                  }
                                  $$phi$trans$insert3198$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                  $$pre3199$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3198$i$i$i$i$i$i>>0]|0;
                                  $748 = ($$pre3199$i$i$i$i$i$i<<24>>24)>(-65);
                                  if ($748) {
                                   $975 = 0;
                                  } else {
                                   break L263;
                                  }
                                 }
                                 $749 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5858|0);
                                 do {
                                  if (!($749)) {
                                   $750 = (_memcmp(5858,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                                   $751 = ($750|0)==(0);
                                   if ($751) {
                                    break;
                                   }
                                   if ($975) {
                                    $976 = 1;
                                   } else {
                                    $765 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                    if (!($765)) {
                                     break L263;
                                    }
                                    $$phi$trans$insert3200$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                    $$pre3201$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3200$i$i$i$i$i$i>>0]|0;
                                    $766 = ($$pre3201$i$i$i$i$i$i<<24>>24)>(-65);
                                    if ($766) {
                                     $976 = 0;
                                    } else {
                                     break L263;
                                    }
                                   }
                                   $767 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5864|0);
                                   do {
                                    if (!($767)) {
                                     $768 = (_memcmp(5864,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                                     $769 = ($768|0)==(0);
                                     if ($769) {
                                      break;
                                     }
                                     if ($976) {
                                      $977 = 1;
                                     } else {
                                      $783 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                      if (!($783)) {
                                       break L263;
                                      }
                                      $$phi$trans$insert3202$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                      $$pre3203$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3202$i$i$i$i$i$i>>0]|0;
                                      $784 = ($$pre3203$i$i$i$i$i$i<<24>>24)>(-65);
                                      if ($784) {
                                       $977 = 0;
                                      } else {
                                       break L263;
                                      }
                                     }
                                     $785 = ($rest2$sroa$0$02596$i$i$i$i$i$i|0)==(5870|0);
                                     if (!($785)) {
                                      $786 = (_memcmp(5870,$rest2$sroa$0$02596$i$i$i$i$i$i,5)|0);
                                      $787 = ($786|0)==(0);
                                      if (!($787)) {
                                       break L263;
                                      }
                                     }
                                     $799 = HEAP32[$80>>2]|0;
                                     FUNCTION_TABLE_viiii[$799 & 255]($_618$i$i$i$i$i$i,$0,5875,1);
                                     $800 = HEAP32[$_618$i$i$i$i$i$i>>2]|0;
                                     $switch130$i$i$i$i$i$i = ($800|0)==(1);
                                     if ($switch130$i$i$i$i$i$i) {
                                      label = 426;
                                      break L209;
                                     }
                                     if ($977) {
                                      $$pre$i$i$i1630$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                      $$pre$phi$i$ph$i$i1635$i$i$i$i$i$iZ2D = $$pre$i$i$i1630$i$i$i$i$i$i;
                                     } else {
                                      $803 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                      if (!($803)) {
                                       label = 424;
                                       break L74;
                                      }
                                      $804 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                      $805 = HEAP8[$804>>0]|0;
                                      $806 = ($805<<24>>24)>(-65);
                                      if ($806) {
                                       $$pre$phi$i$ph$i$i1635$i$i$i$i$i$iZ2D = $804;
                                      } else {
                                       label = 424;
                                       break L74;
                                      }
                                     }
                                     $807 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1635$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $807;
                                     break L267;
                                    }
                                   } while(0);
                                   $781 = HEAP32[$80>>2]|0;
                                   FUNCTION_TABLE_viiii[$781 & 255]($_596$i$i$i$i$i$i,$0,5869,1);
                                   $782 = HEAP32[$_596$i$i$i$i$i$i>>2]|0;
                                   $switch129$i$i$i$i$i$i = ($782|0)==(1);
                                   if ($switch129$i$i$i$i$i$i) {
                                    label = 417;
                                    break L209;
                                   }
                                   if ($976) {
                                    $$pre$i$i$i1608$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                    $$pre$phi$i$ph$i$i1613$i$i$i$i$i$iZ2D = $$pre$i$i$i1608$i$i$i$i$i$i;
                                   } else {
                                    $788 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                    if (!($788)) {
                                     label = 415;
                                     break L74;
                                    }
                                    $789 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                    $790 = HEAP8[$789>>0]|0;
                                    $791 = ($790<<24>>24)>(-65);
                                    if ($791) {
                                     $$pre$phi$i$ph$i$i1613$i$i$i$i$i$iZ2D = $789;
                                    } else {
                                     label = 415;
                                     break L74;
                                    }
                                   }
                                   $792 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                                   $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1613$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $792;
                                   break L267;
                                  }
                                 } while(0);
                                 $763 = HEAP32[$80>>2]|0;
                                 FUNCTION_TABLE_viiii[$763 & 255]($_574$i$i$i$i$i$i,$0,5863,1);
                                 $764 = HEAP32[$_574$i$i$i$i$i$i>>2]|0;
                                 $switch128$i$i$i$i$i$i = ($764|0)==(1);
                                 if ($switch128$i$i$i$i$i$i) {
                                  label = 404;
                                  break L209;
                                 }
                                 if ($975) {
                                  $$pre$i$i$i1579$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                  $$pre$phi$i$ph$i$i1584$i$i$i$i$i$iZ2D = $$pre$i$i$i1579$i$i$i$i$i$i;
                                 } else {
                                  $770 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                  if (!($770)) {
                                   label = 402;
                                   break L74;
                                  }
                                  $771 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                  $772 = HEAP8[$771>>0]|0;
                                  $773 = ($772<<24>>24)>(-65);
                                  if ($773) {
                                   $$pre$phi$i$ph$i$i1584$i$i$i$i$i$iZ2D = $771;
                                  } else {
                                   label = 402;
                                   break L74;
                                  }
                                 }
                                 $774 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                                 $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1584$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $774;
                                 break L267;
                                }
                               } while(0);
                               $745 = HEAP32[$80>>2]|0;
                               FUNCTION_TABLE_viiii[$745 & 255]($_552$i$i$i$i$i$i,$0,5857,1);
                               $746 = HEAP32[$_552$i$i$i$i$i$i>>2]|0;
                               $switch127$i$i$i$i$i$i = ($746|0)==(1);
                               if ($switch127$i$i$i$i$i$i) {
                                label = 391;
                                break L209;
                               }
                               if ($974) {
                                $$pre$i$i$i1550$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                $$pre$phi$i$ph$i$i1555$i$i$i$i$i$iZ2D = $$pre$i$i$i1550$i$i$i$i$i$i;
                               } else {
                                $752 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                                if (!($752)) {
                                 label = 389;
                                 break L74;
                                }
                                $753 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                                $754 = HEAP8[$753>>0]|0;
                                $755 = ($754<<24>>24)>(-65);
                                if ($755) {
                                 $$pre$phi$i$ph$i$i1555$i$i$i$i$i$iZ2D = $753;
                                } else {
                                 label = 389;
                                 break L74;
                                }
                               }
                               $756 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                               $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1555$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $756;
                               break L267;
                              }
                             } while(0);
                             $727 = HEAP32[$80>>2]|0;
                             FUNCTION_TABLE_viiii[$727 & 255]($_530$i$i$i$i$i$i,$0,5851,1);
                             $728 = HEAP32[$_530$i$i$i$i$i$i>>2]|0;
                             $switch126$i$i$i$i$i$i = ($728|0)==(1);
                             if ($switch126$i$i$i$i$i$i) {
                              label = 378;
                              break L209;
                             }
                             if ($973) {
                              $$pre$i$i$i1521$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                              $$pre$phi$i$ph$i$i1526$i$i$i$i$i$iZ2D = $$pre$i$i$i1521$i$i$i$i$i$i;
                             } else {
                              $734 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                              if (!($734)) {
                               label = 376;
                               break L74;
                              }
                              $735 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                              $736 = HEAP8[$735>>0]|0;
                              $737 = ($736<<24>>24)>(-65);
                              if ($737) {
                               $$pre$phi$i$ph$i$i1526$i$i$i$i$i$iZ2D = $735;
                              } else {
                               label = 376;
                               break L74;
                              }
                             }
                             $738 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                             $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1526$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $738;
                             break L267;
                            }
                           } while(0);
                           $709 = HEAP32[$80>>2]|0;
                           FUNCTION_TABLE_viiii[$709 & 255]($_508$i$i$i$i$i$i,$0,5845,1);
                           $710 = HEAP32[$_508$i$i$i$i$i$i>>2]|0;
                           $switch125$i$i$i$i$i$i = ($710|0)==(1);
                           if ($switch125$i$i$i$i$i$i) {
                            label = 365;
                            break L209;
                           }
                           if ($972) {
                            $$pre$i$i$i1492$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                            $$pre$phi$i$ph$i$i1497$i$i$i$i$i$iZ2D = $$pre$i$i$i1492$i$i$i$i$i$i;
                           } else {
                            $716 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                            if (!($716)) {
                             label = 363;
                             break L74;
                            }
                            $717 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                            $718 = HEAP8[$717>>0]|0;
                            $719 = ($718<<24>>24)>(-65);
                            if ($719) {
                             $$pre$phi$i$ph$i$i1497$i$i$i$i$i$iZ2D = $717;
                            } else {
                             label = 363;
                             break L74;
                            }
                           }
                           $720 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                           $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1497$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $720;
                           break L267;
                          }
                         } while(0);
                         $691 = HEAP32[$80>>2]|0;
                         FUNCTION_TABLE_viiii[$691 & 255]($_486$i$i$i$i$i$i,$0,5839,1);
                         $692 = HEAP32[$_486$i$i$i$i$i$i>>2]|0;
                         $switch124$i$i$i$i$i$i = ($692|0)==(1);
                         if ($switch124$i$i$i$i$i$i) {
                          label = 352;
                          break L209;
                         }
                         if ($971) {
                          $$pre$i$i$i1463$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                          $$pre$phi$i$ph$i$i1468$i$i$i$i$i$iZ2D = $$pre$i$i$i1463$i$i$i$i$i$i;
                         } else {
                          $698 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                          if (!($698)) {
                           label = 350;
                           break L74;
                          }
                          $699 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                          $700 = HEAP8[$699>>0]|0;
                          $701 = ($700<<24>>24)>(-65);
                          if ($701) {
                           $$pre$phi$i$ph$i$i1468$i$i$i$i$i$iZ2D = $699;
                          } else {
                           label = 350;
                           break L74;
                          }
                         }
                         $702 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                         $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1468$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $702;
                         break L267;
                        }
                       } while(0);
                       $673 = HEAP32[$80>>2]|0;
                       FUNCTION_TABLE_viiii[$673 & 255]($_464$i$i$i$i$i$i,$0,5833,1);
                       $674 = HEAP32[$_464$i$i$i$i$i$i>>2]|0;
                       $switch123$i$i$i$i$i$i = ($674|0)==(1);
                       if ($switch123$i$i$i$i$i$i) {
                        label = 339;
                        break L209;
                       }
                       if ($970) {
                        $$pre$i$i$i1434$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                        $$pre$phi$i$ph$i$i1439$i$i$i$i$i$iZ2D = $$pre$i$i$i1434$i$i$i$i$i$i;
                       } else {
                        $680 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                        if (!($680)) {
                         label = 337;
                         break L74;
                        }
                        $681 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                        $682 = HEAP8[$681>>0]|0;
                        $683 = ($682<<24>>24)>(-65);
                        if ($683) {
                         $$pre$phi$i$ph$i$i1439$i$i$i$i$i$iZ2D = $681;
                        } else {
                         label = 337;
                         break L74;
                        }
                       }
                       $684 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                       $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1439$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $684;
                       break L267;
                      }
                     } while(0);
                     $655 = HEAP32[$80>>2]|0;
                     FUNCTION_TABLE_viiii[$655 & 255]($_442$i$i$i$i$i$i,$0,5827,1);
                     $656 = HEAP32[$_442$i$i$i$i$i$i>>2]|0;
                     $switch122$i$i$i$i$i$i = ($656|0)==(1);
                     if ($switch122$i$i$i$i$i$i) {
                      label = 326;
                      break L209;
                     }
                     if ($969) {
                      $$pre$i$i$i1405$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                      $$pre$phi$i$ph$i$i1410$i$i$i$i$i$iZ2D = $$pre$i$i$i1405$i$i$i$i$i$i;
                     } else {
                      $662 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                      if (!($662)) {
                       label = 324;
                       break L74;
                      }
                      $663 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                      $664 = HEAP8[$663>>0]|0;
                      $665 = ($664<<24>>24)>(-65);
                      if ($665) {
                       $$pre$phi$i$ph$i$i1410$i$i$i$i$i$iZ2D = $663;
                      } else {
                       label = 324;
                       break L74;
                      }
                     }
                     $666 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1410$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $666;
                     break L267;
                    }
                   } while(0);
                   $637 = HEAP32[$80>>2]|0;
                   FUNCTION_TABLE_viiii[$637 & 255]($_420$i$i$i$i$i$i,$0,5821,1);
                   $638 = HEAP32[$_420$i$i$i$i$i$i>>2]|0;
                   $switch121$i$i$i$i$i$i = ($638|0)==(1);
                   if ($switch121$i$i$i$i$i$i) {
                    label = 313;
                    break L209;
                   }
                   if ($968) {
                    $$pre$i$i$i1376$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                    $$pre$phi$i$ph$i$i1381$i$i$i$i$i$iZ2D = $$pre$i$i$i1376$i$i$i$i$i$i;
                   } else {
                    $644 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>(5);
                    if (!($644)) {
                     label = 311;
                     break L74;
                    }
                    $645 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 5|0);
                    $646 = HEAP8[$645>>0]|0;
                    $647 = ($646<<24>>24)>(-65);
                    if ($647) {
                     $$pre$phi$i$ph$i$i1381$i$i$i$i$i$iZ2D = $645;
                    } else {
                     label = 311;
                     break L74;
                    }
                   }
                   $648 = (($rest2$sroa$80$02633$i$i$i$i$i$i) + -5)|0;
                   $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1381$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $648;
                   break L267;
                  }
                 } while(0);
                 $$ptr3240$i$i$i$i$i$i = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 1|0);
                 do {
                  if ($392) {
                   $$ptr3242$i$i$i$i$i$i = $$ptr3240$i$i$i$i$i$i;
                   label = 187;
                  } else {
                   $398 = HEAP8[$$ptr3240$i$i$i$i$i$i>>0]|0;
                   $399 = ($398<<24>>24)>(-65);
                   if (!($399)) {
                    label = 172;
                    break L74;
                   }
                   $$ptr$i$i$i$i$i$i = (($rest2$sroa$0$02596$i$i$i$i$i$i) + ($rest2$sroa$80$02633$i$i$i$i$i$i)|0);
                   $406 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 2|0);
                   $411 = ($398<<24>>24)>(-1);
                   do {
                    if ($411) {
                     $400 = $398&255;
                     $_197$sroa$5$2$ph$i$i$i$i$i$i = $400;
                    } else {
                     $401 = $398 & 31;
                     $402 = $401&255;
                     $403 = ($rest2$sroa$80$02633$i$i$i$i$i$i|0)==(2);
                     if ($403) {
                      $412 = $$ptr$i$i$i$i$i$i;$_0$0$i20$i$i1041$i$i$i$i$i$i = 0;
                     } else {
                      $404 = ((($rest2$sroa$0$02596$i$i$i$i$i$i)) + 3|0);
                      $405 = HEAP8[$406>>0]|0;
                      $phitmp$i$i1039$i$i$i$i$i$i = $405 & 63;
                      $412 = $404;$_0$0$i20$i$i1041$i$i$i$i$i$i = $phitmp$i$i1039$i$i$i$i$i$i;
                     }
                     $407 = $402 << 6;
                     $408 = $_0$0$i20$i$i1041$i$i$i$i$i$i&255;
                     $409 = $408 | $407;
                     $410 = ($398&255)>(223);
                     if (!($410)) {
                      $_197$sroa$5$2$ph$i$i$i$i$i$i = $409;
                      break;
                     }
                     $413 = ($412|0)==($$ptr$i$i$i$i$i$i|0);
                     if ($413) {
                      $422 = $$ptr$i$i$i$i$i$i;$_0$0$i14$i$i1047$i$i$i$i$i$i = 0;
                     } else {
                      $414 = ((($412)) + 1|0);
                      $415 = HEAP8[$412>>0]|0;
                      $phitmp26$i$i1045$i$i$i$i$i$i = $415 & 63;
                      $422 = $414;$_0$0$i14$i$i1047$i$i$i$i$i$i = $phitmp26$i$i1045$i$i$i$i$i$i;
                     }
                     $416 = $408 << 6;
                     $417 = $_0$0$i14$i$i1047$i$i$i$i$i$i&255;
                     $418 = $417 | $416;
                     $419 = $402 << 12;
                     $420 = $418 | $419;
                     $421 = ($398&255)>(239);
                     if (!($421)) {
                      $_197$sroa$5$2$ph$i$i$i$i$i$i = $420;
                      break;
                     }
                     $423 = ($422|0)==($$ptr$i$i$i$i$i$i|0);
                     if ($423) {
                      $_0$0$i9$i$i1052$i$i$i$i$i$i = 0;
                     } else {
                      $424 = HEAP8[$422>>0]|0;
                      $phitmp27$i$i1050$i$i$i$i$i$i = $424 & 63;
                      $_0$0$i9$i$i1052$i$i$i$i$i$i = $phitmp27$i$i1050$i$i$i$i$i$i;
                     }
                     $425 = $402 << 18;
                     $426 = $425 & 1835008;
                     $427 = $418 << 6;
                     $428 = $_0$0$i9$i$i1052$i$i$i$i$i$i&255;
                     $429 = $427 | $426;
                     $430 = $429 | $428;
                     $_197$sroa$5$2$ph$i$i$i$i$i$i = $430;
                    }
                   } while(0);
                   $cond93$i$i$i$i$i$i = ($_197$sroa$5$2$ph$i$i$i$i$i$i|0)==(46);
                   if (!($cond93$i$i$i$i$i$i)) {
                    $$ptr3242$i$i$i$i$i$i = $$ptr$i$i$i$i$i$i;
                    label = 187;
                    break;
                   }
                   $436 = HEAP32[$80>>2]|0;
                   FUNCTION_TABLE_viiii[$436 & 255]($_206$i$i$i$i$i$i,$0,5771,2);
                   $437 = HEAP32[$_206$i$i$i$i$i$i>>2]|0;
                   $switch107$i$i$i$i$i$i = ($437|0)==(1);
                   if ($switch107$i$i$i$i$i$i) {
                    label = 196;
                    break L209;
                   }
                   $$ptr3241$i$i$i$i$i$i = $$ptr$i$i$i$i$i$i;$$sink813$i$i$i$i$i$i = 2;
                  }
                 } while(0);
                 if ((label|0) == 187) {
                  label = 0;
                  $434 = HEAP32[$80>>2]|0;
                  FUNCTION_TABLE_viiii[$434 & 255]($_223$i$i$i$i$i$i,$0,5775,1);
                  $435 = HEAP32[$_223$i$i$i$i$i$i>>2]|0;
                  $switch106$i$i$i$i$i$i = ($435|0)==(1);
                  if ($switch106$i$i$i$i$i$i) {
                   label = 198;
                   break L209;
                  }
                  $$ptr3241$i$i$i$i$i$i = $$ptr3242$i$i$i$i$i$i;$$sink813$i$i$i$i$i$i = 1;
                 }
                 $438 = ($rest2$sroa$80$02633$i$i$i$i$i$i|0)==($$sink813$i$i$i$i$i$i|0);
                 if ($438) {
                  $$pre$phi$i$ph$i$i1082$i$i$i$i$i$iZ2D = $$ptr3241$i$i$i$i$i$i;
                 } else {
                  $439 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>($$sink813$i$i$i$i$i$i>>>0);
                  if (!($439)) {
                   label = 193;
                   break L74;
                  }
                  $440 = (($rest2$sroa$0$02596$i$i$i$i$i$i) + ($$sink813$i$i$i$i$i$i)|0);
                  $441 = HEAP8[$440>>0]|0;
                  $442 = ($441<<24>>24)>(-65);
                  if ($442) {
                   $$pre$phi$i$ph$i$i1082$i$i$i$i$i$iZ2D = $440;
                  } else {
                   label = 193;
                   break L74;
                  }
                 }
                 $443 = (($rest2$sroa$80$02633$i$i$i$i$i$i) - ($$sink813$i$i$i$i$i$i))|0;
                 $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1082$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $443;
                }
               } while(0);
               if ((label|0) == 204) {
                label = 0;
                $464 = (($rest2$sroa$0$02596$i$i$i$i$i$i) + ($rest2$sroa$80$02633$i$i$i$i$i$i)|0);
                $465 = $rest2$sroa$0$02596$i$i$i$i$i$i;
                $466 = $465;$_653$sroa$0$0$i$i$i$i$i$i = 0;
                L540: while(1) {
                 $$cast$i$i$i$i$i$i$i$i$i = $466;
                 $467 = ($$cast$i$i$i$i$i$i$i$i$i|0)==($464|0);
                 if ($467) {
                  $idx$0$i$i$i$i$i$i = $rest2$sroa$80$02633$i$i$i$i$i$i;
                  break;
                 }
                 $472 = ((($$cast$i$i$i$i$i$i$i$i$i)) + 1|0);
                 $469 = HEAP8[$$cast$i$i$i$i$i$i$i$i$i>>0]|0;
                 $481 = ($469<<24>>24)>(-1);
                 $482 = $472;
                 do {
                  if ($481) {
                   $468 = $469&255;
                   $507 = $482;$trunc$i$i$i$i$i$i$i$i$i$i = $468;
                  } else {
                   $470 = $469 & 31;
                   $471 = $470&255;
                   $473 = ($472|0)==($464|0);
                   if ($473) {
                    $483 = $464;$964 = $482;$_0$0$i20$i$i$i$i$i$i$i$i$i$i$i = 0;
                   } else {
                    $474 = ((($$cast$i$i$i$i$i$i$i$i$i)) + 2|0);
                    $475 = HEAP8[$472>>0]|0;
                    $phitmp$i$i$i$i$i$i$i$i$i$i$i = $475 & 63;
                    $476 = $474;
                    $483 = $474;$964 = $476;$_0$0$i20$i$i$i$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   $477 = $471 << 6;
                   $478 = $_0$0$i20$i$i$i$i$i$i$i$i$i$i$i&255;
                   $479 = $478 | $477;
                   $480 = ($469&255)>(223);
                   if (!($480)) {
                    $507 = $964;$trunc$i$i$i$i$i$i$i$i$i$i = $479;
                    break;
                   }
                   $484 = ($483|0)==($464|0);
                   if ($484) {
                    $494 = $464;$965 = $964;$_0$0$i14$i$i$i$i$i$i$i$i$i$i$i = 0;
                   } else {
                    $485 = ((($483)) + 1|0);
                    $486 = HEAP8[$483>>0]|0;
                    $phitmp26$i$i$i$i$i$i$i$i$i$i$i = $486 & 63;
                    $487 = $485;
                    $494 = $485;$965 = $487;$_0$0$i14$i$i$i$i$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   $488 = $478 << 6;
                   $489 = $_0$0$i14$i$i$i$i$i$i$i$i$i$i$i&255;
                   $490 = $489 | $488;
                   $491 = $471 << 12;
                   $492 = $490 | $491;
                   $493 = ($469&255)>(239);
                   if (!($493)) {
                    $507 = $965;$trunc$i$i$i$i$i$i$i$i$i$i = $492;
                    break;
                   }
                   $495 = ($494|0)==($464|0);
                   if ($495) {
                    $966 = $965;$_0$0$i9$i$i$i$i$i$i$i$i$i$i$i = 0;
                   } else {
                    $496 = ((($494)) + 1|0);
                    $497 = HEAP8[$494>>0]|0;
                    $phitmp27$i$i$i$i$i$i$i$i$i$i$i = $497 & 63;
                    $498 = $496;
                    $966 = $498;$_0$0$i9$i$i$i$i$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   $499 = $471 << 18;
                   $500 = $499 & 1835008;
                   $501 = $490 << 6;
                   $502 = $_0$0$i9$i$i$i$i$i$i$i$i$i$i$i&255;
                   $503 = $501 | $500;
                   $504 = $503 | $502;
                   $507 = $966;$trunc$i$i$i$i$i$i$i$i$i$i = $504;
                  }
                 } while(0);
                 $505 = (($_653$sroa$0$0$i$i$i$i$i$i) - ($466))|0;
                 $506 = (($505) + ($507))|0;
                 $trunc$i$i$i$i$i$i$i$i$i$i$clear = $trunc$i$i$i$i$i$i$i$i$i$i & 2097151;
                 switch ($trunc$i$i$i$i$i$i$i$i$i$i$clear|0) {
                 case 46: case 36:  {
                  $idx$0$i$i$i$i$i$i = $_653$sroa$0$0$i$i$i$i$i$i;
                  break L540;
                  break;
                 }
                 default: {
                  $466 = $507;$_653$sroa$0$0$i$i$i$i$i$i = $506;
                 }
                 }
                }
                $821 = ($idx$0$i$i$i$i$i$i|0)==(0);
                $822 = ($rest2$sroa$80$02633$i$i$i$i$i$i|0)==($idx$0$i$i$i$i$i$i|0);
                $or$cond$i$i$i$i1653$i$i$i$i$i$i = $821 | $822;
                if (!($or$cond$i$i$i$i1653$i$i$i$i$i$i)) {
                 $823 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>($idx$0$i$i$i$i$i$i>>>0);
                 if (!($823)) {
                  label = 433;
                  break L74;
                 }
                 $824 = (($rest2$sroa$0$02596$i$i$i$i$i$i) + ($idx$0$i$i$i$i$i$i)|0);
                 $825 = HEAP8[$824>>0]|0;
                 $826 = ($825<<24>>24)>(-65);
                 if (!($826)) {
                  label = 433;
                  break L74;
                 }
                }
                $827 = HEAP32[$80>>2]|0;
                FUNCTION_TABLE_viiii[$827 & 255]($_661$i$i$i$i$i$i,$0,$rest2$sroa$0$02596$i$i$i$i$i$i,$idx$0$i$i$i$i$i$i);
                $828 = HEAP32[$_661$i$i$i$i$i$i>>2]|0;
                $switch132$i$i$i$i$i$i = ($828|0)==(1);
                if ($switch132$i$i$i$i$i$i) {
                 label = 442;
                 break L209;
                }
                if ($or$cond$i$i$i$i1653$i$i$i$i$i$i) {
                 $$pre$i$i$i1673$i$i$i$i$i$i = (($rest2$sroa$0$02596$i$i$i$i$i$i) + ($idx$0$i$i$i$i$i$i)|0);
                 $$pre$phi$i$ph$i$i1678$i$i$i$i$i$iZ2D = $$pre$i$i$i1673$i$i$i$i$i$i;
                } else {
                 $829 = ($rest2$sroa$80$02633$i$i$i$i$i$i>>>0)>($idx$0$i$i$i$i$i$i>>>0);
                 if (!($829)) {
                  label = 439;
                  break L74;
                 }
                 $830 = (($rest2$sroa$0$02596$i$i$i$i$i$i) + ($idx$0$i$i$i$i$i$i)|0);
                 $831 = HEAP8[$830>>0]|0;
                 $832 = ($831<<24>>24)>(-65);
                 if ($832) {
                  $$pre$phi$i$ph$i$i1678$i$i$i$i$i$iZ2D = $830;
                 } else {
                  label = 439;
                  break L74;
                 }
                }
                $833 = (($rest2$sroa$80$02633$i$i$i$i$i$i) - ($idx$0$i$i$i$i$i$i))|0;
                $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1678$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $833;
               }
               $834 = ($rest2$sroa$80$0$be$i$i$i$i$i$i|0)==(0);
               if ($834) {
                break L262;
               } else {
                $rest2$sroa$0$02596$i$i$i$i$i$i = $rest2$sroa$0$0$be$i$i$i$i$i$i;$rest2$sroa$80$02633$i$i$i$i$i$i = $rest2$sroa$80$0$be$i$i$i$i$i$i;
                label = 166;
               }
              }
              $801 = HEAP32[$80>>2]|0;
              FUNCTION_TABLE_viiii[$801 & 255]($_638$i$i$i$i$i$i,$0,$rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i);
              $802 = HEAP32[$_638$i$i$i$i$i$i>>2]|0;
              $switch131$i$i$i$i$i$i = ($802|0)==(1);
              if ($switch131$i$i$i$i$i$i) {
               label = 429;
               break L209;
              }
             }
            } while(0);
            $814 = ($375|0)==(0);
            if ($814) {
             label = 443;
             break L130;
            } else {
             $first$0$off02674$i$i$i$i$i$i = 0;$inner$sroa$0$52676$i$i$i$i$i$i = $$pre$phi$i$ph$i$i2021$i$i$i$i$i$iZ2D;$inner$sroa$14$52675$i$i$i$i$i$i = $375;
            }
           }
           switch (label|0) {
            case 124: {
             label = 0;
             $316 = $err1$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $317 = $316;
             $318 = HEAP32[$317>>2]|0;
             $319 = (($316) + 4)|0;
             $320 = $319;
             $321 = HEAP32[$320>>2]|0;
             $844 = $318;$847 = $321;
             label = 445;
             break L130;
             break;
            }
            case 196: {
             label = 0;
             $444 = $err3$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $445 = $444;
             $446 = HEAP32[$445>>2]|0;
             $447 = (($444) + 4)|0;
             $448 = $447;
             $449 = HEAP32[$448>>2]|0;
             $844 = $446;$847 = $449;
             label = 445;
             break L130;
             break;
            }
            case 198: {
             label = 0;
             $450 = $err4$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $451 = $450;
             $452 = HEAP32[$451>>2]|0;
             $453 = (($450) + 4)|0;
             $454 = $453;
             $455 = HEAP32[$454>>2]|0;
             $844 = $452;$847 = $455;
             label = 445;
             break L130;
             break;
            }
            case 227: {
             label = 0;
             $517 = $err5$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $518 = $517;
             $519 = HEAP32[$518>>2]|0;
             $520 = (($517) + 4)|0;
             $521 = $520;
             $522 = HEAP32[$521>>2]|0;
             $844 = $519;$847 = $522;
             label = 445;
             break L130;
             break;
            }
            case 237: {
             label = 0;
             $532 = $err6$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $533 = $532;
             $534 = HEAP32[$533>>2]|0;
             $535 = (($532) + 4)|0;
             $536 = $535;
             $537 = HEAP32[$536>>2]|0;
             $844 = $534;$847 = $537;
             label = 445;
             break L130;
             break;
            }
            case 247: {
             label = 0;
             $547 = $err7$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $548 = $547;
             $549 = HEAP32[$548>>2]|0;
             $550 = (($547) + 4)|0;
             $551 = $550;
             $552 = HEAP32[$551>>2]|0;
             $844 = $549;$847 = $552;
             label = 445;
             break L130;
             break;
            }
            case 257: {
             label = 0;
             $562 = $err8$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $563 = $562;
             $564 = HEAP32[$563>>2]|0;
             $565 = (($562) + 4)|0;
             $566 = $565;
             $567 = HEAP32[$566>>2]|0;
             $844 = $564;$847 = $567;
             label = 445;
             break L130;
             break;
            }
            case 267: {
             label = 0;
             $577 = $err9$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $578 = $577;
             $579 = HEAP32[$578>>2]|0;
             $580 = (($577) + 4)|0;
             $581 = $580;
             $582 = HEAP32[$581>>2]|0;
             $844 = $579;$847 = $582;
             label = 445;
             break L130;
             break;
            }
            case 277: {
             label = 0;
             $592 = $err10$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $593 = $592;
             $594 = HEAP32[$593>>2]|0;
             $595 = (($592) + 4)|0;
             $596 = $595;
             $597 = HEAP32[$596>>2]|0;
             $844 = $594;$847 = $597;
             label = 445;
             break L130;
             break;
            }
            case 287: {
             label = 0;
             $610 = $err11$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $611 = $610;
             $612 = HEAP32[$611>>2]|0;
             $613 = (($610) + 4)|0;
             $614 = $613;
             $615 = HEAP32[$614>>2]|0;
             $844 = $612;$847 = $615;
             label = 445;
             break L130;
             break;
            }
            case 300: {
             label = 0;
             $631 = $err12$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $632 = $631;
             $633 = HEAP32[$632>>2]|0;
             $634 = (($631) + 4)|0;
             $635 = $634;
             $636 = HEAP32[$635>>2]|0;
             $844 = $633;$847 = $636;
             label = 445;
             break L130;
             break;
            }
            case 313: {
             label = 0;
             $649 = $err13$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $650 = $649;
             $651 = HEAP32[$650>>2]|0;
             $652 = (($649) + 4)|0;
             $653 = $652;
             $654 = HEAP32[$653>>2]|0;
             $844 = $651;$847 = $654;
             label = 445;
             break L130;
             break;
            }
            case 326: {
             label = 0;
             $667 = $err14$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $668 = $667;
             $669 = HEAP32[$668>>2]|0;
             $670 = (($667) + 4)|0;
             $671 = $670;
             $672 = HEAP32[$671>>2]|0;
             $844 = $669;$847 = $672;
             label = 445;
             break L130;
             break;
            }
            case 339: {
             label = 0;
             $685 = $err15$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $686 = $685;
             $687 = HEAP32[$686>>2]|0;
             $688 = (($685) + 4)|0;
             $689 = $688;
             $690 = HEAP32[$689>>2]|0;
             $844 = $687;$847 = $690;
             label = 445;
             break L130;
             break;
            }
            case 352: {
             label = 0;
             $703 = $err16$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $704 = $703;
             $705 = HEAP32[$704>>2]|0;
             $706 = (($703) + 4)|0;
             $707 = $706;
             $708 = HEAP32[$707>>2]|0;
             $844 = $705;$847 = $708;
             label = 445;
             break L130;
             break;
            }
            case 365: {
             label = 0;
             $721 = $err17$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $722 = $721;
             $723 = HEAP32[$722>>2]|0;
             $724 = (($721) + 4)|0;
             $725 = $724;
             $726 = HEAP32[$725>>2]|0;
             $844 = $723;$847 = $726;
             label = 445;
             break L130;
             break;
            }
            case 378: {
             label = 0;
             $739 = $err18$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $740 = $739;
             $741 = HEAP32[$740>>2]|0;
             $742 = (($739) + 4)|0;
             $743 = $742;
             $744 = HEAP32[$743>>2]|0;
             $844 = $741;$847 = $744;
             label = 445;
             break L130;
             break;
            }
            case 391: {
             label = 0;
             $757 = $err19$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $758 = $757;
             $759 = HEAP32[$758>>2]|0;
             $760 = (($757) + 4)|0;
             $761 = $760;
             $762 = HEAP32[$761>>2]|0;
             $844 = $759;$847 = $762;
             label = 445;
             break L130;
             break;
            }
            case 404: {
             label = 0;
             $775 = $err20$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $776 = $775;
             $777 = HEAP32[$776>>2]|0;
             $778 = (($775) + 4)|0;
             $779 = $778;
             $780 = HEAP32[$779>>2]|0;
             $844 = $777;$847 = $780;
             label = 445;
             break L130;
             break;
            }
            case 417: {
             label = 0;
             $793 = $err21$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $794 = $793;
             $795 = HEAP32[$794>>2]|0;
             $796 = (($793) + 4)|0;
             $797 = $796;
             $798 = HEAP32[$797>>2]|0;
             $844 = $795;$847 = $798;
             label = 445;
             break L130;
             break;
            }
            case 426: {
             label = 0;
             $808 = $err22$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $809 = $808;
             $810 = HEAP32[$809>>2]|0;
             $811 = (($808) + 4)|0;
             $812 = $811;
             $813 = HEAP32[$812>>2]|0;
             $844 = $810;$847 = $813;
             label = 445;
             break L130;
             break;
            }
            case 429: {
             label = 0;
             $815 = $err23$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $816 = $815;
             $817 = HEAP32[$816>>2]|0;
             $818 = (($815) + 4)|0;
             $819 = $818;
             $820 = HEAP32[$819>>2]|0;
             $844 = $817;$847 = $820;
             label = 445;
             break L130;
             break;
            }
            case 442: {
             label = 0;
             $835 = $err24$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $836 = $835;
             $837 = HEAP32[$836>>2]|0;
             $838 = (($835) + 4)|0;
             $839 = $838;
             $840 = HEAP32[$839>>2]|0;
             $844 = $837;$847 = $840;
             label = 445;
             break L130;
             break;
            }
           }
          }
         }
        } while(0);
        do {
         if ((label|0) == 87) {
          label = 0;
          $251 = HEAP32[$80>>2]|0;
          FUNCTION_TABLE_viiii[$251 & 255]($_92$i$i$i$i$i$i,$0,$121,$symname$sroa$6$1$i$i$i);
          $252 = HEAP32[$_92$i$i$i$i$i$i>>2]|0;
          $switch104$i$i$i$i$i$i = ($252|0)==(1);
          if ($switch104$i$i$i$i$i$i) {
           $253 = $err$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
           $254 = $253;
           $255 = HEAP32[$254>>2]|0;
           $256 = (($253) + 4)|0;
           $257 = $256;
           $258 = HEAP32[$257>>2]|0;
           $844 = $255;$847 = $258;
           label = 445;
           break;
          } else {
           label = 443;
           break;
          }
         }
        } while(0);
        if ((label|0) == 443) {
         label = 0;
         $$pre963$i$i$i$i$i = HEAP32[$80>>2]|0;
         $841 = $$pre963$i$i$i$i$i;
         break;
        }
        else if ((label|0) == 445) {
         label = 0;
         HEAP32[$_105$i$i>>2] = 1;
         $842 = $_2$sroa$0$0$$sroa_idx2$i121$i$i$i$i$i;
         $843 = $842;
         HEAP32[$843>>2] = $844;
         $845 = (($842) + 4)|0;
         $846 = $845;
         HEAP32[$846>>2] = $847;
         $_104$i$sroa$0$0$copyload$i = 1;
         break L94;
        }
       }
      } while(0);
      FUNCTION_TABLE_viiii[$841 & 255]($_105$i$i,$0,5589,1);
      $_104$i$sroa$0$0$copyload$pre$i = HEAP32[$_105$i$i>>2]|0;
      $_104$i$sroa$0$0$copyload$i = $_104$i$sroa$0$0$copyload$pre$i;
     }
    } while(0);
    $858 = $_2$sroa$0$0$$sroa_idx2$i121$i$i$i$i$i;
    $859 = $858;
    $55 = HEAP32[$859>>2]|0;
    $860 = (($858) + 4)|0;
    $861 = $860;
    $862 = HEAP32[$861>>2]|0;
    $switch26$i$i = ($_104$i$sroa$0$0$copyload$i|0)==(1);
    if ($switch26$i$i) {
     label = 12;
     break;
    } else {
     $iter$sroa$0$0$iter$sroa$0$0$313358$i$i = $106;$iter$sroa$15$0$i$i = $107;
    }
   }
   switch (label|0) {
    case 12: {
     $54 = $55&255;
     $res$sroa$8$0$i$off0 = $54;$res$sroa$8$0$i$off32 = $862;
     label = 13;
     break L28;
     break;
    }
    case 24: {
     $res$sroa$0$1$i = 1;$res$sroa$8$1$i$off0 = 0;$res$sroa$8$1$i$off32 = 0;
     break L28;
     break;
    }
    case 26: {
     __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE(-1,0);
     // unreachable;
     break;
    }
    case 50: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($121,$symname$sroa$6$1$i$i$i,3,$152);
     // unreachable;
     break;
    }
    case 61: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($121,$symname$sroa$6$1$i$i$i,2,$169);
     // unreachable;
     break;
    }
    case 137: {
     __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2280);
     // unreachable;
     break;
    }
    case 144: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($inner$sroa$0$52676$i$i$i$i$i$i,$inner$sroa$14$52675$i$i$i$i$i$i,0,$359);
     // unreachable;
     break;
    }
    case 146: {
     $367 = ((($_165$i$i$i$i$i$i)) + 1|0);
     $e$sroa$0$0$copyload$i$i$i$i$i$i$i = HEAP8[$367>>0]|0;
     __ZN4core6result13unwrap_failed17hfaeb699b5bac45d4E($e$sroa$0$0$copyload$i$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 151: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($$sink1022586$i$i$i$i$i$i,$$sink2587$i$i$i$i$i$i,$368,$$sink2587$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 159: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($$sink1022586$i$i$i$i$i$i,$$sink2587$lcssa2737$i$i$i$i$i$i,1,$$sink2587$lcssa2737$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 162: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($$sink1022586$i$i$i$i$i$i,$368,1,$368);
     // unreachable;
     break;
    }
    case 172: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,1,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 193: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,$$sink813$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 225: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,4,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 235: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,4,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 245: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,4,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 255: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,4,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 265: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,4,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 275: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,4,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 285: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,4,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 298: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,3,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 311: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 324: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 337: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 350: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 363: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 376: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 389: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 402: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 415: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 424: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,5,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 433: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,0,$idx$0$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 439: {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($rest2$sroa$0$02596$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i,$idx$0$i$i$i$i$i$i,$rest2$sroa$80$02633$i$i$i$i$i$i);
     // unreachable;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $res$sroa$0$1$i = 0;$res$sroa$8$1$i$off0 = $res$sroa$8$0$i$off0;$res$sroa$8$1$i$off32 = $res$sroa$8$0$i$off32;
 }
 (_pthread_mutex_unlock(((13440)|0))|0);
 $916 = $res$sroa$8$1$i$off32;
 $switch$i25 = ($res$sroa$8$1$i$off0&255)<(2);
 $or$cond = $switch$i25 | $res$sroa$0$1$i;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $917 = ((($916)) + 4|0);
 $918 = HEAP32[$917>>2]|0;
 $919 = ((($916)) + 8|0);
 $920 = HEAP32[$919>>2]|0;
 $921 = HEAP32[$920>>2]|0;
 __THREW__ = 0;
 invoke_vi($921|0,($918|0));
 $922 = __THREW__; __THREW__ = 0;
 $923 = $922&1;
 if ($923) {
  $931 = ___cxa_find_matching_catch_2()|0;
  $932 = tempRet0;
  $933 = HEAP32[$917>>2]|0;
  $934 = HEAP32[$919>>2]|0;
  __ZN5alloc4heap8box_free17he2c7ab366ae97083E($933,$934);
  __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($916);
  ___resumeException($931|0);
  // unreachable;
 }
 $924 = HEAP32[$919>>2]|0;
 $925 = ((($924)) + 4|0);
 $926 = HEAP32[$925>>2]|0;
 $927 = ($926|0)==(0);
 if (!($927)) {
  $928 = HEAP32[$917>>2]|0;
  $929 = ((($924)) + 8|0);
  $930 = HEAP32[$929>>2]|0;
  ___rust_dealloc($928,$926,$930);
 }
 ___rust_dealloc($916,12,4);
 STACKTOP = sp;return;
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h38b21bc534aa4521E($0) {
 $0 = $0|0;
 var $$pn = 0, $$sroa_cast5$i$i = 0, $$sroa_idx3$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$0$i$i = 0, $_0$0$i$i17 = 0, $_0$sroa$0$0 = 0, $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx30 = 0, $_18$i$i$sroa$0$sroa$0$0$_18$i$i$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_3$i = 0, $_5$i$i$i = 0, $_7$i4 = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i15 = 0, $err$i$i = 0, $magicptr = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$8$0$i = 0, $switch3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i = sp + 32|0;
 $_5$i$i$i = sp + 16|0;
 $_7$i4 = sp + 8|0;
 $_3$i = sp;
 $1 = HEAP32[632]|0;
 $cond$i$i = ($1|0)==(0);
 if ($cond$i$i) {
  $2 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2528)|0);
  $_0$0$i$i = $2;
 } else {
  $_0$0$i$i = $1;
 }
 $3 = (_pthread_getspecific(($_0$0$i$i|0))|0);
 $magicptr = $3;
 switch ($magicptr|0) {
 case 0:  {
  label = 4;
  break;
 }
 case 1:  {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  $$pn = $3;
 }
 }
 if ((label|0) == 4) {
  $4 = (___rust_alloc(20,4,$err$i$i)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   ___rust_oom($_5$i$i$i);
   // unreachable;
  }
  HEAP32[$4>>2] = 2528;
  $_18$i$i$sroa$0$sroa$0$0$_18$i$i$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($4)) + 4|0);
  HEAP32[$_18$i$i$sroa$0$sroa$0$0$_18$i$i$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
  $6 = HEAP32[632]|0;
  $cond$i$i15 = ($6|0)==(0);
  if ($cond$i$i15) {
   $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2528)|0);
   $_0$0$i$i17 = $7;
  } else {
   $_0$0$i$i17 = $6;
  }
  (_pthread_setspecific(($_0$0$i$i17|0),($4|0))|0);
  $$pn = $4;
 }
 $8 = ((($$pn)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $switch3 = ($9|0)==(1);
 $10 = ((($$pn)) + 8|0);
 if (!($switch3)) {
  $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx30 = ((($$pn)) + 12|0);
  HEAP8[$8>>0]=1&255;HEAP8[$8+1>>0]=(1>>8)&255;HEAP8[$8+2>>0]=(1>>16)&255;HEAP8[$8+3>>0]=1>>24;
  HEAP8[$10>>0]=0&255;HEAP8[$10+1>>0]=(0>>8)&255;HEAP8[$10+2>>0]=(0>>16)&255;HEAP8[$10+3>>0]=0>>24;
  $11 = $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx30;
  $12 = $11;
  HEAP8[$12>>0]=0&255;HEAP8[$12+1>>0]=(0>>8)&255;HEAP8[$12+2>>0]=(0>>16)&255;HEAP8[$12+3>>0]=0>>24;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP8[$14>>0]=0&255;HEAP8[$14+1>>0]=(0>>8)&255;HEAP8[$14+2>>0]=(0>>16)&255;HEAP8[$14+3>>0]=0>>24;
 }
 $15 = $0;
 $$sroa_cast5$i$i = $0;
 $16 = $15;
 $17 = $16;
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
 HEAP8[$$sroa_cast5$i$i>>0]=0&255;HEAP8[$$sroa_cast5$i$i+1>>0]=(0>>8)&255;HEAP8[$$sroa_cast5$i$i+2>>0]=(0>>16)&255;HEAP8[$$sroa_cast5$i$i+3>>0]=0>>24;
 $22 = $_3$i;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = HEAP32[$10>>2]|0;
 $cond$i$i$i$i = ($26|0)==(0);
 if (!($cond$i$i$i$i)) {
  __THREW__ = 0;
  invoke_v(89);
  $27 = __THREW__; __THREW__ = 0;
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  __ZN4core3ptr13drop_in_place17h19cbc04135e7a0ccE($_3$i);
  $personalityslot$sroa$0$0$i = $28;$personalityslot$sroa$8$0$i = $29;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 HEAP8[$10>>0]=-1&255;HEAP8[$10+1>>0]=(-1>>8)&255;HEAP8[$10+2>>0]=(-1>>16)&255;HEAP8[$10+3>>0]=-1>>24;
 $30 = ((($$pn)) + 12|0);
 $31 = $30;
 $32 = $10;
 HEAP32[$_7$i4>>2] = $31;
 $$sroa_idx3$i$i = ((($_7$i4)) + 4|0);
 HEAP32[$$sroa_idx3$i$i>>2] = $32;
 $33 = HEAP32[$30>>2]|0;
 $34 = ($33|0)==(0|0);
 do {
  if (!($34)) {
   $35 = ((($$pn)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   __THREW__ = 0;
   invoke_vi($37|0,($33|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    $49 = HEAP32[$30>>2]|0;
    $50 = HEAP32[$35>>2]|0;
    __ZN5alloc4heap8box_free17hf07ec92f73b319e5E($49,$50);
    $51 = $30;
    $52 = $51;
    HEAP32[$52>>2] = $18;
    $53 = (($51) + 4)|0;
    $54 = $53;
    HEAP32[$54>>2] = $21;
    __ZN4core3ptr13drop_in_place17h3090aaf055f7624fE($_7$i4);
    $personalityslot$sroa$0$0$i = $47;$personalityslot$sroa$8$0$i = $48;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   } else {
    $40 = HEAP32[$35>>2]|0;
    $41 = ((($40)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0);
    if ($43) {
     break;
    }
    $44 = HEAP32[$30>>2]|0;
    $45 = ((($40)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    ___rust_dealloc($44,$42,$46);
    break;
   }
  }
 } while(0);
 $55 = $30;
 $56 = $55;
 HEAP32[$56>>2] = $18;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $21;
 HEAP8[$10>>0]=0&255;HEAP8[$10+1>>0]=(0>>8)&255;HEAP8[$10+2>>0]=(0>>16)&255;HEAP8[$10+3>>0]=0>>24;
 $_0$sroa$0$0 = 0;
 STACKTOP = sp;return ($_0$sroa$0$0|0);
}
function __ZN5alloc4heap8box_free17hf07ec92f73b319e5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN4core3ptr13drop_in_place17hb7907b3dcb11f012E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi($3|0,($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$arg0>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  __ZN5alloc4heap8box_free17hf07ec92f73b319e5E($15,$16);
  ___resumeException($13|0);
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 $10 = HEAP32[$arg0>>2]|0;
 $11 = ((($6)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 ___rust_dealloc($10,$8,$12);
 return;
}
function __ZN4core3ptr13drop_in_place17h19cbc04135e7a0ccE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($arg0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$arg0>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  __ZN5alloc4heap8box_free17hf07ec92f73b319e5E($16,$17);
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = HEAP32[$arg0>>2]|0;
 $12 = ((($7)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 ___rust_dealloc($11,$9,$13);
 return;
}
function __ZN4core3ptr13drop_in_place17h3090aaf055f7624fE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$1>>0]=0&255;HEAP8[$1+1>>0]=(0>>8)&255;HEAP8[$1+2>>0]=(0>>16)&255;HEAP8[$1+3>>0]=0>>24;
 return;
}
function __ZN3std6thread5local2os13destroy_value17h3c298d9b34ef294dE($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i9 = 0, $_x$i = 0, $cond$i$i = 0, $cond$i$i7 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_x$i = sp + 4|0;
 $ptr1 = sp;
 HEAP32[$ptr1>>2] = $ptr;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $cond$i$i = ($1|0)==(0);
 $2 = $ptr;
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(122,($0|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   __ZN4core3ptr13drop_in_place17h90c04b5ecf0230a4E($ptr1);
   ___resumeException($8|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $1;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 HEAP32[$_x$i>>2] = $2;
 __ZN4core3ptr13drop_in_place17h90c04b5ecf0230a4E($_x$i);
 $6 = HEAP32[$0>>2]|0;
 $cond$i$i7 = ($6|0)==(0);
 if (!($cond$i$i7)) {
  $_0$0$i$i9 = $6;
  (_pthread_setspecific(($_0$0$i$i9|0),(0|0))|0);
  STACKTOP = sp;return;
 }
 $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E($0)|0);
 $_0$0$i$i9 = $7;
 (_pthread_setspecific(($_0$0$i$i9|0),(0|0))|0);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h90c04b5ecf0230a4E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i$i = ($2|0)==(0);
 if (!($cond$i$i$i)) {
  $3 = ((($0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($0)) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_vi($8|0,($4|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    $21 = HEAP32[$3>>2]|0;
    $22 = HEAP32[$6>>2]|0;
    __ZN5alloc4heap8box_free17hf07ec92f73b319e5E($21,$22);
    $23 = HEAP32[$arg0>>2]|0;
    __ZN5alloc4heap8box_free17hc1904d63d9d7176dE($23);
    ___resumeException($19|0);
    // unreachable;
   }
   $11 = HEAP32[$6>>2]|0;
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = HEAP32[$3>>2]|0;
    $16 = ((($11)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    ___rust_dealloc($15,$13,$17);
   }
  }
 }
 $18 = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($18,20,4);
 return;
}
function __ZN5alloc4heap8box_free17hc1904d63d9d7176dE($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,20,4);
 return;
}
function __ZN4core3ptr13drop_in_place17hed93d1d506b1af45E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17h30f933b89f146ba6E($0,$self,$buf$ptr,$buf$meta) {
 $0 = $0|0;
 $self = $self|0;
 $buf$ptr = $buf$ptr|0;
 $buf$meta = $buf$meta|0;
 var $$sink$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i$i = 0, $_9$sroa$4$0$$sroa_idx5$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($buf$meta|0)>(-1);
 $_0$0$sroa$speculated$i$i$i$i$i = $1 ? $buf$meta : 2147483647;
 $2 = (_write(2,$buf$ptr,$_0$0$sroa$speculated$i$i$i$i$i)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  $4 = (___errno_location()|0);
  $5 = HEAP32[$4>>2]|0;
  $$sink$i$i$i = 1;$11 = $5;$8 = 0;
 } else {
  $$sink$i$i$i = 0;$11 = 0;$8 = $2;
 }
 HEAP32[$0>>2] = $$sink$i$i$i;
 $_9$sroa$4$0$$sroa_idx5$i$i = ((($0)) + 4|0);
 $6 = $_9$sroa$4$0$$sroa_idx5$i$i;
 $7 = $6;
 HEAP32[$7>>2] = $8;
 $9 = (($6) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $11;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17hf67eedd4c446a7c8E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17hac9d2aee4d26b5fcE($0,$self,$buf$ptr,$buf$meta) {
 $0 = $0|0;
 $self = $self|0;
 $buf$ptr = $buf$ptr|0;
 $buf$meta = $buf$meta|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$self>>2]|0;
 __ZN3std2io5Write9write_all17hb1485fae366d9e77E($0,$1,$buf$ptr,$buf$meta);
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h5b82451d78bd8664E($0,$self,$fmt) {
 $0 = $0|0;
 $self = $self|0;
 $fmt = $fmt|0;
 var $1 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_4 = sp;
 $1 = HEAP32[$self>>2]|0;
 ;HEAP32[$_4>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_4+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_4+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_4+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_4+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_4+20>>2]=HEAP32[$fmt+20>>2]|0;
 __ZN3std2io5Write9write_fmt17hfa66eccf7643f23aE($0,$1,$_4);
 STACKTOP = sp;return;
}
function __ZN3std2io5Write9write_fmt17hfa66eccf7643f23aE($0,$self,$fmt) {
 $0 = $0|0;
 $self = $self|0;
 $fmt = $fmt|0;
 var $$sroa_idx = 0, $$sroa_idx17 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_11 = 0, $_3$i$i$i = 0, $_4$sroa$0$i$i$i$i = 0, $_5$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i$i = 0, $_5$sroa$0$0$$sroa_idx = 0, $_5$sroa$4$0$$sroa_raw_idx$i = 0, $_5$sroa$4$i = 0, $_5$sroa$411$0$$sroa_idx$i = 0, $_5$sroa$5$0$$sroa_idx$i = 0, $cond$i = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $output = 0, $switch = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $err$i$i$i$i = sp + 120|0;
 $_5$i$i$i$i$i = sp + 104|0;
 $_5$sroa$4$i = sp + 132|0;
 $err$i$i$i$i$i$i$i = sp + 88|0;
 $_5$i$i$i$i$i$i$i$i = sp + 72|0;
 $_4$sroa$0$i$i$i$i = sp + 56|0;
 $_3$i$i$i = sp + 40|0;
 $_11 = sp + 16|0;
 $output = sp;
 HEAP32[$output>>2] = $self;
 $_5$sroa$0$0$$sroa_idx = ((($output)) + 4|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx>>2] = 0;
 ;HEAP32[$_11>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_11+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_11+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_11+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_11+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_11+20>>2]=HEAP32[$fmt+20>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_iiii(102,($output|0),(80|0),($_11|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  __ZN4core3ptr13drop_in_place17h8134895c89cb0ec2E($output);
  ___resumeException($39|0);
  // unreachable;
 }
 $switch = ($1<<24>>24)==(0);
 do {
  if ($switch) {
   HEAP32[$0>>2] = 0;
  } else {
   $4 = ((($output)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(1);
   if ($6) {
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_viii(123,($_3$i$i$i|0),(5698|0),15);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $39 = ___cxa_find_matching_catch_2()|0;
    $40 = tempRet0;
    __ZN4core3ptr13drop_in_place17h8134895c89cb0ec2E($output);
    ___resumeException($39|0);
    // unreachable;
   }
   ;HEAP32[$_4$sroa$0$i$i$i$i>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
   $9 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    ___rust_oom($_5$i$i$i$i$i$i$i$i);
    // unreachable;
   }
   ;HEAP32[$9>>2]=HEAP32[$_4$sroa$0$i$i$i$i>>2]|0;HEAP32[$9+4>>2]=HEAP32[$_4$sroa$0$i$i$i$i+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$_4$sroa$0$i$i$i$i+8>>2]|0;
   $11 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    ___rust_oom($_5$i$i$i$i$i);
    // unreachable;
   } else {
    HEAP8[$11>>0] = 16;
    $_5$sroa$4$0$$sroa_raw_idx$i = ((($11)) + 1|0);
    ;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
    $_5$sroa$411$0$$sroa_idx$i = ((($11)) + 4|0);
    HEAP32[$_5$sroa$411$0$$sroa_idx$i>>2] = $9;
    $_5$sroa$5$0$$sroa_idx$i = ((($11)) + 8|0);
    HEAP32[$_5$sroa$5$0$$sroa_idx$i>>2] = 104;
    $13 = $11;
    HEAP32[$0>>2] = 1;
    $$sroa_idx = ((($0)) + 4|0);
    HEAP32[$$sroa_idx>>2] = 2;
    $$sroa_idx17 = ((($0)) + 8|0);
    HEAP32[$$sroa_idx17>>2] = $13;
    break;
   }
  }
 } while(0);
 $14 = HEAP32[$_5$sroa$0$0$$sroa_idx>>2]|0;
 $cond$i = ($14|0)==(0);
 if ($cond$i) {
  STACKTOP = sp;return;
 }
 $15 = ((($output)) + 8|0);
 $16 = HEAP8[$15>>0]|0;
 $switch$i = ($16&255)<(2);
 if ($switch$i) {
  STACKTOP = sp;return;
 }
 $17 = ((($output)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($18)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 __THREW__ = 0;
 invoke_vi($23|0,($20|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $35 = HEAP32[$19>>2]|0;
  $36 = HEAP32[$21>>2]|0;
  __ZN5alloc4heap8box_free17he2c7ab366ae97083E($35,$36);
  $37 = HEAP32[$17>>2]|0;
  __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($37);
  ___resumeException($33|0);
  // unreachable;
 }
 $26 = HEAP32[$21>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  $30 = HEAP32[$19>>2]|0;
  $31 = ((($26)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  ___rust_dealloc($30,$28,$32);
 }
 $38 = HEAP32[$17>>2]|0;
 ___rust_dealloc($38,12,4);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17he2c7ab366ae97083E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h8134895c89cb0ec2E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $cond$i = ($1|0)==(0);
 if ($cond$i) {
  return;
 }
 $2 = ((($arg0)) + 8|0);
 __ZN4core3ptr13drop_in_place17hff6abf3e64b8d9d6E($2);
 return;
}
function __ZN4core3ptr13drop_in_place17hff6abf3e64b8d9d6E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0;
 $switch = ($0&255)<(2);
 if ($switch) {
  return;
 }
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($4|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  $19 = HEAP32[$3>>2]|0;
  $20 = HEAP32[$5>>2]|0;
  __ZN5alloc4heap8box_free17he2c7ab366ae97083E($19,$20);
  $21 = HEAP32[$1>>2]|0;
  __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($21);
  ___resumeException($17|0);
  // unreachable;
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = HEAP32[$3>>2]|0;
  $15 = ((($10)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  ___rust_dealloc($14,$12,$16);
 }
 $22 = HEAP32[$1>>2]|0;
 ___rust_dealloc($22,12,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h645ed031612dfee1E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $_2$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i$i,$1,1);
 return;
}
function __ZN281__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h701ec9dd2fe1bf4dE($retVal,$self) {
 $retVal = $retVal|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $_2$sroa$0$0$copyload2$i$i$i = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_2$sroa$0$0$copyload2$i$i$i = HEAP32[$self>>2]|0;
 $0 = ((($self)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$retVal>>2] = $_2$sroa$0$0$copyload2$i$i$i;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $1;
 return;
}
function __ZN3std5error5Error5cause17h3333ff42cbf45fbfE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std5error5Error7type_id17hd20849972e300d39E($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (1064929043);
 return 341575659;
}
function __ZN282__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h3af2178b22ae2801E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $_2$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_2$sroa$0$0$copyload2$i$i$i$i = HEAP32[$self>>2]|0;
 $0 = ((($self)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h3950e9a41b16bb75E($_2$sroa$0$0$copyload2$i$i$i$i,$1,$f)|0);
 return ($2|0);
}
function __ZN280__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h013eceb1853d799dE($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $_13 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_13 = sp + 12|0;
 $builder = sp;
 __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder,$__arg_0,5713,11);
 HEAP32[$_13>>2] = $self;
 (__ZN4core3fmt8builders10DebugTuple5field17h80aed126205c0495E($builder,$_13,136)|0);
 $0 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr13drop_in_place17hd5346f9d88e6ac7bE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h08f5116eeddafd3cE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_2$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $_2$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hf94a8588ca8ba088E($_2$sroa$0$0$copyload2$i$i$i$i,$2,$f)|0);
 return ($3|0);
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h841b048bfd8be0e9E($self,$s$ptr,$s$meta) {
 $self = $self|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var $$pre = 0, $$sink46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $cond$i32 = 0, $e$sroa$0$0$$sroa_idx = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp;
 $0 = HEAP32[$self>>2]|0;
 __ZN3std2io5Write9write_all17hb1485fae366d9e77E($_3,$0,$s$ptr,$s$meta);
 $1 = HEAP32[$_3>>2]|0;
 $switch = ($1|0)==(1);
 if (!($switch)) {
  $$sink46 = 0;
  STACKTOP = sp;return ($$sink46|0);
 }
 $e$sroa$0$0$$sroa_idx = ((($_3)) + 4|0);
 $2 = $e$sroa$0$0$$sroa_idx;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $cond$i32 = ($9|0)==(0);
 $$pre = ((($self)) + 8|0);
 if (!($cond$i32)) {
  __THREW__ = 0;
  invoke_vi(124,($$pre|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch_2()|0;
   $13 = tempRet0;
   HEAP32[$8>>2] = 1;
   $14 = $$pre;
   $15 = $14;
   HEAP32[$15>>2] = $4;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = $7;
   ___resumeException($12|0);
   // unreachable;
  }
 }
 HEAP32[$8>>2] = 1;
 $18 = $$pre;
 $19 = $18;
 HEAP32[$19>>2] = $4;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $7;
 $$sink46 = 1;
 STACKTOP = sp;return ($$sink46|0);
}
function __ZN4core3fmt5Write10write_char17h0192ce65845ccc6fE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$pre$i = 0, $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $$sink46$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10 = 0, $_3$i = 0, $cond$i32$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, $len$1$i = 0, $len$2$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $_10 = sp + 12|0;
 HEAP32[$_10>>2] = 0;
 $0 = ($c>>>0)<(128);
 if ($0) {
  $1 = $c&255;
  HEAP8[$_10>>0] = $1;
  $len$2$i = 1;
 } else {
  $2 = ($c>>>0)<(2048);
  do {
   if ($2) {
    $3 = $c >>> 6;
    $4 = $3 & 31;
    $5 = $4&255;
    $6 = $5 | -64;
    $$sink$i = $6;$$sink$sink$i = 1;$$sink15$i = $_10;$len$1$i = 2;
   } else {
    $7 = ($c>>>0)<(65536);
    if ($7) {
     $8 = $c >>> 12;
     $9 = $8 & 15;
     $10 = $9&255;
     $11 = $10 | -32;
     HEAP8[$_10>>0] = $11;
     $12 = $c >>> 6;
     $13 = $12 & 63;
     $14 = $13&255;
     $15 = ((($_10)) + 1|0);
     $16 = $14 | -128;
     $$sink$i = $16;$$sink$sink$i = 2;$$sink15$i = $15;$len$1$i = 3;
     break;
    } else {
     $17 = $c >>> 18;
     $18 = $17 & 7;
     $19 = $18&255;
     $20 = $19 | -16;
     HEAP8[$_10>>0] = $20;
     $21 = $c >>> 12;
     $22 = $21 & 63;
     $23 = $22&255;
     $24 = ((($_10)) + 1|0);
     $25 = $23 | -128;
     HEAP8[$24>>0] = $25;
     $26 = $c >>> 6;
     $27 = $26 & 63;
     $28 = $27&255;
     $29 = ((($_10)) + 2|0);
     $30 = $28 | -128;
     $$sink$i = $30;$$sink$sink$i = 3;$$sink15$i = $29;$len$1$i = 4;
     break;
    }
   }
  } while(0);
  HEAP8[$$sink15$i>>0] = $$sink$i;
  $31 = $c & 63;
  $32 = $31&255;
  $33 = (($_10) + ($$sink$sink$i)|0);
  $34 = $32 | -128;
  HEAP8[$33>>0] = $34;
  $len$2$i = $len$1$i;
 }
 $35 = HEAP32[$self>>2]|0;
 __ZN3std2io5Write9write_all17hb1485fae366d9e77E($_3$i,$35,$_10,$len$2$i);
 $36 = HEAP32[$_3$i>>2]|0;
 $switch$i = ($36|0)==(1);
 if (!($switch$i)) {
  $$sink46$i = 0;
  STACKTOP = sp;return ($$sink46$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_3$i)) + 4|0);
 $37 = $e$sroa$0$0$$sroa_idx$i;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($self)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $cond$i32$i = ($44|0)==(0);
 $$pre$i = ((($self)) + 8|0);
 if (!($cond$i32$i)) {
  __THREW__ = 0;
  invoke_vi(124,($$pre$i|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   HEAP32[$43>>2] = 1;
   $49 = $$pre$i;
   $50 = $49;
   HEAP32[$50>>2] = $39;
   $51 = (($49) + 4)|0;
   $52 = $51;
   HEAP32[$52>>2] = $42;
   ___resumeException($47|0);
   // unreachable;
  }
 }
 HEAP32[$43>>2] = 1;
 $53 = $$pre$i;
 $54 = $53;
 HEAP32[$54>>2] = $39;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $42;
 $$sink46$i = 1;
 STACKTOP = sp;return ($$sink46$i|0);
}
function __ZN4core3fmt5Write9write_fmt17h4171583f8e30087fE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self;
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0;
 $0 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6,152,$_8)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr13drop_in_place17h0fb24cfdfb717612E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h139d2b64d1bd5f27E($self,$s$ptr,$s$meta) {
 $self = $self|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var $$pre$i = 0, $$sink46$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$i = 0, $cond$i32$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17hb1485fae366d9e77E($_3$i,$1,$s$ptr,$s$meta);
 $2 = HEAP32[$_3$i>>2]|0;
 $switch$i = ($2|0)==(1);
 if (!($switch$i)) {
  $$sink46$i = 0;
  STACKTOP = sp;return ($$sink46$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_3$i)) + 4|0);
 $3 = $e$sroa$0$0$$sroa_idx$i;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $cond$i32$i = ($10|0)==(0);
 $$pre$i = ((($0)) + 8|0);
 if (!($cond$i32$i)) {
  __THREW__ = 0;
  invoke_vi(124,($$pre$i|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch_2()|0;
   $14 = tempRet0;
   HEAP32[$9>>2] = 1;
   $15 = $$pre$i;
   $16 = $15;
   HEAP32[$16>>2] = $5;
   $17 = (($15) + 4)|0;
   $18 = $17;
   HEAP32[$18>>2] = $8;
   ___resumeException($13|0);
   // unreachable;
  }
 }
 HEAP32[$9>>2] = 1;
 $19 = $$pre$i;
 $20 = $19;
 HEAP32[$20>>2] = $5;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 $$sink46$i = 1;
 STACKTOP = sp;return ($$sink46$i|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h49fa34020e9d106eE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN4core3fmt5Write10write_char17h0192ce65845ccc6fE($0,$c)|0);
 return ($1|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h94e4033f94db61b9E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0;
 HEAP32[$_6$i>>2] = $0;
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0;
 $1 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6$i,152,$_8$i)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN3std2io5Write9write_all17hb1485fae366d9e77E($0,$self,$1,$2) {
 $0 = $0|0;
 $self = $self|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$sroa_idx = 0, $$sroa_idx54 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$sroa$speculated$i$i$i$i$i = 0, $_27$sroa$0$0$$sroa_idx = 0, $_3$i$i$i = 0, $_4$sroa$0$i$i$i$i = 0, $_5$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i$i = 0, $_5$sroa$4$0$$sroa_raw_idx$i = 0, $_5$sroa$4$i = 0, $_5$sroa$411$0$$sroa_idx$i = 0, $_5$sroa$5$0$$sroa_idx$i = 0, $_8 = 0, $_9$sroa$4$0$$sroa_idx5$i$i = 0, $buf$sroa$0$094$ph = 0, $buf$sroa$5$093$ph = 0, $cond$i = 0, $cond1 = 0, $cond64 = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $or$cond = 0;
 var $switch = 0, $switch$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $err$i$i$i$i = sp + 96|0;
 $_5$i$i$i$i$i = sp + 80|0;
 $_5$sroa$4$i = sp + 108|0;
 $err$i$i$i$i$i$i$i = sp + 64|0;
 $_5$i$i$i$i$i$i$i$i = sp + 48|0;
 $_4$sroa$0$i$i$i$i = sp + 32|0;
 $_3$i$i$i = sp + 16|0;
 $_8 = sp;
 $3 = ($2|0)==(0);
 L1: do {
  if (!($3)) {
   $_9$sroa$4$0$$sroa_idx5$i$i = ((($_8)) + 4|0);
   $buf$sroa$0$094$ph = $1;$buf$sroa$5$093$ph = $2;
   L3: while(1) {
    $4 = ($buf$sroa$5$093$ph|0)>(-1);
    $_0$0$sroa$speculated$i$i$i$i$i = $4 ? $buf$sroa$5$093$ph : 2147483647;
    while(1) {
     $5 = (_write(2,$buf$sroa$0$094$ph,$_0$0$sroa$speculated$i$i$i$i$i)|0);
     $6 = ($5|0)==(-1);
     if ($6) {
      $7 = (___errno_location()|0);
      $8 = HEAP32[$7>>2]|0;
      $12 = 0;$15 = $8;$9 = 1;
     } else {
      $12 = $5;$15 = 0;$9 = 0;
     }
     HEAP32[$_8>>2] = $9;
     $10 = $_9$sroa$4$0$$sroa_idx5$i$i;
     $11 = $10;
     HEAP32[$11>>2] = $12;
     $13 = (($10) + 4)|0;
     $14 = $13;
     HEAP32[$14>>2] = $15;
     $switch = ($9|0)==(1);
     $16 = $12&255;
     $17 = $15;
     if (!($switch)) {
      break;
     }
     $30 = (_bitshift64Lshr(($12|0),($15|0),8)|0);
     $31 = tempRet0;
     $32 = $30&255;
     $33 = $12&255;
     $trunc$i$clear = $33 & 3;
     switch ($trunc$i$clear<<24>>24) {
     case 0:  {
      $cond64 = ($15|0)==(4);
      if (!($cond64)) {
       label = 16;
       break L3;
      }
      break;
     }
     case 1:  {
      $34 = $32;
      label = 22;
      break;
     }
     case 2:  {
      $$pre = HEAP8[$17>>0]|0;
      $34 = $$pre;
      label = 22;
      break;
     }
     default: {
      label = 19;
      break L3;
     }
     }
     if ((label|0) == 22) {
      label = 0;
      $35 = ($34<<24>>24)==(15);
      if (!($35)) {
       label = 16;
       break L3;
      }
     }
     $cond$i = ($9|0)==(0);
     $switch$i = ($16&255)<(2);
     $or$cond = $cond$i | $switch$i;
     if (!($or$cond)) {
      $37 = ((($17)) + 4|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($17)) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      invoke_vi($41|0,($38|0));
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       label = 29;
       break L3;
      }
      $44 = HEAP32[$39>>2]|0;
      $45 = ((($44)) + 4|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0);
      if (!($47)) {
       $48 = HEAP32[$37>>2]|0;
       $49 = ((($44)) + 8|0);
       $50 = HEAP32[$49>>2]|0;
       ___rust_dealloc($48,$46,$50);
      }
      ___rust_dealloc($17,12,4);
     }
    }
    $cond1 = ($12|0)==(0);
    if ($cond1) {
     label = 9;
     break;
    }
    $24 = ($buf$sroa$5$093$ph>>>0)<($12>>>0);
    if ($24) {
     label = 15;
     break;
    }
    $55 = (($buf$sroa$0$094$ph) + ($12)|0);
    $56 = (($buf$sroa$5$093$ph) - ($12))|0;
    $57 = ($56|0)==(0);
    if ($57) {
     break L1;
    } else {
     $buf$sroa$0$094$ph = $55;$buf$sroa$5$093$ph = $56;
    }
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_viii(123,($_3$i$i$i|0),(5724|0),28);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $58 = ___cxa_find_matching_catch_2()|0;
      $59 = tempRet0;
      __ZN4core3ptr13drop_in_place17h578a67b9e8187303E($_8);
      ___resumeException($58|0);
      // unreachable;
     }
     ;HEAP32[$_4$sroa$0$i$i$i$i>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
     $20 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
     $21 = ($20|0)==(0|0);
     if ($21) {
      ___rust_oom($_5$i$i$i$i$i$i$i$i);
      // unreachable;
     }
     ;HEAP32[$20>>2]=HEAP32[$_4$sroa$0$i$i$i$i>>2]|0;HEAP32[$20+4>>2]=HEAP32[$_4$sroa$0$i$i$i$i+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$_4$sroa$0$i$i$i$i+8>>2]|0;
     $22 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
     $23 = ($22|0)==(0|0);
     if ($23) {
      ___rust_oom($_5$i$i$i$i$i);
      // unreachable;
     } else {
      HEAP8[$22>>0] = 14;
      $_5$sroa$4$0$$sroa_raw_idx$i = ((($22)) + 1|0);
      ;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
      $_5$sroa$411$0$$sroa_idx$i = ((($22)) + 4|0);
      HEAP32[$_5$sroa$411$0$$sroa_idx$i>>2] = $20;
      $_5$sroa$5$0$$sroa_idx$i = ((($22)) + 8|0);
      HEAP32[$_5$sroa$5$0$$sroa_idx$i>>2] = 104;
      $36 = $22;
      HEAP32[$0>>2] = 1;
      $$sroa_idx = ((($0)) + 4|0);
      HEAP32[$$sroa_idx>>2] = 2;
      $$sroa_idx54 = ((($0)) + 8|0);
      HEAP32[$$sroa_idx54>>2] = $36;
      break;
     }
    }
    else if ((label|0) == 15) {
     __THREW__ = 0;
     invoke_vii(125,($12|0),($buf$sroa$5$093$ph|0));
     $25 = __THREW__; __THREW__ = 0;
     $58 = ___cxa_find_matching_catch_2()|0;
     $59 = tempRet0;
     __ZN4core3ptr13drop_in_place17h578a67b9e8187303E($_8);
     ___resumeException($58|0);
     // unreachable;
    }
    else if ((label|0) == 16) {
     HEAP32[$0>>2] = 1;
     $_27$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
     $26 = $_27$sroa$0$0$$sroa_idx;
     $27 = $26;
     HEAP32[$27>>2] = $12;
     $28 = (($26) + 4)|0;
     $29 = $28;
     HEAP32[$29>>2] = $15;
    }
    else if ((label|0) == 19) {
     // unreachable;
    }
    else if ((label|0) == 29) {
     $51 = ___cxa_find_matching_catch_2()|0;
     $52 = tempRet0;
     $53 = HEAP32[$37>>2]|0;
     $54 = HEAP32[$39>>2]|0;
     __ZN5alloc4heap8box_free17he2c7ab366ae97083E($53,$54);
     __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($17);
     ___resumeException($51|0);
     // unreachable;
    }
   } while(0);
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h578a67b9e8187303E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $cond = ($0|0)==(0);
 if ($cond) {
  return;
 }
 $1 = ((($arg0)) + 4|0);
 __ZN4core3ptr13drop_in_place17hff6abf3e64b8d9d6E($1);
 return;
}
function __ZN3std3sys3imp9backtrace7tracing3imp16unwind_backtrace17h30c609a3f977068cE($0,$frames$ptr) {
 $0 = $0|0;
 $frames$ptr = $frames$ptr|0;
 var $$sink = 0, $$sink11 = 0, $$sroa_idx = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$i$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i = 0, $_5$sroa$4$0$$sroa_raw_idx$i$i = 0, $_5$sroa$4$i$i = 0, $_5$sroa$411$0$$sroa_idx$i$i = 0, $_5$sroa$5$0$$sroa_idx$i$i = 0, $cx = 0;
 var $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $err$i$i$i$i$i = sp + 64|0;
 $_5$i$i$i$i$i$i = sp + 48|0;
 $_5$sroa$4$i$i = sp + 76|0;
 $err$i$i$i$i$i$i = sp + 32|0;
 $_5$i$i$i$i$i$i$i = sp + 16|0;
 $cx = sp;
 HEAP32[$cx>>2] = 0;
 $1 = ((($cx)) + 4|0);
 HEAP32[$1>>2] = $frames$ptr;
 $2 = ((($cx)) + 8|0);
 HEAP32[$2>>2] = 100;
 $3 = (__Unwind_Backtrace((126|0),($cx|0))|0);
 switch ($3|0) {
 case 9: case 5: case 3:  {
  $4 = HEAP32[$cx>>2]|0;
  HEAP32[$0>>2] = 0;
  $$sink = $4;$$sink11 = 0;
  $10 = (((($0)) + 4|0) + ($$sink11<<2)|0);
  HEAP32[$10>>2] = $$sink;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $5 = (___rust_alloc(4,4,$err$i$i$i$i$i$i)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  ___rust_oom($_5$i$i$i$i$i$i$i);
  // unreachable;
 }
 HEAP32[$5>>2] = $3;
 $7 = (___rust_alloc(12,4,$err$i$i$i$i$i)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  ___rust_oom($_5$i$i$i$i$i$i);
  // unreachable;
 }
 HEAP8[$7>>0] = 16;
 $_5$sroa$4$0$$sroa_raw_idx$i$i = ((($7)) + 1|0);
 ;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$_5$sroa$4$i$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$_5$sroa$4$i$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$_5$sroa$4$i$i+2>>0]|0;
 $_5$sroa$411$0$$sroa_idx$i$i = ((($7)) + 4|0);
 HEAP32[$_5$sroa$411$0$$sroa_idx$i$i>>2] = $5;
 $_5$sroa$5$0$$sroa_idx$i$i = ((($7)) + 8|0);
 HEAP32[$_5$sroa$5$0$$sroa_idx$i$i>>2] = 176;
 $9 = $7;
 HEAP32[$0>>2] = 1;
 $$sroa_idx = ((($0)) + 4|0);
 HEAP32[$$sroa_idx>>2] = 2;
 $$sink = $9;$$sink11 = 1;
 $10 = (((($0)) + 4|0) + ($$sink11<<2)|0);
 HEAP32[$10>>2] = $$sink;
 STACKTOP = sp;return;
}
function __ZN52__LT__BP_const_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h3b9afd7b6ed6ce83E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_25$i = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_25$i = sp;
 $0 = ((($f)) + 8|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$f>>2]|0;
 $8 = (__ZN4core3fmt9Formatter9alternate17h059b3b7b0d842031E($f)|0);
 $9 = HEAP32[$f>>2]|0;
 if ($8) {
  $10 = $9 | 8;
  HEAP32[$f>>2] = $10;
  $11 = HEAP32[$0>>2]|0;
  $cond$i = ($11|0)==(0);
  if ($cond$i) {
   HEAP32[$0>>2] = 1;
   $12 = ((($f)) + 12|0);
   HEAP32[$12>>2] = 10;
   $14 = $10;
  } else {
   $14 = $10;
  }
 } else {
  $14 = $9;
 }
 $13 = $14 | 4;
 HEAP32[$f>>2] = $13;
 $15 = HEAP32[$self>>2]|0;
 HEAP32[$_25$i>>2] = $15;
 $16 = (__ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17hd0e45f196424d9eeE($_25$i,$f)|0);
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $3;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $6;
 HEAP32[$f>>2] = $7;
 STACKTOP = sp;return ($16|0);
}
function __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h7c3856816e7fdc25E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$$$$i$i$i = 0, $$$$i$i$i = 0, $$$i$i$i = 0, $$arith = 0, $$overflow = 0, $$pn = 0, $$sink = 0, $$sink$i$i$i$i = 0, $$sink3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $112$phi = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i12$i$i$i$i = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_0$0$sroa$speculated$i$i$i$i$i = 0, $_10$sroa$4$0$i$i = 0, $_18 = 0, $_5$sroa$10$1$ph$i = 0, $_5$sroa$15$1$ph$i = 0, $_7 = 0;
 var $a$0$lcssa$i$i = 0, $a$049$i$i = 0, $ch$0$i$i$i$i = 0, $ch$1$i$i$i$i = 0, $iter$sroa$5$0$i$i$i = 0, $iter1$sroa$0$0$i$i$i = 0, $needle_end$0$i$i$i = 0, $not$$i$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i48$i$i = 0, $phitmp$i$i$i$i = 0, $switch = 0, $switch$i = 0, $switch$i$i = 0, $switch1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_18 = sp + 8|0;
 $_7 = sp;
 $1 = ((($self)) + 73|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
 $4 = ((($self)) + 72|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L5: do {
  if ($6) {
   HEAP8[$4>>0] = 1;
   __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h7c3856816e7fdc25E($_7,$self);
   $7 = HEAP32[$_7>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    label = 7;
   } else {
    $13 = ((($_7)) + 4|0);
    $10 = HEAP32[$13>>2]|0;
    $14 = ($10|0)==(0);
    if ($14) {
     label = 7;
    } else {
     HEAP32[$0>>2] = $7;
     $9 = ((($0)) + 4|0);
     HEAP32[$9>>2] = $10;
    }
   }
   do {
    if ((label|0) == 7) {
     $11 = HEAP8[$1>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      break L5;
     } else {
      HEAP32[$0>>2] = 0;
      break;
     }
    }
   } while(0);
   STACKTOP = sp;return;
  }
 } while(0);
 $15 = ((($self)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$self>>2]|0;
 $switch$i = ($17|0)==(1);
 $18 = ((($self)) + 8|0);
 do {
  if ($switch$i) {
   $30 = ((($18)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(-1);
   $33 = ((($self)) + 52|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($self)) + 56|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($self)) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   if ($32) {
    __ZN4core3str7pattern14TwoWaySearcher9next_back17h2fec93875d8d83d5E($_18,$18,$16,$34,$36,$38,1);
    break;
   } else {
    __ZN4core3str7pattern14TwoWaySearcher9next_back17h2fec93875d8d83d5E($_18,$18,$16,$34,$36,$38,0);
    break;
   }
  } else {
   $19 = ((($self)) + 32|0);
   $20 = ((($18)) + 28|0);
   $21 = ((($self)) + 52|0);
   $22 = ((($self)) + 56|0);
   $23 = ((($self)) + 60|0);
   $24 = ((($self)) + 40|0);
   $25 = ((($18)) + 12|0);
   $26 = ((($self)) + 24|0);
   $27 = ((($self)) + 4|0);
   $28 = ((($27)) + 9|0);
   $29 = ((($27)) + 4|0);
   $39 = 0;
   L24: while(1) {
    $switch$i$i = ($39|0)==(1);
    if (!($switch$i$i)) {
     $40 = HEAP8[$28>>0]|0;
     $41 = ($40<<24>>24)!=(0);
     $42 = $41 ^ 1;
     $43 = $42&1;
     HEAP8[$28>>0] = $43;
     $44 = HEAP32[$29>>2]|0;
     $45 = HEAP32[$21>>2]|0;
     $46 = ($44|0)==(0);
     $47 = ($45|0)==($44|0);
     $or$cond$i$i$i$i$i$i = $46 | $47;
     if (!($or$cond$i$i$i$i$i$i)) {
      $48 = ($45>>>0)>($44>>>0);
      if (!($48)) {
       label = 19;
       break;
      }
      $49 = (($16) + ($44)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = ($50<<24>>24)>(-65);
      if (!($51)) {
       label = 19;
       break;
      }
     }
     do {
      if ($46) {
       $$sink$i$i$i$i = 0;$_10$sroa$4$0$i$i = 0;
      } else {
       $57 = (($16) + ($44)|0);
       $54 = ((($57)) + -1|0);
       $53 = HEAP8[$54>>0]|0;
       $63 = ($53<<24>>24)>(-1);
       if ($63) {
        $52 = $53&255;
        $$sink$i$i$i$i = 1;$_10$sroa$4$0$i$i = $52;
        break;
       }
       $55 = ($54|0)==($16|0);
       if ($55) {
        $ch$1$i$i$i$i = 0;
       } else {
        $56 = ((($57)) + -2|0);
        $58 = HEAP8[$56>>0]|0;
        $59 = $58 & 31;
        $60 = $59&255;
        $61 = $58 & -64;
        $62 = ($61<<24>>24)==(-128);
        if ($62) {
         $64 = ($56|0)==($16|0);
         if ($64) {
          $ch$0$i$i$i$i = 0;
         } else {
          $65 = ((($57)) + -3|0);
          $66 = HEAP8[$65>>0]|0;
          $67 = $66 & 15;
          $68 = $67&255;
          $69 = $66 & -64;
          $70 = ($69<<24>>24)==(-128);
          if ($70) {
           $71 = ($65|0)==($16|0);
           if ($71) {
            $_0$0$i12$i$i$i$i = 0;
           } else {
            $72 = ((($57)) + -4|0);
            $73 = HEAP8[$72>>0]|0;
            $phitmp$i$i$i$i = $73 & 7;
            $_0$0$i12$i$i$i$i = $phitmp$i$i$i$i;
           }
           $74 = $_0$0$i12$i$i$i$i&255;
           $75 = $74 << 6;
           $76 = $66 & 63;
           $77 = $76&255;
           $78 = $75 | $77;
           $ch$0$i$i$i$i = $78;
          } else {
           $ch$0$i$i$i$i = $68;
          }
         }
         $79 = $ch$0$i$i$i$i << 6;
         $80 = $58 & 63;
         $81 = $80&255;
         $82 = $79 | $81;
         $ch$1$i$i$i$i = $82;
        } else {
         $ch$1$i$i$i$i = $60;
        }
       }
       $83 = $ch$1$i$i$i$i << 6;
       $84 = $53 & 63;
       $85 = $84&255;
       $86 = $83 | $85;
       $$sink$i$i$i$i = 1;$_10$sroa$4$0$i$i = $86;
      }
     } while(0);
     if ($41) {
      $_5$sroa$10$1$ph$i = $44;$_5$sroa$15$1$ph$i = $44;
      break;
     }
     $switch1$i$i = ($$sink$i$i$i$i|0)==(1);
     if (!($switch1$i$i)) {
      label = 75;
      break;
     }
     $89 = ($_10$sroa$4$0$i$i>>>0)<(128);
     $90 = ($_10$sroa$4$0$i$i>>>0)<(2048);
     $91 = ($_10$sroa$4$0$i$i>>>0)<(65536);
     $$$i$i$i = $91 ? 3 : 4;
     $$$$i$i$i = $90 ? 2 : $$$i$i$i;
     $$$$$i$i$i = $89 ? 1 : $$$$i$i$i;
     $92 = (($44) - ($$$$$i$i$i))|0;
     HEAP32[$29>>2] = $92;
     $39 = $17;
     continue;
    }
    $87 = HEAP32[$19>>2]|0;
    $88 = ($87|0)==(0);
    if ($88) {
     label = 75;
     break;
    }
    $93 = HEAP32[$20>>2]|0;
    $94 = ($93|0)==(-1);
    $95 = HEAP32[$21>>2]|0;
    $96 = HEAP32[$22>>2]|0;
    $97 = HEAP32[$23>>2]|0;
    $98 = (($87) - ($97))|0;
    $99 = ($98>>>0)<($95>>>0);
    L53: do {
     if ($99) {
      $100 = $18;
      $101 = $100;
      $102 = HEAP32[$101>>2]|0;
      $103 = (($100) + 4)|0;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP32[$25>>2]|0;
      $107 = HEAP32[$26>>2]|0;
      $108 = (($87) - ($107))|0;
      $109 = (($108) - ($97))|0;
      $110 = ($109>>>0)<($95>>>0);
      $111 = (($87) - ($106))|0;
      $179 = $98;$180 = $87;
      L55: while(1) {
       $181 = $179;$182 = $180;
       L57: while(1) {
        $112 = $182;$116 = $181;
        while(1) {
         $not$$i$i$i = ($87|0)==($112|0);
         if (!($not$$i$i$i)) {
          break L55;
         }
         $115 = (($16) + ($116)|0);
         $117 = HEAP8[$115>>0]|0;
         $118 = $117 & 63;
         $119 = $118&255;
         $120 = (_bitshift64Shl(1,0,($119|0))|0);
         $121 = tempRet0;
         $122 = $120 & $102;
         $123 = $121 & $105;
         $124 = ($122|0)==(0);
         $125 = ($123|0)==(0);
         $126 = $124 & $125;
         if (!($126)) {
          break;
         }
         HEAP32[$19>>2] = $116;
         if (!($94)) {
          HEAP32[$24>>2] = $97;
         }
         $127 = (($116) - ($97))|0;
         $128 = ($127>>>0)<($95>>>0);
         if ($128) {
          $112$phi = $116;$116 = $127;$112 = $112$phi;
         } else {
          label = 40;
          break L53;
         }
        }
        if ($94) {
         $iter$sroa$5$0$i$i$i = $106;
        } else {
         $129 = HEAP32[$24>>2]|0;
         $130 = ($106>>>0)<=($129>>>0);
         $_0$0$sroa$speculated$i$i$i$i$i = $130 ? $106 : $129;
         $iter$sroa$5$0$i$i$i = $_0$0$sroa$speculated$i$i$i$i$i;
        }
        while(1) {
         $131 = ($iter$sroa$5$0$i$i$i|0)==(0);
         $132 = (($iter$sroa$5$0$i$i$i) + -1)|0;
         if ($131) {
          break L57;
         }
         $134 = ($132>>>0)<($97>>>0);
         if (!($134)) {
          label = 69;
          break L24;
         }
         $135 = (($132) + ($98))|0;
         $136 = ($135>>>0)<($95>>>0);
         if (!($136)) {
          label = 53;
          break L24;
         }
         $137 = (($96) + ($132)|0);
         $138 = HEAP8[$137>>0]|0;
         $139 = (($16) + ($135)|0);
         $140 = HEAP8[$139>>0]|0;
         $141 = ($138<<24>>24)==($140<<24>>24);
         if ($141) {
          $iter$sroa$5$0$i$i$i = $132;
         } else {
          break;
         }
        }
        $142 = (($132) + ($111))|0;
        HEAP32[$19>>2] = $142;
        if (!($94)) {
         HEAP32[$24>>2] = $97;
        }
        $143 = (($142) - ($97))|0;
        $144 = ($143>>>0)<($95>>>0);
        if ($144) {
         $181 = $143;$182 = $142;
        } else {
         label = 40;
         break L53;
        }
       }
       $133 = HEAP32[$24>>2]|0;
       $needle_end$0$i$i$i = $94 ? $97 : $133;
       $iter1$sroa$0$0$i$i$i = $106;
       while(1) {
        $145 = ($iter1$sroa$0$0$i$i$i>>>0)<($needle_end$0$i$i$i>>>0);
        if (!($145)) {
         label = 60;
         break L24;
        }
        $$arith = (($iter1$sroa$0$0$i$i$i) + 1)|0;
        $$overflow = ($iter1$sroa$0$0$i$i$i>>>0)>(4294967294);
        if ($$overflow) {
         label = 60;
         break L24;
        }
        $146 = ($iter1$sroa$0$0$i$i$i>>>0)<($97>>>0);
        if (!($146)) {
         label = 70;
         break L24;
        }
        $147 = (($iter1$sroa$0$0$i$i$i) + ($98))|0;
        $148 = ($147>>>0)<($95>>>0);
        if (!($148)) {
         label = 63;
         break L24;
        }
        $149 = (($96) + ($iter1$sroa$0$0$i$i$i)|0);
        $150 = HEAP8[$149>>0]|0;
        $151 = (($16) + ($147)|0);
        $152 = HEAP8[$151>>0]|0;
        $153 = ($150<<24>>24)==($152<<24>>24);
        if ($153) {
         $iter1$sroa$0$0$i$i$i = $$arith;
        } else {
         break;
        }
       }
       HEAP32[$19>>2] = $108;
       if (!($94)) {
        HEAP32[$24>>2] = $107;
       }
       if ($110) {
        $179 = $109;$180 = $108;
       } else {
        label = 40;
        break L53;
       }
      }
      $113 = ($112|0)==(0);
      $114 = ($95|0)==($112|0);
      $or$cond$i48$i$i = $113 | $114;
      if ($or$cond$i48$i$i) {
       $159 = $112;$a$0$lcssa$i$i = $112;
      } else {
       $a$049$i$i = $112;
       while(1) {
        $154 = ($95>>>0)>($a$049$i$i>>>0);
        if ($154) {
         $155 = (($16) + ($a$049$i$i)|0);
         $156 = HEAP8[$155>>0]|0;
         $157 = ($156<<24>>24)>(-65);
         if ($157) {
          $159 = $112;$a$0$lcssa$i$i = $a$049$i$i;
          break L53;
         }
        }
        $160 = (($a$049$i$i) + -1)|0;
        $161 = ($160|0)==(0);
        $162 = ($95|0)==($160|0);
        $or$cond$i$i$i = $161 | $162;
        if ($or$cond$i$i$i) {
         $159 = $112;$a$0$lcssa$i$i = $160;
         break;
        } else {
         $a$049$i$i = $160;
        }
       }
      }
     } else {
      label = 40;
     }
    } while(0);
    if ((label|0) == 40) {
     label = 0;
     HEAP32[$19>>2] = 0;
     $159 = 0;$a$0$lcssa$i$i = 0;
    }
    $158 = ($a$0$lcssa$i$i>>>0)<=($159>>>0);
    $_0$0$sroa$speculated$i$i$i$i = $158 ? $a$0$lcssa$i$i : $159;
    HEAP32[$19>>2] = $_0$0$sroa$speculated$i$i$i$i;
    $39 = $17;
   }
   if ((label|0) == 19) {
    __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($16,$45,0,$44);
    // unreachable;
   }
   else if ((label|0) == 53) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$135,$95);
    // unreachable;
   }
   else if ((label|0) == 60) {
    HEAP32[$19>>2] = $98;
    if ($94) {
     $_5$sroa$10$1$ph$i = $98;$_5$sroa$15$1$ph$i = $87;
    } else {
     HEAP32[$24>>2] = $97;
     $_5$sroa$10$1$ph$i = $98;$_5$sroa$15$1$ph$i = $87;
    }
   }
   else if ((label|0) == 63) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$147,$95);
    // unreachable;
   }
   else if ((label|0) == 69) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2792,$132,$97);
    // unreachable;
   }
   else if ((label|0) == 70) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2808,$iter1$sroa$0$0$i$i$i,$97);
    // unreachable;
   }
   else if ((label|0) == 75) {
    HEAP32[$_18>>2] = 0;
    break;
   }
   HEAP32[$_18>>2] = 1;
   $163 = ((($_18)) + 4|0);
   HEAP32[$163>>2] = $_5$sroa$10$1$ph$i;
   $164 = ((($_18)) + 8|0);
   HEAP32[$164>>2] = $_5$sroa$15$1$ph$i;
  }
 } while(0);
 $165 = HEAP32[$_18>>2]|0;
 $switch = ($165|0)==(1);
 if ($switch) {
  $171 = ((($_18)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ((($_18)) + 8|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ((($self)) + 68|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (($176) - ($174))|0;
  HEAP32[$175>>2] = $172;
  $$pn = $174;$$sink = $177;
 } else {
  HEAP8[$1>>0] = 1;
  $166 = ((($self)) + 64|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ((($self)) + 68|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) - ($167))|0;
  $$pn = $167;$$sink = $170;
 }
 $$sink3 = (($16) + ($$pn)|0);
 HEAP32[$0>>2] = $$sink3;
 $178 = ((($0)) + 4|0);
 HEAP32[$178>>2] = $$sink;
 STACKTOP = sp;return;
}
function __ZN4core6result13unwrap_failed17hfaeb699b5bac45d4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10 = sp + 40|0;
 $_3 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 6025;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP8[$error>>0] = $0;
 $2 = $msg;
 $3 = $error;
 HEAP32[$_10>>2] = $2;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (93);
 $5 = ((($_10)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_10)) + 12|0);
 HEAP32[$6>>2] = (127);
 HEAP32[$_3>>2] = 2304;
 $7 = ((($_3)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $8 = ((($_3)) + 16|0);
 HEAP32[$8>>2] = $_10;
 $9 = ((($_3)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_3,2320);
 // unreachable;
}
function __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h12332f02158c6566E($0,$arg0,$i,$x) {
 $0 = $0|0;
 $arg0 = $arg0|0;
 $i = $i|0;
 $x = $x|0;
 var $$sink = 0, $$sink3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_17$i$i = 0, $_4$i$i$i$i$i$i = 0, $_6$i$i$i$i$i$i = 0, $info$i$i = 0, $not$ = 0, $or$cond$i = 0, $switch$i$i$i = 0, $switch$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_6$i$i$i$i$i$i = sp + 48|0;
 $_4$i$i$i$i$i$i = sp + 32|0;
 $_17$i$i = sp + 16|0;
 $info$i$i = sp;
 $1 = HEAP32[$x>>2]|0;
 ;HEAP32[$info$i$i>>2]=0|0;HEAP32[$info$i$i+4>>2]=0|0;HEAP32[$info$i$i+8>>2]=0|0;HEAP32[$info$i$i+12>>2]=0|0;
 $2 = (_dladdr(($1|0),($info$i$i|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $16 = 0;
 } else {
  $13 = ((($info$i$i)) + 8|0);
  $4 = HEAP32[$13>>2]|0;
  $14 = ($4|0)==(0|0);
  if ($14) {
   $16 = 0;
  } else {
   $5 = (_strlen($4)|0);
   $6 = ($5|0)==(-1);
   if ($6) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE(-1,0);
    // unreachable;
   }
   __ZN4core3str9from_utf817h350e3a6fdb8dca1aE($_17$i$i,$4,$5);
   $7 = HEAP32[$_17$i$i>>2]|0;
   $switch$i$i$i = ($7|0)==(1);
   $8 = ((($_17$i$i)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($_17$i$i)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9|0)==(0|0);
   $or$cond$i = $switch$i$i$i | $12;
   if ($or$cond$i) {
    $16 = 0;
   } else {
    __ZN4core3str7pattern11StrSearcher3new17h608fb1447ba385b9E($_6$i$i$i$i$i$i,$9,$11,5927,28);
    __ZN122__LT_core__str__pattern__StrSearcher_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__str__pattern__Searcher_LT__u27_a_GT__GT_10next_match17hb7a25635283f00f0E($_4$i$i$i$i$i$i,$_6$i$i$i$i$i$i);
    $15 = HEAP32[$_4$i$i$i$i$i$i>>2]|0;
    $switch$i$i$i$i$i$i$i = ($15|0)==(1);
    $16 = $switch$i$i$i$i$i$i$i;
   }
  }
 }
 $$sink3 = $16&1;
 $not$ = $16 ^ 1;
 $17 = $not$&1;
 $$sink = (($17) + ($i))|0;
 HEAP32[$0>>2] = $$sink3;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $$sink;
 STACKTOP = sp;return;
}
function __ZN122__LT_core__str__pattern__StrSearcher_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__str__pattern__Searcher_LT__u27_a_GT__GT_10next_match17hb7a25635283f00f0E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$$$$i$i = 0, $$$$i$i = 0, $$$i$i = 0, $$arith = 0, $$overflow = 0, $$pre$i$i$i$i = 0, $$pre$phi72Z2D = 0, $$sink$i$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i14$i$i$i = 0, $_0$0$i20$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_0$0$sroa$speculated$i$i$i = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_10$sroa$4$0$i = 0, $_5$sroa$10$1$ph = 0, $_5$sroa$15$1$ph = 0;
 var $b$0$lcssa$i = 0, $b$046$i = 0, $iter$sroa$0$0$i$i = 0, $iter$sroa$0$0$i$ph$i = 0, $iter3$sroa$0$0$extract$trunc$i$i = 0, $iter3$sroa$5$0$i$i = 0, $not$$i$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i45$i = 0, $phitmp$i$i$i = 0, $phitmp26$i$i$i = 0, $phitmp27$i$i$i = 0, $switch = 0, $switch$i = 0, $switch1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$self>>2]|0;
 $switch = ($1|0)==(1);
 $2 = ((($self)) + 8|0);
 if ($switch) {
  $13 = ((($2)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(-1);
  $16 = ((($self)) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($self)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($self)) + 56|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($self)) + 60|0);
  $23 = HEAP32[$22>>2]|0;
  if ($15) {
   __ZN4core3str7pattern14TwoWaySearcher4next17he72971691b95536cE($0,$2,$17,$19,$21,$23,1);
   return;
  } else {
   __ZN4core3str7pattern14TwoWaySearcher4next17he72971691b95536cE($0,$2,$17,$19,$21,$23,0);
   return;
  }
 }
 $3 = ((($2)) + 20|0);
 $4 = ((($self)) + 52|0);
 $5 = ((($self)) + 48|0);
 $6 = ((($2)) + 28|0);
 $7 = ((($self)) + 56|0);
 $8 = ((($self)) + 60|0);
 $9 = ((($self)) + 16|0);
 $10 = ((($self)) + 24|0);
 $11 = ((($self)) + 4|0);
 $12 = ((($11)) + 8|0);
 $24 = 0;
 L9: while(1) {
  $switch$i = ($24|0)==(1);
  if (!($switch$i)) {
   $25 = HEAP8[$12>>0]|0;
   $26 = ($25<<24>>24)!=(0);
   $27 = $26 ^ 1;
   $28 = $27&1;
   HEAP8[$12>>0] = $28;
   $29 = HEAP32[$11>>2]|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = HEAP32[$4>>2]|0;
   $32 = ($29|0)==(0);
   $33 = ($31|0)==($29|0);
   $or$cond$i$i$i$i$i = $32 | $33;
   if ($or$cond$i$i$i$i$i) {
    $$pre$i$i$i$i = (($30) + ($29)|0);
    $$pre$phi72Z2D = $$pre$i$i$i$i;
   } else {
    $34 = ($31>>>0)>($29>>>0);
    if (!($34)) {
     label = 9;
     break;
    }
    $35 = (($30) + ($29)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = ($36<<24>>24)>(-65);
    if ($37) {
     $$pre$phi72Z2D = $35;
    } else {
     label = 9;
     break;
    }
   }
   $38 = (($30) + ($29)|0);
   $39 = (($31) - ($29))|0;
   $40 = (($38) + ($39)|0);
   $41 = ($$pre$phi72Z2D|0)==($40|0);
   do {
    if ($41) {
     $$sink$i$i$i = 0;$_10$sroa$4$0$i = 0;
    } else {
     $55 = (($30) + ($29)|0);
     $50 = ((($55)) + 1|0);
     $43 = HEAP8[$$pre$phi72Z2D>>0]|0;
     $56 = ($43<<24>>24)>(-1);
     if ($56) {
      $42 = $43&255;
      $$sink$i$i$i = 1;$_10$sroa$4$0$i = $42;
      break;
     }
     $44 = $43 & 31;
     $45 = $44&255;
     $46 = ($39|0)==(1);
     if ($46) {
      $57 = $40;$_0$0$i20$i$i$i = 0;
     } else {
      $47 = (($30) + ($29)|0);
      $48 = ((($47)) + 2|0);
      $49 = HEAP8[$50>>0]|0;
      $phitmp$i$i$i = $49 & 63;
      $57 = $48;$_0$0$i20$i$i$i = $phitmp$i$i$i;
     }
     $51 = $45 << 6;
     $52 = $_0$0$i20$i$i$i&255;
     $53 = $52 | $51;
     $54 = ($43&255)>(223);
     if ($54) {
      $58 = ($57|0)==($40|0);
      if ($58) {
       $67 = $40;$_0$0$i14$i$i$i = 0;
      } else {
       $59 = ((($57)) + 1|0);
       $60 = HEAP8[$57>>0]|0;
       $phitmp26$i$i$i = $60 & 63;
       $67 = $59;$_0$0$i14$i$i$i = $phitmp26$i$i$i;
      }
      $61 = $52 << 6;
      $62 = $_0$0$i14$i$i$i&255;
      $63 = $62 | $61;
      $64 = $45 << 12;
      $65 = $63 | $64;
      $66 = ($43&255)>(239);
      if ($66) {
       $68 = ($67|0)==($40|0);
       if ($68) {
        $_0$0$i9$i$i$i = 0;
       } else {
        $69 = HEAP8[$67>>0]|0;
        $phitmp27$i$i$i = $69 & 63;
        $_0$0$i9$i$i$i = $phitmp27$i$i$i;
       }
       $70 = $45 << 18;
       $71 = $70 & 1835008;
       $72 = $63 << 6;
       $73 = $_0$0$i9$i$i$i&255;
       $74 = $72 | $71;
       $75 = $74 | $73;
       $$sink$i$i$i = 1;$_10$sroa$4$0$i = $75;
      } else {
       $$sink$i$i$i = 1;$_10$sroa$4$0$i = $65;
      }
     } else {
      $$sink$i$i$i = 1;$_10$sroa$4$0$i = $53;
     }
    }
   } while(0);
   if ($26) {
    $_5$sroa$10$1$ph = $29;$_5$sroa$15$1$ph = $29;
    break;
   }
   $switch1$i = ($$sink$i$i$i|0)==(1);
   if (!($switch1$i)) {
    label = 62;
    break;
   }
   $79 = ($_10$sroa$4$0$i>>>0)<(128);
   $80 = ($_10$sroa$4$0$i>>>0)<(2048);
   $81 = ($_10$sroa$4$0$i>>>0)<(65536);
   $$$i$i = $81 ? 3 : 4;
   $$$$i$i = $80 ? 2 : $$$i$i;
   $$$$$i$i = $79 ? 1 : $$$$i$i;
   $82 = (($$$$$i$i) + ($29))|0;
   HEAP32[$11>>2] = $82;
   $24 = $1;
   continue;
  }
  $76 = HEAP32[$3>>2]|0;
  $77 = HEAP32[$4>>2]|0;
  $78 = ($76|0)==($77|0);
  if ($78) {
   label = 62;
   break;
  }
  $83 = HEAP32[$6>>2]|0;
  $84 = ($83|0)==(-1);
  $85 = HEAP32[$5>>2]|0;
  $86 = HEAP32[$7>>2]|0;
  $87 = HEAP32[$8>>2]|0;
  $88 = (($87) + -1)|0;
  $89 = (($88) + ($76))|0;
  $90 = ($89>>>0)<($77>>>0);
  L39: do {
   if ($90) {
    $91 = $2;
    $92 = $91;
    $93 = HEAP32[$92>>2]|0;
    $94 = (($91) + 4)|0;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = HEAP32[$9>>2]|0;
    $98 = HEAP32[$10>>2]|0;
    $99 = (($87) - ($98))|0;
    $100 = (($87) + ($76))|0;
    $101 = (($88) + ($100))|0;
    $102 = ($101>>>0)<($77>>>0);
    $103 = (($98) + ($76))|0;
    $104 = (($103) + ($88))|0;
    $105 = ($104>>>0)<($77>>>0);
    $106 = (($76) - ($97))|0;
    $156 = $83;$157 = $89;$158 = $76;
    while(1) {
     $159 = $156;$160 = $157;$161 = $158;
     L43: while(1) {
      $107 = $161;$112 = $160;$123 = $159;
      while(1) {
       $not$$i$i = ($76|0)==($107|0);
       if (!($not$$i$i)) {
        $108 = $107;
        break L39;
       }
       $111 = (($85) + ($112)|0);
       $113 = HEAP8[$111>>0]|0;
       $114 = $113 & 63;
       $115 = $114&255;
       $116 = (_bitshift64Shl(1,0,($115|0))|0);
       $117 = tempRet0;
       $118 = $116 & $93;
       $119 = $117 & $96;
       $120 = ($118|0)==(0);
       $121 = ($119|0)==(0);
       $122 = $120 & $121;
       if (!($122)) {
        break;
       }
       HEAP32[$3>>2] = $100;
       if ($84) {
        $162 = $123;
       } else {
        HEAP32[$6>>2] = 0;
        $162 = 0;
       }
       if ($102) {
        $107 = $100;$112 = $101;$123 = $162;
       } else {
        label = 30;
        break L39;
       }
      }
      $124 = ($123>>>0)>=($97>>>0);
      $_0$0$sroa$speculated$i$i$i$i = $124 ? $123 : $97;
      $iter$sroa$0$0$i$ph$i = $84 ? $97 : $_0$0$sroa$speculated$i$i$i$i;
      $iter$sroa$0$0$i$i = $iter$sroa$0$0$i$ph$i;
      while(1) {
       $125 = ($iter$sroa$0$0$i$i>>>0)<($87>>>0);
       if (!($125)) {
        break L43;
       }
       $$arith = (($iter$sroa$0$0$i$i) + 1)|0;
       $$overflow = ($iter$sroa$0$0$i$i>>>0)>(4294967294);
       if ($$overflow) {
        break L43;
       }
       $126 = (($iter$sroa$0$0$i$i) + ($76))|0;
       $127 = ($126>>>0)<($77>>>0);
       if (!($127)) {
        label = 42;
        break L9;
       }
       $128 = (($86) + ($iter$sroa$0$0$i$i)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = (($85) + ($126)|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = ($129<<24>>24)==($131<<24>>24);
       if ($132) {
        $iter$sroa$0$0$i$i = $$arith;
       } else {
        break;
       }
      }
      $133 = (($$arith) + ($106))|0;
      HEAP32[$3>>2] = $133;
      if ($84) {
       $163 = $123;
      } else {
       HEAP32[$6>>2] = 0;
       $163 = 0;
      }
      $134 = (($133) + ($88))|0;
      $135 = ($134>>>0)<($77>>>0);
      if ($135) {
       $159 = $163;$160 = $134;$161 = $133;
      } else {
       label = 30;
       break L39;
      }
     }
     $iter3$sroa$0$0$extract$trunc$i$i = $84 ? 0 : $123;
     $iter3$sroa$5$0$i$i = $97;
     while(1) {
      $136 = ($iter3$sroa$0$0$extract$trunc$i$i>>>0)<($iter3$sroa$5$0$i$i>>>0);
      $137 = (($iter3$sroa$5$0$i$i) + -1)|0;
      if (!($136)) {
       label = 48;
       break L9;
      }
      $138 = ($137>>>0)<($87>>>0);
      if (!($138)) {
       label = 57;
       break L9;
      }
      $139 = (($137) + ($76))|0;
      $140 = ($139>>>0)<($77>>>0);
      if (!($140)) {
       label = 51;
       break L9;
      }
      $141 = (($86) + ($137)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = (($85) + ($139)|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = ($142<<24>>24)==($144<<24>>24);
      if ($145) {
       $iter3$sroa$5$0$i$i = $137;
      } else {
       break;
      }
     }
     HEAP32[$3>>2] = $103;
     if ($84) {
      $164 = $123;
     } else {
      HEAP32[$6>>2] = $99;
      $164 = $99;
     }
     if ($105) {
      $156 = $164;$157 = $104;$158 = $103;
     } else {
      label = 30;
      break;
     }
    }
   } else {
    label = 30;
   }
  } while(0);
  if ((label|0) == 30) {
   label = 0;
   HEAP32[$3>>2] = $77;
   $108 = $77;
  }
  $109 = ($108|0)==(0);
  $110 = ($77|0)==($108|0);
  $or$cond$i45$i = $109 | $110;
  L75: do {
   if ($or$cond$i45$i) {
    $b$0$lcssa$i = $108;
   } else {
    $b$046$i = $108;
    while(1) {
     $146 = ($77>>>0)>($b$046$i>>>0);
     if ($146) {
      $147 = (($85) + ($b$046$i)|0);
      $148 = HEAP8[$147>>0]|0;
      $149 = ($148<<24>>24)>(-65);
      if ($149) {
       $b$0$lcssa$i = $b$046$i;
       break L75;
      }
     }
     $151 = (($b$046$i) + 1)|0;
     $152 = ($151|0)==(0);
     $153 = ($77|0)==($151|0);
     $or$cond$i$i = $152 | $153;
     if ($or$cond$i$i) {
      $b$0$lcssa$i = $151;
      break;
     } else {
      $b$046$i = $151;
     }
    }
   }
  } while(0);
  $150 = ($108>>>0)>=($b$0$lcssa$i>>>0);
  $_0$0$sroa$speculated$i$i$i = $150 ? $108 : $b$0$lcssa$i;
  HEAP32[$3>>2] = $_0$0$sroa$speculated$i$i$i;
  $24 = $1;
 }
 if ((label|0) == 9) {
  __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($30,$31,$29,$31);
  // unreachable;
 }
 else if ((label|0) == 42) {
  __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$126,$77);
  // unreachable;
 }
 else if ((label|0) == 48) {
  HEAP32[$3>>2] = $100;
  if ($84) {
   $_5$sroa$10$1$ph = $76;$_5$sroa$15$1$ph = $100;
  } else {
   HEAP32[$6>>2] = 0;
   $_5$sroa$10$1$ph = $76;$_5$sroa$15$1$ph = $100;
  }
 }
 else if ((label|0) == 51) {
  __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$139,$77);
  // unreachable;
 }
 else if ((label|0) == 57) {
  __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2776,$137,$87);
  // unreachable;
 }
 else if ((label|0) == 62) {
  HEAP32[$0>>2] = 0;
  return;
 }
 HEAP32[$0>>2] = 1;
 $154 = ((($0)) + 4|0);
 HEAP32[$154>>2] = $_5$sroa$10$1$ph;
 $155 = ((($0)) + 8|0);
 HEAP32[$155>>2] = $_5$sroa$15$1$ph;
 return;
}
function __ZN4core3str7pattern14TwoWaySearcher4next17he72971691b95536cE($0,$self,$haystack$ptr,$haystack$meta,$needle$ptr,$needle$meta,$long_period) {
 $0 = $0|0;
 $self = $self|0;
 $haystack$ptr = $haystack$ptr|0;
 $haystack$meta = $haystack$meta|0;
 $needle$ptr = $needle$ptr|0;
 $needle$meta = $needle$meta|0;
 $long_period = $long_period|0;
 var $$arith = 0, $$overflow = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i = 0, $iter$sroa$0$0 = 0, $iter3$sroa$0$0$extract$trunc = 0, $iter3$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 20|0);
 $2 = (($needle$meta) + -1)|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($2) + ($3))|0;
 $5 = ($4>>>0)<($haystack$meta>>>0);
 L1: do {
  if ($5) {
   $6 = $self;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($self)) + 28|0);
   $13 = ((($self)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($self)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($needle$meta) - ($16))|0;
   $65 = $4;$66 = $3;
   L3: while(1) {
    $67 = $65;$68 = $66;
    L5: while(1) {
     $19 = $67;$31 = $68;
     while(1) {
      $18 = (($haystack$ptr) + ($19)|0);
      $20 = HEAP8[$18>>0]|0;
      $21 = $20 & 63;
      $22 = $21&255;
      $23 = (_bitshift64Shl(1,0,($22|0))|0);
      $24 = tempRet0;
      $25 = $23 & $8;
      $26 = $24 & $11;
      $27 = ($25|0)==(0);
      $28 = ($26|0)==(0);
      $29 = $27 & $28;
      if (!($29)) {
       break;
      }
      $30 = (($31) + ($needle$meta))|0;
      HEAP32[$1>>2] = $30;
      if (!($long_period)) {
       HEAP32[$12>>2] = 0;
      }
      $32 = (($2) + ($30))|0;
      $33 = ($32>>>0)<($haystack$meta>>>0);
      if ($33) {
       $19 = $32;$31 = $30;
      } else {
       break L1;
      }
     }
     if ($long_period) {
      $iter$sroa$0$0 = $14;
     } else {
      $34 = HEAP32[$12>>2]|0;
      $35 = ($34>>>0)>=($14>>>0);
      $_0$0$sroa$speculated$i$i = $35 ? $34 : $14;
      $iter$sroa$0$0 = $_0$0$sroa$speculated$i$i;
     }
     while(1) {
      $36 = ($iter$sroa$0$0>>>0)<($needle$meta>>>0);
      if (!($36)) {
       break L5;
      }
      $$arith = (($iter$sroa$0$0) + 1)|0;
      $$overflow = ($iter$sroa$0$0>>>0)>(4294967294);
      if ($$overflow) {
       break L5;
      }
      $38 = (($31) + ($iter$sroa$0$0))|0;
      $39 = ($38>>>0)<($haystack$meta>>>0);
      if (!($39)) {
       label = 17;
       break L3;
      }
      $40 = (($needle$ptr) + ($iter$sroa$0$0)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = (($haystack$ptr) + ($38)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($41<<24>>24)==($43<<24>>24);
      if ($44) {
       $iter$sroa$0$0 = $$arith;
      } else {
       break;
      }
     }
     $45 = (($$arith) + ($31))|0;
     $46 = (($45) - ($14))|0;
     HEAP32[$1>>2] = $46;
     if (!($long_period)) {
      HEAP32[$12>>2] = 0;
     }
     $47 = (($2) + ($46))|0;
     $48 = ($47>>>0)<($haystack$meta>>>0);
     if ($48) {
      $67 = $47;$68 = $46;
     } else {
      break L1;
     }
    }
    $37 = HEAP32[$12>>2]|0;
    $iter3$sroa$0$0$extract$trunc = $long_period ? 0 : $37;
    $iter3$sroa$5$0 = $14;
    while(1) {
     $49 = ($iter3$sroa$0$0$extract$trunc>>>0)<($iter3$sroa$5$0>>>0);
     $50 = (($iter3$sroa$5$0) + -1)|0;
     if (!($49)) {
      label = 23;
      break L3;
     }
     $52 = ($50>>>0)<($needle$meta>>>0);
     if (!($52)) {
      label = 33;
      break L3;
     }
     $53 = (($31) + ($50))|0;
     $54 = ($53>>>0)<($haystack$meta>>>0);
     if (!($54)) {
      label = 26;
      break L3;
     }
     $55 = (($needle$ptr) + ($50)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = (($haystack$ptr) + ($53)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = ($56<<24>>24)==($58<<24>>24);
     if ($59) {
      $iter3$sroa$5$0 = $50;
     } else {
      break;
     }
    }
    $60 = (($16) + ($31))|0;
    HEAP32[$1>>2] = $60;
    if (!($long_period)) {
     HEAP32[$12>>2] = $17;
    }
    $61 = (($2) + ($60))|0;
    $62 = ($61>>>0)<($haystack$meta>>>0);
    if ($62) {
     $65 = $61;$66 = $60;
    } else {
     break L1;
    }
   }
   if ((label|0) == 17) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$38,$haystack$meta);
    // unreachable;
   }
   else if ((label|0) == 23) {
    $51 = (($31) + ($needle$meta))|0;
    HEAP32[$1>>2] = $51;
    if (!($long_period)) {
     HEAP32[$12>>2] = 0;
    }
    HEAP32[$0>>2] = 1;
    $63 = ((($0)) + 4|0);
    HEAP32[$63>>2] = $31;
    $64 = ((($0)) + 8|0);
    HEAP32[$64>>2] = $51;
    return;
   }
   else if ((label|0) == 26) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$53,$haystack$meta);
    // unreachable;
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2776,$50,$needle$meta);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $haystack$meta;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN4core3str7pattern14TwoWaySearcher9next_back17h2fec93875d8d83d5E($0,$self,$haystack$ptr,$haystack$meta,$needle$ptr,$needle$meta,$long_period) {
 $0 = $0|0;
 $self = $self|0;
 $haystack$ptr = $haystack$ptr|0;
 $haystack$meta = $haystack$meta|0;
 $needle$ptr = $needle$ptr|0;
 $needle$meta = $needle$meta|0;
 $long_period = $long_period|0;
 var $$arith = 0, $$overflow = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $33$phi = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i = 0, $iter$sroa$5$0 = 0, $iter$sroa$5$0$ph = 0, $iter1$sroa$0$0 = 0, $needle_end$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) - ($needle$meta))|0;
 $4 = ($3>>>0)<($haystack$meta>>>0);
 L1: do {
  if ($4) {
   $5 = $self;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($self)) + 32|0);
   $12 = ((($self)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($self)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $63 = $2;$64 = $3;
   L3: while(1) {
    $65 = $63;$66 = $64;
    L5: while(1) {
     $17 = $66;$33 = $65;
     while(1) {
      $16 = (($haystack$ptr) + ($17)|0);
      $18 = HEAP8[$16>>0]|0;
      $19 = $18 & 63;
      $20 = $19&255;
      $21 = (_bitshift64Shl(1,0,($20|0))|0);
      $22 = tempRet0;
      $23 = $21 & $7;
      $24 = $22 & $10;
      $25 = ($23|0)==(0);
      $26 = ($24|0)==(0);
      $27 = $25 & $26;
      if (!($27)) {
       break;
      }
      HEAP32[$1>>2] = $17;
      if (!($long_period)) {
       HEAP32[$11>>2] = $needle$meta;
      }
      $28 = (($17) - ($needle$meta))|0;
      $29 = ($28>>>0)<($haystack$meta>>>0);
      if ($29) {
       $33$phi = $17;$17 = $28;$33 = $33$phi;
      } else {
       break L1;
      }
     }
     if ($long_period) {
      $iter$sroa$5$0$ph = $13;
     } else {
      $30 = HEAP32[$11>>2]|0;
      $31 = ($13>>>0)<=($30>>>0);
      $_0$0$sroa$speculated$i$i = $31 ? $13 : $30;
      $iter$sroa$5$0$ph = $_0$0$sroa$speculated$i$i;
     }
     $32 = (($33) - ($needle$meta))|0;
     $iter$sroa$5$0 = $iter$sroa$5$0$ph;
     while(1) {
      $34 = ($iter$sroa$5$0|0)==(0);
      $35 = (($iter$sroa$5$0) + -1)|0;
      if ($34) {
       break L5;
      }
      $37 = ($35>>>0)<($needle$meta>>>0);
      if (!($37)) {
       label = 35;
       break L3;
      }
      $38 = (($32) + ($35))|0;
      $39 = ($38>>>0)<($haystack$meta>>>0);
      if (!($39)) {
       label = 18;
       break L3;
      }
      $40 = (($needle$ptr) + ($35)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = (($haystack$ptr) + ($38)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($41<<24>>24)==($43<<24>>24);
      if ($44) {
       $iter$sroa$5$0 = $35;
      } else {
       break;
      }
     }
     $45 = (($33) + ($35))|0;
     $46 = (($45) - ($13))|0;
     HEAP32[$1>>2] = $46;
     if (!($long_period)) {
      HEAP32[$11>>2] = $needle$meta;
     }
     $47 = (($46) - ($needle$meta))|0;
     $48 = ($47>>>0)<($haystack$meta>>>0);
     if ($48) {
      $65 = $46;$66 = $47;
     } else {
      break L1;
     }
    }
    $36 = HEAP32[$11>>2]|0;
    $needle_end$0 = $long_period ? $needle$meta : $36;
    $iter1$sroa$0$0 = $13;
    while(1) {
     $49 = ($iter1$sroa$0$0>>>0)<($needle_end$0>>>0);
     if (!($49)) {
      label = 25;
      break L3;
     }
     $$arith = (($iter1$sroa$0$0) + 1)|0;
     $$overflow = ($iter1$sroa$0$0>>>0)>(4294967294);
     if ($$overflow) {
      label = 25;
      break L3;
     }
     $50 = ($iter1$sroa$0$0>>>0)<($needle$meta>>>0);
     if (!($50)) {
      label = 36;
      break L3;
     }
     $51 = (($32) + ($iter1$sroa$0$0))|0;
     $52 = ($51>>>0)<($haystack$meta>>>0);
     if (!($52)) {
      label = 28;
      break L3;
     }
     $53 = (($needle$ptr) + ($iter1$sroa$0$0)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = (($haystack$ptr) + ($51)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = ($54<<24>>24)==($56<<24>>24);
     if ($57) {
      $iter1$sroa$0$0 = $$arith;
     } else {
      break;
     }
    }
    $58 = (($33) - ($15))|0;
    HEAP32[$1>>2] = $58;
    if (!($long_period)) {
     HEAP32[$11>>2] = $15;
    }
    $59 = (($58) - ($needle$meta))|0;
    $60 = ($59>>>0)<($haystack$meta>>>0);
    if ($60) {
     $63 = $58;$64 = $59;
    } else {
     break L1;
    }
   }
   if ((label|0) == 18) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$38,$haystack$meta);
    // unreachable;
   }
   else if ((label|0) == 25) {
    HEAP32[$1>>2] = $32;
    if (!($long_period)) {
     HEAP32[$11>>2] = $needle$meta;
    }
    HEAP32[$0>>2] = 1;
    $61 = ((($0)) + 4|0);
    HEAP32[$61>>2] = $32;
    $62 = ((($0)) + 8|0);
    HEAP32[$62>>2] = $33;
    return;
   }
   else if ((label|0) == 28) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2760,$51,$haystack$meta);
    // unreachable;
   }
   else if ((label|0) == 35) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2792,$35,$needle$meta);
    // unreachable;
   }
   else if ((label|0) == 36) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(2808,$iter1$sroa$0$0,$needle$meta);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$1>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std3sys3imp9backtrace7tracing3imp8trace_fn17h146d16014d99306bE($ctx,$arg) {
 $ctx = $ctx|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ip$0 = 0, $ip$0$v = 0, $ip_before_insn = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ip_before_insn = sp;
 HEAP32[$ip_before_insn>>2] = 0;
 $0 = (__Unwind_GetIPInfo(($ctx|0),($ip_before_insn|0))|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP32[$ip_before_insn>>2]|0;
 $3 = ($2|0)==(0);
 $or$cond = $1 & $3;
 $4 = $or$cond << 31 >> 31;
 $ip$0$v = (($4) + ($0))|0;
 $ip$0 = $ip$0$v;
 $5 = (__Unwind_FindEnclosingFunction(($ip$0|0))|0);
 $6 = HEAP32[$arg>>2]|0;
 $7 = ((($arg)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if (!($9)) {
  STACKTOP = sp;return 0;
 }
 $10 = ((($arg)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($6<<3)|0);
 HEAP32[$12>>2] = $ip$0;
 $13 = (((($11) + ($6<<3)|0)) + 4|0);
 HEAP32[$13>>2] = $5;
 $14 = HEAP32[$arg>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$arg>>2] = $15;
 STACKTOP = sp;return 0;
}
function __ZN4core3ptr13drop_in_place17h6e05235029be469eE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN89__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_std__error__Error_GT_11description17hb6136ff6aaedaab5E($retVal,$self) {
 $retVal = $retVal|0;
 $self = $self|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = 6189;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = 39;
 return;
}
function __ZN3std5error5Error5cause17h7863ec4fee22b1f3E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std5error5Error7type_id17h352881c6e6294928E($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (1494444239);
 return -960227758;
}
function __ZN90__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Display_GT_3fmt17h6c2d57dad41df862E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$fca$1$gep = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_11 = 0, $_14 = 0, $_4 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_14 = sp + 40|0;
 $_11 = sp + 24|0;
 $_4 = sp;
 HEAP32[$_14>>2] = 6189;
 $$fca$1$gep = ((($_14)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 39;
 $0 = $_14;
 $1 = $self;
 HEAP32[$_11>>2] = $0;
 $2 = ((($_11)) + 4|0);
 HEAP32[$2>>2] = (93);
 $3 = ((($_11)) + 8|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($_11)) + 12|0);
 HEAP32[$4>>2] = (128);
 HEAP32[$_4>>2] = 2304;
 $5 = ((($_4)) + 4|0);
 HEAP32[$5>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_4)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_4)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $6 = ((($_4)) + 16|0);
 HEAP32[$6>>2] = $_11;
 $7 = ((($_4)) + 20|0);
 HEAP32[$7>>2] = 2;
 $8 = (__ZN4core3fmt9Formatter9write_fmt17h2f9d3d275a85e25eE($f,$_4)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN88__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Debug_GT_3fmt17h217acc78a24d1474E($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $_13 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_13 = sp + 12|0;
 $builder = sp;
 __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder,$__arg_0,6178,11);
 HEAP32[$_13>>2] = $self;
 (__ZN4core3fmt8builders10DebugTuple5field17h80aed126205c0495E($builder,$_13,208)|0);
 $0 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr13drop_in_place17h3d3cc9a3ac23f033E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb3fea24a53defe37E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h4c459d07e068ff31E($0,$f)|0);
 return ($1|0);
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2949dc4d687237faE($self) {
 $self = $self|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i10 = 0, $_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_5$i$i$i = 0, $cond$i$i = 0, $cond$i$i8 = 0, $err$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i = sp + 16|0;
 $_5$i$i$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $cond$i$i8 = ($0|0)==(0);
 if ($cond$i$i8) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E($self)|0);
  $_0$0$i$i10 = $1;
 } else {
  $_0$0$i$i10 = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i10|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$ = $4 ? 0 : $5;
  STACKTOP = sp;return ($$|0);
 }
 $6 = (___rust_alloc(20,4,$err$i$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  ___rust_oom($_5$i$i$i);
  // unreachable;
 }
 HEAP32[$6>>2] = $self;
 $_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($6)) + 4|0);
 HEAP32[$_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
 $8 = HEAP32[$self>>2]|0;
 $cond$i$i = ($8|0)==(0);
 if (!($cond$i$i)) {
  $_0$0$i$i = $8;
  (_pthread_setspecific(($_0$0$i$i|0),($6|0))|0);
  STACKTOP = sp;return ($_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
 }
 $9 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E($self)|0);
 $_0$0$i$i = $9;
 (_pthread_setspecific(($_0$0$i$i|0),($6|0))|0);
 STACKTOP = sp;return ($_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
}
function __ZN3std3ffi5c_str7CString3new17he0b1c0791391965eE($0,$t$ptr,$t$meta) {
 $0 = $0|0;
 $t$ptr = $t$ptr|0;
 $t$meta = $t$meta|0;
 var $$sink$i = 0, $$sroa_idx$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $_13$i = 0, $_2$sroa$0$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = 0, $_2$sroa$6$0$$sroa_idx9 = 0, $_2$sroa$6$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx7 = 0, $_2$sroa$6$0$copyload = 0, $_2$sroa$611$0$$sroa_idx16 = 0;
 var $_2$sroa$611$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx14 = 0, $_35$i$i$i$i$i$i$i = 0, $err$i$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i$i$i = 0, $vector$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_13$i = sp + 56|0;
 $_12$i = sp + 48|0;
 $err$i$i$i$i$i$i$i$i = sp + 32|0;
 $_35$i$i$i$i$i$i$i = sp + 16|0;
 $vector$i$i$i$i = sp;
 $1 = ($t$meta|0)<(0);
 if ($1) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2824);
  // unreachable;
 }
 $2 = ($t$meta|0)==(0);
 if ($2) {
  $ptr$0$i$i$i$i$i$i$i = (1);
 } else {
  $3 = (___rust_alloc($t$meta,1,$err$i$i$i$i$i$i$i$i)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   ___rust_oom($_35$i$i$i$i$i$i$i);
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i$i$i = $3;
  }
 }
 $5 = $ptr$0$i$i$i$i$i$i$i;
 HEAP32[$vector$i$i$i$i>>2] = $5;
 $$sroa_idx$i$i$i$i$i = ((($vector$i$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i$i>>2] = $t$meta;
 $6 = ((($vector$i$i$i$i)) + 8|0);
 HEAP32[$6>>2] = 0;
 __THREW__ = 0;
 invoke_vii(115,($vector$i$i$i$i|0),($t$meta|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($vector$i$i$i$i);
  ___resumeException($9|0);
  // unreachable;
 }
 $11 = HEAP32[$6>>2]|0;
 $12 = (($11) + ($t$meta))|0;
 HEAP32[$6>>2] = $12;
 $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i$i>>2]|0;
 $13 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i) + ($11)|0);
 _memcpy(($13|0),($t$ptr|0),($t$meta|0))|0;
 $_2$sroa$6$0$copyload = HEAP32[$$sroa_idx$i$i$i$i$i>>2]|0;
 $14 = (_memchr($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i,0,$12)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  HEAP32[$_13$i>>2] = $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i;
  $_2$sroa$6$0$$sroa_idx9 = ((($_13$i)) + 4|0);
  HEAP32[$_2$sroa$6$0$$sroa_idx9>>2] = $_2$sroa$6$0$copyload;
  $_2$sroa$611$0$$sroa_idx16 = ((($_13$i)) + 8|0);
  HEAP32[$_2$sroa$611$0$$sroa_idx16>>2] = $12;
  __ZN3std3ffi5c_str7CString18from_vec_unchecked17hb6236fcb62cdef3cE($_12$i,$_13$i);
  $16 = ((($0)) + 4|0);
  $17 = $_12$i;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $16;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $$sink$i = 0;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 } else {
  $27 = $14;
  $28 = $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i;
  $29 = (($27) - ($28))|0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = $29;
  $_2$sroa$0$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx = ((($0)) + 8|0);
  HEAP32[$_2$sroa$0$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx>>2] = $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i;
  $_2$sroa$6$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx7 = ((($0)) + 12|0);
  HEAP32[$_2$sroa$6$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx7>>2] = $_2$sroa$6$0$copyload;
  $_2$sroa$611$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx14 = ((($0)) + 16|0);
  HEAP32[$_2$sroa$611$0$_9$sroa$4$0$$sroa_cast$i$sroa_idx14>>2] = $12;
  $$sink$i = 1;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 }
}
function __ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17h2c66c89eb579c69bE($0,$arg0) {
 $0 = $0|0;
 $arg0 = $arg0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i = 0, $_3$i$i$i = 0, $_3$sroa$4$0$$sroa_idx$i = 0, $_3$sroa$4$i = 0, $_3$sroa$43$0$$sroa_idx4$i = 0, $_4$sroa$0$i$i$i$i = 0, $_5$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i$i = 0;
 var $_5$sroa$4$0$$sroa_raw_idx$i = 0, $_5$sroa$4$i = 0, $_5$sroa$411$0$$sroa_idx$i = 0, $_5$sroa$5$0$$sroa_idx$i = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $err$i$i$i$i = sp + 80|0;
 $_5$i$i$i$i$i = sp + 64|0;
 $_5$sroa$4$i = sp + 95|0;
 $_3$sroa$4$i = sp + 92|0;
 $err$i$i$i$i$i$i$i = sp + 48|0;
 $_5$i$i$i$i$i$i$i$i = sp + 32|0;
 $_4$sroa$0$i$i$i$i = sp + 16|0;
 $_3$i$i$i = sp;
 __THREW__ = 0;
 invoke_viii(123,($_3$i$i$i|0),(6808|0),33);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  __ZN4core3ptr13drop_in_place17h82d235f41c68eb1cE($arg0);
  ___resumeException($11|0);
  // unreachable;
 }
 ;HEAP32[$_4$sroa$0$i$i$i$i>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
 $3 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  ___rust_oom($_5$i$i$i$i$i$i$i$i);
  // unreachable;
 }
 ;HEAP32[$3>>2]=HEAP32[$_4$sroa$0$i$i$i$i>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_4$sroa$0$i$i$i$i+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$_4$sroa$0$i$i$i$i+8>>2]|0;
 $5 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  ___rust_oom($_5$i$i$i$i$i);
  // unreachable;
 }
 HEAP8[$5>>0] = 11;
 $_5$sroa$4$0$$sroa_raw_idx$i = ((($5)) + 1|0);
 ;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
 $_5$sroa$411$0$$sroa_idx$i = ((($5)) + 4|0);
 HEAP32[$_5$sroa$411$0$$sroa_idx$i>>2] = $3;
 $_5$sroa$5$0$$sroa_idx$i = ((($5)) + 8|0);
 HEAP32[$_5$sroa$5$0$$sroa_idx$i>>2] = 104;
 HEAP8[$0>>0] = 2;
 $_3$sroa$4$0$$sroa_idx$i = ((($0)) + 1|0);
 ;HEAP8[$_3$sroa$4$0$$sroa_idx$i>>0]=HEAP8[$_3$sroa$4$i>>0]|0;HEAP8[$_3$sroa$4$0$$sroa_idx$i+1>>0]=HEAP8[$_3$sroa$4$i+1>>0]|0;HEAP8[$_3$sroa$4$0$$sroa_idx$i+2>>0]=HEAP8[$_3$sroa$4$i+2>>0]|0;
 $_3$sroa$43$0$$sroa_idx4$i = ((($0)) + 4|0);
 HEAP32[$_3$sroa$43$0$$sroa_idx4$i>>2] = $5;
 $7 = ((($arg0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($arg0)) + 4|0);
 $_2$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$10>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i$i,$8,1);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h85cbb67c77cbcedaE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 HEAP8[$0>>0] = 0;
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($4,$2,1);
 return;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h0f2743b3e3d41cbeE($self,$additional) {
 $self = $self|0;
 $additional = $additional|0;
 var $$$i = 0, $$arith = 0, $$overflow = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_33$sroa$0$0$copyload44$i = 0, $_47$i = 0, $e$sroa$4$0$$sroa_idx$i = 0, $err$i$i = 0, $err$i11$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0, $res$sroa$5$2$i = 0;
 var $res$sroa$5$4$copyload24$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i11$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_47$i = sp;
 $0 = ((($self)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($self)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - ($1))|0;
 $5 = ($4>>>0)<($additional>>>0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $$arith = (($1) + ($additional))|0;
 $$overflow = ($$arith>>>0)<($1>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h6800fb08054f8544E(6758,17);
  // unreachable;
 }
 $6 = $3 << 1;
 $7 = ($$arith>>>0)>=($6>>>0);
 $_0$0$sroa$speculated$i$i$i$i = $7 ? $$arith : $6;
 $8 = ($_0$0$sroa$speculated$i$i$i$i|0)<(0);
 if ($8) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2824);
  // unreachable;
 }
 $9 = ($3|0)==(0);
 if ($9) {
  $10 = (___rust_alloc($_0$0$sroa$speculated$i$i$i$i,1,$err$i11$i)|0);
  $11 = ($10|0)==(0|0);
  $$$i = $11&1;
  $22 = 0;$25 = 0;$res$sroa$0$0$i = $$$i;$res$sroa$5$2$i = $10;
 } else {
  $_33$sroa$0$0$copyload44$i = HEAP32[$self>>2]|0;
  $12 = (___rust_realloc($_33$sroa$0$0$copyload44$i,$3,1,$_0$0$sroa$speculated$i$i$i$i,1,$err$i$i)|0);
  $13 = ($12|0)==(0|0);
  $res$sroa$5$4$copyload24$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $14 = $res$sroa$11$4$$sroa_idx$i;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $res$sroa$5$1$i = $13 ? $res$sroa$5$4$copyload24$i : $12;
  $$sink$i$i = $13&1;
  $22 = $16;$25 = $19;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $switch$i = ($res$sroa$0$0$i|0)==(1);
 if ($switch$i) {
  HEAP32[$_47$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_47$i)) + 4|0);
  $20 = $e$sroa$4$0$$sroa_idx$i;
  $21 = $20;
  HEAP32[$21>>2] = $22;
  $23 = (($20) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $25;
  ___rust_oom($_47$i);
  // unreachable;
 }
 HEAP32[$self>>2] = $res$sroa$5$2$i;
 HEAP32[$2>>2] = $_0$0$sroa$speculated$i$i$i$i;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $_2$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $_2$sroa$0$0$copyload2$i$i$i$i = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i,$1,1);
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h461c08ea92e48f23E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = HEAP32[$self>>2]|0;
 $2 = ((($self)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN11std_unicode5lossy9Utf8Lossy10from_bytes17hfa93b4c70c293121E($0,$1,$3);
 $$sreg$field = HEAP32[$0>>2]|0;
 $$sreg$index1 = ((($0)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $4 = (__ZN66__LT_std_unicode__lossy__Utf8Lossy_u20_as_u20_core__fmt__Debug_GT_3fmt17hb00c655e62770324E($$sreg$field,$$sreg$field2,$f)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17ha1c54cc75ad6f417E($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $$fca$1$gep = 0, $$sink$i = 0, $$sink2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_10 = 0, $_17 = 0;
 var $_2$sroa$0$0$copyload2$i$i$i$i$i$i = 0, $_35 = 0, $_42 = 0, $_45 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i20 = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i21 = 0, $code = 0, $detail = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_45 = sp + 88|0;
 $_42 = sp + 80|0;
 $_35 = sp + 56|0;
 $_17 = sp + 40|0;
 $_10 = sp + 16|0;
 $detail = sp;
 $code = sp + 96|0;
 $trunc = HEAP8[$self>>0]|0;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  $16 = ((($self)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$code>>2] = $17;
  __ZN3std3sys3imp2os12error_string17h6f15e772b77b8491E($detail,$17);
  $18 = $detail;
  $19 = $code;
  HEAP32[$_17>>2] = $18;
  $20 = ((($_17)) + 4|0);
  HEAP32[$20>>2] = (129);
  $21 = ((($_17)) + 8|0);
  HEAP32[$21>>2] = $19;
  $22 = ((($_17)) + 12|0);
  HEAP32[$22>>2] = (130);
  HEAP32[$_10>>2] = 2904;
  $23 = ((($_10)) + 4|0);
  HEAP32[$23>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i20 = ((($_10)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i20>>2] = 3556;
  $_5$sroa$4$0$$sroa_idx2$i21 = ((($_10)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i21>>2] = 2;
  $24 = ((($_10)) + 16|0);
  HEAP32[$24>>2] = $_17;
  $25 = ((($_10)) + 20|0);
  HEAP32[$25>>2] = 2;
  __THREW__ = 0;
  $26 = (invoke_iii(131,($fmt|0),($_10|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $32 = ___cxa_find_matching_catch_2()|0;
   $33 = tempRet0;
   __ZN4core3ptr13drop_in_place17he89d6e432b57bbf5E($detail);
   ___resumeException($32|0);
   // unreachable;
  }
  $29 = ((($detail)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   $_2$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$detail>>2]|0;
   ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i$i,$30,1);
  }
  $_0$sroa$0$0 = $26;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 case 1:  {
  $0 = ((($self)) + 1|0);
  $trunc$i = HEAP8[$0>>0]|0;
  $trunc$i$clear = $trunc$i & 31;
  do {
   switch ($trunc$i$clear<<24>>24) {
   case 0:  {
    $$sink$i = 16;$$sink2$i = 6365;
    break;
   }
   case 1:  {
    $$sink$i = 17;$$sink2$i = 6645;
    break;
   }
   case 2:  {
    $$sink$i = 18;$$sink2$i = 6381;
    break;
   }
   case 3:  {
    $$sink$i = 16;$$sink2$i = 6399;
    break;
   }
   case 4:  {
    $$sink$i = 18;$$sink2$i = 6415;
    break;
   }
   case 5:  {
    $$sink$i = 13;$$sink2$i = 6433;
    break;
   }
   case 6:  {
    $$sink$i = 14;$$sink2$i = 6446;
    break;
   }
   case 7:  {
    $$sink$i = 21;$$sink2$i = 6460;
    break;
   }
   case 8:  {
    $$sink$i = 11;$$sink2$i = 6481;
    break;
   }
   case 9:  {
    $$sink$i = 21;$$sink2$i = 6492;
    break;
   }
   case 10:  {
    $$sink$i = 21;$$sink2$i = 6513;
    break;
   }
   case 11:  {
    $$sink$i = 23;$$sink2$i = 6534;
    break;
   }
   case 12:  {
    $$sink$i = 12;$$sink2$i = 6557;
    break;
   }
   case 13:  {
    $$sink$i = 9;$$sink2$i = 6569;
    break;
   }
   case 14:  {
    $$sink$i = 10;$$sink2$i = 6578;
    break;
   }
   case 15:  {
    $$sink$i = 21;$$sink2$i = 6588;
    break;
   }
   case 16:  {
    $$sink$i = 14;$$sink2$i = 6609;
    break;
   }
   case 17:  {
    $$sink$i = 22;$$sink2$i = 6623;
    break;
   }
   case 18:  {
    __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(5636,40,2880);
    // unreachable;
    break;
   }
   default: {
    // unreachable;
   }
   }
  } while(0);
  HEAP32[$_45>>2] = $$sink2$i;
  $$fca$1$gep = ((($_45)) + 4|0);
  HEAP32[$$fca$1$gep>>2] = $$sink$i;
  $1 = $_45;
  HEAP32[$_42>>2] = $1;
  $2 = ((($_42)) + 4|0);
  HEAP32[$2>>2] = (93);
  HEAP32[$_35>>2] = 2896;
  $3 = ((($_35)) + 4|0);
  HEAP32[$3>>2] = 1;
  $_5$sroa$0$0$$sroa_idx$i = ((($_35)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 4460;
  $_5$sroa$4$0$$sroa_idx2$i = ((($_35)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1;
  $4 = ((($_35)) + 16|0);
  HEAP32[$4>>2] = $_42;
  $5 = ((($_35)) + 20|0);
  HEAP32[$5>>2] = 1;
  $6 = (__ZN4core3fmt9Formatter9write_fmt17h2f9d3d275a85e25eE($fmt,$_35)|0);
  $_0$sroa$0$0 = $6;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 case 2:  {
  $7 = ((($self)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($8)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$14 & 255]($10,$fmt)|0);
  $_0$sroa$0$0 = $15;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h4000831a22082efeE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3ptr13drop_in_place17hff6abf3e64b8d9d6E($arg0);
 return;
}
function __ZN4core3ptr13drop_in_place17h35a97d0211672430E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($arg0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 ___rust_dealloc($0,$3,1);
 return;
}
function __ZN3std3sys3imp2os12error_string17h6f15e772b77b8491E($0,$errno) {
 $0 = $0|0;
 $errno = $errno|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_23 = 0, $_8$i = 0, $buf = 0, $switch$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $_8$i = sp + 16|0;
 $_23 = sp;
 $buf = sp + 24|0;
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $1 = (_strerror_r($errno,$buf,128)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(6673,18,2928);
  // unreachable;
 }
 $3 = (_strlen($buf)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE(-1,0);
  // unreachable;
 }
 __ZN4core3str9from_utf817h350e3a6fdb8dca1aE($_23,$buf,$3);
 $5 = HEAP32[$_23>>2]|0;
 $switch$i = ($5|0)==(1);
 if ($switch$i) {
  $6 = ((($_23)) + 4|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $_8$i;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  __ZN4core6result13unwrap_failed17h3d07d2960b3b89a8E($_8$i);
  // unreachable;
 } else {
  $17 = ((($_23)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($_23)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17ha26fb5dd5ea39aabE($0,$18,$20);
  STACKTOP = sp;return;
 }
}
function __ZN60__LT_alloc__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17hc572529c92bce7a6E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $_2$sroa$0$0$copyload2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_2$sroa$0$0$copyload2$i$i$i = HEAP32[$self>>2]|0;
 $0 = ((($self)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h3950e9a41b16bb75E($_2$sroa$0$0$copyload2$i$i$i,$1,$f)|0);
 return ($2|0);
}
function __ZN4core6result13unwrap_failed17h3d07d2960b3b89a8E($error) {
 $error = $error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 6025;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 43;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_10>>2] = $1;
 $3 = ((($_10)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_10)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_10)) + 12|0);
 HEAP32[$5>>2] = (132);
 HEAP32[$_3>>2] = 2304;
 $6 = ((($_3)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $7 = ((($_3)) + 16|0);
 HEAP32[$7>>2] = $_10;
 $8 = ((($_3)) + 20|0);
 HEAP32[$8>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_3,2320);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h82d235f41c68eb1cE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($arg0)) + 4|0);
 $_2$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$3>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i,$1,1);
 return;
}
function __ZN3std6thread5local2os13destroy_value17hac5b41b1a377288fE($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $cond$i$i = 0, $cond$i$i6 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr1 = sp;
 HEAP32[$ptr1>>2] = $ptr;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $cond$i$i = ($1|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $2 = (invoke_ii(122,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   __ZN4core3ptr13drop_in_place17hf1b65a0a00bb1553E($ptr1);
   ___resumeException($7|0);
   // unreachable;
  } else {
   $_0$0$i$i = $2;
  }
 } else {
  $_0$0$i$i = $1;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 ___rust_dealloc($ptr,12,4);
 $5 = HEAP32[$0>>2]|0;
 $cond$i$i6 = ($5|0)==(0);
 if (!($cond$i$i6)) {
  $_0$0$i$i8 = $5;
  (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
  STACKTOP = sp;return;
 }
 $6 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E($0)|0);
 $_0$0$i$i8 = $6;
 (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17hf1b65a0a00bb1553E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($0,12,4);
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hcc06bc57105da8a5E($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-1612970562);
 return -894576856;
}
function __ZN4core3ptr13drop_in_place17h68ba065c751b89cdE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0aa55deeb468b616E($self,$s$ptr,$s$meta) {
 $self = $self|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h0f2743b3e3d41cbeE($0,$s$meta);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($s$meta))|0;
 HEAP32[$1>>2] = $3;
 $_2$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$0>>2]|0;
 $4 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i) + ($2)|0);
 _memcpy(($4|0),($s$ptr|0),($s$meta|0))|0;
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h5be03bb8847056e2E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$pre$i$i$i = 0, $$sink$i$i$i$i = 0, $$sink$sink$i$i$i$i = 0, $$sink15$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_17$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i = 0, $len$1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_17$i$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = ($c>>>0)<(128);
 $2 = ($c>>>0)<(65536);
 if ($1) {
  $3 = $c&255;
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)==($7|0);
  if ($8) {
   __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h2970720f160b80b7E($0);
   $$pre$i$i$i = HEAP32[$4>>2]|0;
   $10 = $$pre$i$i$i;
  } else {
   $10 = $5;
  }
  $_2$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$0>>2]|0;
  $9 = (($_2$sroa$0$0$copyload2$i$i$i$i$i) + ($10)|0);
  HEAP8[$9>>0] = $3;
  $11 = HEAP32[$4>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$4>>2] = $12;
  STACKTOP = sp;return 0;
 }
 $13 = ($c>>>0)<(2048);
 HEAP32[$_17$i$i>>2] = 0;
 do {
  if ($13) {
   $14 = $c >>> 6;
   $15 = $14 & 31;
   $16 = $15&255;
   $17 = $16 | -64;
   $$sink$i$i$i$i = $17;$$sink$sink$i$i$i$i = 1;$$sink15$i$i$i$i = $_17$i$i;$len$1$i$i$i$i = 2;
  } else {
   if ($2) {
    $18 = $c >>> 12;
    $19 = $18 & 15;
    $20 = $19&255;
    $21 = $20 | -32;
    HEAP8[$_17$i$i>>0] = $21;
    $22 = $c >>> 6;
    $23 = $22 & 63;
    $24 = $23&255;
    $25 = ((($_17$i$i)) + 1|0);
    $26 = $24 | -128;
    $$sink$i$i$i$i = $26;$$sink$sink$i$i$i$i = 2;$$sink15$i$i$i$i = $25;$len$1$i$i$i$i = 3;
    break;
   } else {
    $27 = $c >>> 18;
    $28 = $27 & 7;
    $29 = $28&255;
    $30 = $29 | -16;
    HEAP8[$_17$i$i>>0] = $30;
    $31 = $c >>> 12;
    $32 = $31 & 63;
    $33 = $32&255;
    $34 = ((($_17$i$i)) + 1|0);
    $35 = $33 | -128;
    HEAP8[$34>>0] = $35;
    $36 = $c >>> 6;
    $37 = $36 & 63;
    $38 = $37&255;
    $39 = ((($_17$i$i)) + 2|0);
    $40 = $38 | -128;
    $$sink$i$i$i$i = $40;$$sink$sink$i$i$i$i = 3;$$sink15$i$i$i$i = $39;$len$1$i$i$i$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i$i$i$i>>0] = $$sink$i$i$i$i;
 $41 = $c & 63;
 $42 = $41&255;
 $43 = (($_17$i$i) + ($$sink$sink$i$i$i$i)|0);
 $44 = $42 | -128;
 HEAP8[$43>>0] = $44;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h0f2743b3e3d41cbeE($0,$len$1$i$i$i$i);
 $45 = ((($0)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($len$1$i$i$i$i))|0;
 HEAP32[$45>>2] = $47;
 $_2$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$0>>2]|0;
 $48 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i) + ($46)|0);
 _memcpy(($48|0),($_17$i$i|0),($len$1$i$i$i$i|0))|0;
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h6b9bc56754e54ee9E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0;
 HEAP32[$_6$i>>2] = $0;
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0;
 $1 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6$i,8,$_8$i)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h2970720f160b80b7E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11$sroa$0$0 = 0;
 var $_11$sroa$5$0 = 0, $_31$sroa$0$0$copyload62 = 0, $_42 = 0, $_58 = 0, $_59$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D = 0, $e$sroa$4$0$$sroa_idx = 0, $err$i = 0, $err$i$i = 0, $ptr_res$sroa$4$4$copyload3563 = 0, $ptr_res$sroa$8$4$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i = sp + 48|0;
 $err$i$i = sp + 32|0;
 $_58 = sp + 16|0;
 $_42 = sp;
 $0 = ((($self)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $17 = (___rust_alloc(4,1,$err$i$i)|0);
  $18 = ($17|0)==(0|0);
  if ($18) {
   ___rust_oom($_58);
   // unreachable;
  }
  $_11$sroa$0$0 = 4;$_11$sroa$5$0 = $17;$_59$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D = $self;
  HEAP32[$_59$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D>>2] = $_11$sroa$5$0;
  HEAP32[$0>>2] = $_11$sroa$0$0;
  STACKTOP = sp;return;
 }
 $3 = $1 << 1;
 $4 = ($3|0)<(0);
 if ($4) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2824);
  // unreachable;
 }
 $_31$sroa$0$0$copyload62 = HEAP32[$self>>2]|0;
 $5 = (___rust_realloc($_31$sroa$0$0$copyload62,$1,1,$3,1,$err$i)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $ptr_res$sroa$4$4$copyload3563 = HEAP32[$err$i>>2]|0;
  $ptr_res$sroa$8$4$$sroa_idx = ((($err$i)) + 4|0);
  $7 = $ptr_res$sroa$8$4$$sroa_idx;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$_42>>2] = $ptr_res$sroa$4$4$copyload3563;
  $e$sroa$4$0$$sroa_idx = ((($_42)) + 4|0);
  $13 = $e$sroa$4$0$$sroa_idx;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  ___rust_oom($_42);
  // unreachable;
 }
 $_11$sroa$0$0 = $3;$_11$sroa$5$0 = $5;$_59$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D = $self;
 HEAP32[$_59$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D>>2] = $_11$sroa$5$0;
 HEAP32[$0>>2] = $_11$sroa$0$0;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h73cb49d55a3566efE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hdc90534263627cf0E($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (286299353);
 return 1890621284;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_13reserve_exact17h3b80a3d8a12787faE($self,$additional) {
 $self = $self|0;
 $additional = $additional|0;
 var $$$i = 0, $$arith = 0, $$overflow = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_35$sroa$0$0$copyload51$i = 0, $_49$i = 0, $e$sroa$4$0$$sroa_idx$i = 0, $err$i$i = 0, $err$i11$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0, $res$sroa$5$2$i = 0, $res$sroa$5$4$copyload29$i = 0, $switch$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i11$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_49$i = sp;
 $0 = ((($self)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($self)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - ($1))|0;
 $5 = ($4>>>0)<($additional>>>0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $$arith = (($1) + ($additional))|0;
 $$overflow = ($$arith>>>0)<($1>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h6800fb08054f8544E(6758,17);
  // unreachable;
 }
 $6 = ($$arith|0)<(0);
 if ($6) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2824);
  // unreachable;
 }
 $7 = ($3|0)==(0);
 if ($7) {
  $8 = (___rust_alloc($$arith,1,$err$i11$i)|0);
  $9 = ($8|0)==(0|0);
  $$$i = $9&1;
  $20 = 0;$23 = 0;$res$sroa$0$0$i = $$$i;$res$sroa$5$2$i = $8;
 } else {
  $_35$sroa$0$0$copyload51$i = HEAP32[$self>>2]|0;
  $10 = (___rust_realloc($_35$sroa$0$0$copyload51$i,$3,1,$$arith,1,$err$i$i)|0);
  $11 = ($10|0)==(0|0);
  $res$sroa$5$4$copyload29$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $12 = $res$sroa$11$4$$sroa_idx$i;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $res$sroa$5$1$i = $11 ? $res$sroa$5$4$copyload29$i : $10;
  $$sink$i$i = $11&1;
  $20 = $14;$23 = $17;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $switch$i = ($res$sroa$0$0$i|0)==(1);
 if ($switch$i) {
  HEAP32[$_49$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_49$i)) + 4|0);
  $18 = $e$sroa$4$0$$sroa_idx$i;
  $19 = $18;
  HEAP32[$19>>2] = $20;
  $21 = (($18) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $23;
  ___rust_oom($_49$i);
  // unreachable;
 }
 HEAP32[$self>>2] = $res$sroa$5$2$i;
 HEAP32[$2>>2] = $$arith;
 STACKTOP = sp;return;
}
function __ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17hd79102c2b7e193fbE($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $1 = 0, $_14 = 0, $_20 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_20 = sp + 16|0;
 $_14 = sp + 12|0;
 $builder = sp;
 $0 = ((($self)) + 4|0);
 __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder,$__arg_0,7115,8);
 HEAP32[$_14>>2] = $self;
 (__ZN4core3fmt8builders10DebugTuple5field17h80aed126205c0495E($builder,$_14,240)|0);
 HEAP32[$_20>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17h80aed126205c0495E($builder,$_20,256)|0);
 $1 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN4core3ptr13drop_in_place17h4a0711aab1c6b1b3E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha825db9cdcf0887dE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_2$sroa$0$0$copyload2$i$i$i = 0, $_6$i$i = 0, $entry$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $entry$i$i$i = sp + 8|0;
 $_6$i$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $_2$sroa$0$0$copyload2$i$i$i = HEAP32[$0>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __ZN4core3fmt9Formatter10debug_list17h5c50530e1e0230a4E($_6$i$i,$f);
 $3 = (($_2$sroa$0$0$copyload2$i$i$i) + ($2)|0);
 $4 = ($2|0)==(0);
 if ($4) {
  $8 = (__ZN4core3fmt8builders9DebugList6finish17h1e62b681b4d0f440E($_6$i$i)|0);
  STACKTOP = sp;return ($8|0);
 }
 $6 = $_2$sroa$0$0$copyload2$i$i$i;
 while(1) {
  $5 = ((($6)) + 1|0);
  HEAP32[$entry$i$i$i>>2] = $6;
  (__ZN4core3fmt8builders9DebugList5entry17hc69279ffc2cc05f2E($_6$i$i,$entry$i$i$i,272)|0);
  $7 = ($5|0)==($3|0);
  if ($7) {
   break;
  } else {
   $6 = $5;
  }
 }
 $8 = (__ZN4core3fmt8builders9DebugList6finish17h1e62b681b4d0f440E($_6$i$i)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4core3ptr13drop_in_place17hb3b32e92b20bffebE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hdb3bff9a78661df4E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17hd48441b71633fdb8E($0,$f)|0);
 return ($1|0);
}
function __ZN4core3ptr13drop_in_place17h3062914d23b9cc05E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h2a24af98bc764614E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17hfe0f7424930b02b7E($0,$f)|0);
 return ($1|0);
}
function __ZN3std6thread5local2os13destroy_value17h81fe8297255d2077E($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$i$i = 0, $_0$0$i$i8 = 0, $cond$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i6 = 0, $eh$lpad$body11$index2Z2D = 0, $eh$lpad$body11$indexZ2D = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr1 = sp;
 HEAP32[$ptr1>>2] = $ptr;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $cond$i$i = ($1|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $2 = (invoke_ii(122,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   __ZN4core3ptr13drop_in_place17h89c4566eccfeedb7E($ptr1);
   $eh$lpad$body11$index2Z2D = $19;$eh$lpad$body11$indexZ2D = $18;
   ___resumeException($eh$lpad$body11$indexZ2D|0);
   // unreachable;
  } else {
   $_0$0$i$i = $2;
  }
 } else {
  $_0$0$i$i = $1;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 $5 = ((($ptr)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $cond$i$i$i$i$i = ($6|0)==(0);
 if (!($cond$i$i$i$i$i)) {
  $7 = ((($ptr)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = HEAP32[$8>>2]|0;HEAP32[$8>>2] = (($10-1)|0);
   $11 = ($10|0)==(1);
   if ($11) {
    /* fence */;
    __THREW__ = 0;
    invoke_vi(90,($7|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     $14 = ___cxa_find_matching_catch_2()|0;
     $15 = tempRet0;
     __ZN5alloc4heap8box_free17hcea96a4a06280f43E($ptr);
     $eh$lpad$body11$index2Z2D = $15;$eh$lpad$body11$indexZ2D = $14;
     ___resumeException($eh$lpad$body11$indexZ2D|0);
     // unreachable;
    }
   }
  }
 }
 ___rust_dealloc($ptr,24,4);
 $16 = HEAP32[$0>>2]|0;
 $cond$i$i6 = ($16|0)==(0);
 if (!($cond$i$i6)) {
  $_0$0$i$i8 = $16;
  (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
  STACKTOP = sp;return;
 }
 $17 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E($0)|0);
 $_0$0$i$i8 = $17;
 (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17hcea96a4a06280f43E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,24,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h89c4566eccfeedb7E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i$i = ($2|0)==(0);
 if (!($cond$i$i$i)) {
  $3 = ((($0)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($6-1)|0);
   $7 = ($6|0)==(1);
   if ($7) {
    /* fence */;
    __THREW__ = 0;
    invoke_vi(90,($3|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $11 = ___cxa_find_matching_catch_2()|0;
     $12 = tempRet0;
     $13 = HEAP32[$arg0>>2]|0;
     __ZN5alloc4heap8box_free17hcea96a4a06280f43E($13);
     ___resumeException($11|0);
     // unreachable;
    }
   }
  }
 }
 $10 = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($10,24,4);
 return;
}
function __ZN3std6thread4park17haecaae8bee40cd5dE() {
 var $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i41 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre5$i$i$i$i$i$i = 0, $$pre5$i$i$i$i$i$i36 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_32 = 0, $_4$sroa$0$0$copyload2$i$i$i$cast = 0, $_4$sroa$0$0$copyload2$i$i$i$i$i = 0, $_4$sroa$0$0$copyload2$i$i$i16 = 0, $_4$sroa$0$0$copyload2$i$i$i19 = 0, $_4$sroa$0$0$copyload2$i$i$i44 = 0, $_8$i = 0, $_8$i22 = 0;
 var $cond = 0, $m = 0, $or$cond$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $self$i$i = 0, $success = 0, $success1 = 0, $success4 = 0, $success7 = 0, $switch$i2$i$i$i$i$i$i$i = 0, $switch$i2$i$i$i$i$i$i$i32 = 0, $switch2$i$i$i$i$i$i$i$i = 0, $switch2$i$i$i$i$i$i$i$i34 = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_8$i22 = sp + 40|0;
 $_8$i = sp + 32|0;
 $self$i$i = sp + 24|0;
 $_32 = sp + 16|0;
 $m = sp + 8|0;
 $thread = sp;
 $0 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h98747b8064f0dfd3E()|0);
 HEAP32[$self$i$i>>2] = $0;
 $1 = ($0|0)==(0);
 if ($1) {
  __THREW__ = 0;
  invoke_vii(133,(5089|0),94);
  $2 = __THREW__; __THREW__ = 0;
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN4core3ptr13drop_in_place17h6dd585eab22f486eE($self$i$i);
  ___resumeException($3|0);
  // unreachable;
 }
 HEAP32[$thread>>2] = $0;
 $_4$sroa$0$0$copyload2$i$i$i$cast = $0;
 $5 = ((($_4$sroa$0$0$copyload2$i$i$i$cast)) + 24|0);
 $6 = HEAP32[$5>>2]|0;if (($6|0) == 2) HEAP32[$5>>2] = 0;
 $success = ($6|0)==(2);
 L4: do {
  if (!($success)) {
   $_4$sroa$0$0$copyload2$i$i$i16 = HEAP32[$thread>>2]|0;
   $9 = ((($_4$sroa$0$0$copyload2$i$i$i16)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   (_pthread_mutex_lock(($10|0))|0);
   __THREW__ = 0;
   $11 = (invoke_i(103)|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L6: do {
    if (!($13)) {
     $switch$i2$i$i$i$i$i$i$i = ($11|0)==(0|0);
     $14 = $9;
     if ($switch$i2$i$i$i$i$i$i$i) {
      __THREW__ = 0;
      invoke_v(104);
      $20 = __THREW__; __THREW__ = 0;
      break;
     }
     $15 = HEAP32[$11>>2]|0;
     $switch2$i$i$i$i$i$i$i$i = ($15|0)==(1);
     if ($switch2$i$i$i$i$i$i$i$i) {
      $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($11)) + 4|0);
      $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
      $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i;$21 = $$pre$i$i$i$i$i$i;
     } else {
      $16 = $11;
      $17 = $16;
      HEAP8[$17>>0]=1&255;HEAP8[$17+1>>0]=(1>>8)&255;HEAP8[$17+2>>0]=(1>>16)&255;HEAP8[$17+3>>0]=1>>24;
      $18 = (($16) + 4)|0;
      $19 = $18;
      HEAP8[$19>>0]=0&255;HEAP8[$19+1>>0]=(0>>8)&255;HEAP8[$19+2>>0]=(0>>16)&255;HEAP8[$19+3>>0]=0>>24;
      $$pre5$i$i$i$i$i$i = ((($11)) + 4|0);
      $$pre$phi$i$i$i$i$i$iZ2D = $$pre5$i$i$i$i$i$i;$21 = 0;
     }
     HEAP8[$$pre$phi$i$i$i$i$i$iZ2D>>0]=$21&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+1>>0]=($21>>8)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+2>>0]=($21>>16)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+3>>0]=$21>>24;
     $22 = ($21|0)!=(0);
     $23 = ((($_4$sroa$0$0$copyload2$i$i$i16)) + 32|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(0);
     $26 = $22&1;
     if (!($25)) {
      $27 = $_8$i22;
      $28 = $27;
      HEAP32[$28>>2] = $14;
      $29 = (($27) + 4)|0;
      $30 = $29;
      HEAP32[$30>>2] = $26;
      __THREW__ = 0;
      invoke_vi(134,($_8$i22|0));
      $31 = __THREW__; __THREW__ = 0;
      break;
     }
     $32 = $m;
     $33 = $32;
     HEAP32[$33>>2] = $14;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = $26;
     $36 = ((($_4$sroa$0$0$copyload2$i$i$i16)) + 24|0);
     $37 = HEAP32[$36>>2]|0;if (($37|0) == 0) HEAP32[$36>>2] = 1;
     $success1 = ($37|0)==(0);
     L18: do {
      if ($success1) {
       while(1) {
        $_4$sroa$0$0$copyload2$i$i$i44 = HEAP32[$thread>>2]|0;
        $57 = $m;
        $58 = $57;
        $59 = HEAP32[$58>>2]|0;
        $60 = (($57) + 4)|0;
        $61 = $60;
        $62 = HEAP32[$61>>2]|0;
        $63 = $_32;
        $64 = $63;
        HEAP32[$64>>2] = $59;
        $65 = (($63) + 4)|0;
        $66 = $65;
        HEAP32[$66>>2] = $62;
        $67 = $59;
        $68 = HEAP32[$67>>2]|0;
        $69 = $68;
        $70 = ((($_4$sroa$0$0$copyload2$i$i$i44)) + 40|0);
        $71 = HEAP32[$70>>2]|0;if (($71|0) == 0) HEAP32[$70>>2] = $69;
        $success4 = ($71|0)==(0);
        $72 = ($71|0)==($69|0);
        $or$cond$i$i = $success4 | $72;
        if (!($or$cond$i$i)) {
         label = 30;
         break;
        }
        $78 = ((($_4$sroa$0$0$copyload2$i$i$i44)) + 36|0);
        $79 = HEAP32[$78>>2]|0;
        (_pthread_cond_wait(($79|0),($68|0))|0);
        $80 = HEAP32[$_32>>2]|0;
        $81 = ((($80)) + 4|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = ($82<<24>>24)==(0);
        $84 = $_32;
        $85 = $84;
        $86 = HEAP32[$85>>2]|0;
        $87 = (($84) + 4)|0;
        $88 = $87;
        $89 = HEAP32[$88>>2]|0;
        if (!($83)) {
         label = 33;
         break;
        }
        $95 = $m;
        $96 = $95;
        HEAP32[$96>>2] = $86;
        $97 = (($95) + 4)|0;
        $98 = $97;
        HEAP32[$98>>2] = $89;
        $_4$sroa$0$0$copyload2$i$i$i19 = HEAP32[$thread>>2]|0;
        $99 = ((($_4$sroa$0$0$copyload2$i$i$i19)) + 24|0);
        $100 = HEAP32[$99>>2]|0;if (($100|0) == 2) HEAP32[$99>>2] = 0;
        $success7 = ($100|0)==(2);
        if ($success7) {
         break L18;
        }
       }
       if ((label|0) == 30) {
        __THREW__ = 0;
        invoke_viii(95,(7288|0),54,(3024|0));
        $73 = __THREW__; __THREW__ = 0;
        $74 = ___cxa_find_matching_catch_2()|0;
        $75 = tempRet0;
        __THREW__ = 0;
        invoke_vi(135,($_32|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if (!($77)) {
         $personalityslot$sroa$0$0 = $74;$personalityslot$sroa$6$0 = $75;
         __ZN4core3ptr13drop_in_place17h9e419fd5ea2ba438E($thread);
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
       }
       else if ((label|0) == 33) {
        $90 = $_8$i;
        $91 = $90;
        HEAP32[$91>>2] = $86;
        $92 = (($90) + 4)|0;
        $93 = $92;
        HEAP32[$93>>2] = $89;
        __THREW__ = 0;
        invoke_vi(134,($_8$i|0));
        $94 = __THREW__; __THREW__ = 0;
       }
       $103 = ___cxa_find_matching_catch_2()|0;
       $104 = tempRet0;
       $personalityslot$sroa$0$0 = $103;$personalityslot$sroa$6$0 = $104;
       __ZN4core3ptr13drop_in_place17h9e419fd5ea2ba438E($thread);
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      } else {
       $cond = ($37|0)==(2);
       if (!($cond)) {
        __THREW__ = 0;
        invoke_viii(95,(7265|0),23,(3008|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = ___cxa_find_matching_catch_2()|0;
        $40 = tempRet0;
        __ZN4core3ptr13drop_in_place17h9a38c2a898c5e094E($m);
        $personalityslot$sroa$0$0 = $39;$personalityslot$sroa$6$0 = $40;
        __ZN4core3ptr13drop_in_place17h9e419fd5ea2ba438E($thread);
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
      }
     } while(0);
     $41 = HEAP32[$m>>2]|0;
     $42 = ((($m)) + 4|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)==(0);
     do {
      if ($44) {
       __THREW__ = 0;
       $45 = (invoke_i(103)|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        break L6;
       }
       $switch$i2$i$i$i$i$i$i$i32 = ($45|0)==(0|0);
       if ($switch$i2$i$i$i$i$i$i$i32) {
        __THREW__ = 0;
        invoke_v(104);
        $53 = __THREW__; __THREW__ = 0;
        break L6;
       }
       $48 = HEAP32[$45>>2]|0;
       $switch2$i$i$i$i$i$i$i$i34 = ($48|0)==(1);
       if (!($switch2$i$i$i$i$i$i$i$i34)) {
        $49 = $45;
        $50 = $49;
        HEAP8[$50>>0]=1&255;HEAP8[$50+1>>0]=(1>>8)&255;HEAP8[$50+2>>0]=(1>>16)&255;HEAP8[$50+3>>0]=1>>24;
        $51 = (($49) + 4)|0;
        $52 = $51;
        HEAP8[$52>>0]=0&255;HEAP8[$52+1>>0]=(0>>8)&255;HEAP8[$52+2>>0]=(0>>16)&255;HEAP8[$52+3>>0]=0>>24;
        $$pre5$i$i$i$i$i$i36 = ((($45)) + 4|0);
        HEAP8[$$pre5$i$i$i$i$i$i36>>0]=0&255;HEAP8[$$pre5$i$i$i$i$i$i36+1>>0]=(0>>8)&255;HEAP8[$$pre5$i$i$i$i$i$i36+2>>0]=(0>>16)&255;HEAP8[$$pre5$i$i$i$i$i$i36+3>>0]=0>>24;
        break;
       }
       $$sink$in$phi$trans$insert$i$i$i$i$i$i39 = ((($45)) + 4|0);
       $$pre$i$i$i$i$i$i41 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i39>>2]|0;
       $54 = ($$pre$i$i$i$i$i$i41|0)==(0);
       if (!($54)) {
        $55 = ((($41)) + 4|0);
        HEAP8[$55>>0] = 1;
       }
      }
     } while(0);
     $56 = HEAP32[$41>>2]|0;
     (_pthread_mutex_unlock(($56|0))|0);
     break L4;
    }
   } while(0);
   $101 = ___cxa_find_matching_catch_2()|0;
   $102 = tempRet0;
   $personalityslot$sroa$0$0 = $101;$personalityslot$sroa$6$0 = $102;
   __ZN4core3ptr13drop_in_place17h9e419fd5ea2ba438E($thread);
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $_4$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$thread>>2]|0;
 $7 = HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i>>2] = (($7-1)|0);
 $8 = ($7|0)==(1);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($thread);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h9e419fd5ea2ba438E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $_4$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_4$sroa$0$0$copyload2$i$i$i$i = HEAP32[$arg0>>2]|0;
 $0 = HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i>>2] = (($0-1)|0);
 $1 = ($0|0)==(1);
 if (!($1)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($arg0);
 return;
}
function __ZN4core6result13unwrap_failed17h9ef61d4721a2abfdE($error) {
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 6025;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 43;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_10>>2] = $1;
 $3 = ((($_10)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_10)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_10)) + 12|0);
 HEAP32[$5>>2] = (136);
 HEAP32[$_3>>2] = 2304;
 $6 = ((($_3)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $7 = ((($_3)) + 16|0);
 HEAP32[$7>>2] = $_10;
 $8 = ((($_3)) + 20|0);
 HEAP32[$8>>2] = 2;
 __THREW__ = 0;
 invoke_vii(99,($_3|0),(2320|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = ___cxa_find_matching_catch_2()|0;
 $11 = tempRet0;
 __ZN4core3ptr13drop_in_place17h02ca12753df04059E($error);
 ___resumeException($10|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h9a38c2a898c5e094E($arg0) {
 $arg0 = $arg0|0;
 var $$pre$i$i$i$i$i = 0, $$pre5$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$i2$i$i$i$i$i$i = 0, $switch2$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
   $switch$i2$i$i$i$i$i$i = ($4|0)==(0|0);
   if ($switch$i2$i$i$i$i$i$i) {
    __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
    // unreachable;
   }
   $5 = HEAP32[$4>>2]|0;
   $switch2$i$i$i$i$i$i$i = ($5|0)==(1);
   if (!($switch2$i$i$i$i$i$i$i)) {
    $6 = $4;
    $7 = $6;
    HEAP8[$7>>0]=1&255;HEAP8[$7+1>>0]=(1>>8)&255;HEAP8[$7+2>>0]=(1>>16)&255;HEAP8[$7+3>>0]=1>>24;
    $8 = (($6) + 4)|0;
    $9 = $8;
    HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
    $$pre5$i$i$i$i$i = ((($4)) + 4|0);
    HEAP8[$$pre5$i$i$i$i$i>>0]=0&255;HEAP8[$$pre5$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre5$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre5$i$i$i$i$i+3>>0]=0>>24;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i = ((($4)) + 4|0);
   $$pre$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i>>2]|0;
   $10 = ($$pre$i$i$i$i$i|0)==(0);
   if (!($10)) {
    $11 = ((($0)) + 4|0);
    HEAP8[$11>>0] = 1;
   }
  }
 } while(0);
 $12 = HEAP32[$arg0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 (_pthread_mutex_unlock(($13|0))|0);
 return;
}
function __ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h5ba69c89de6cc6e7E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hf94a8588ca8ba088E(7378,25,$f)|0);
 return ($0|0);
}
function __ZN4core3ptr13drop_in_place17h02ca12753df04059E($arg0) {
 $arg0 = $arg0|0;
 var $$pre$i$i$i$i$i$i = 0, $$pre5$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$i2$i$i$i$i$i$i$i = 0, $switch2$i$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
   $switch$i2$i$i$i$i$i$i$i = ($4|0)==(0|0);
   if ($switch$i2$i$i$i$i$i$i$i) {
    __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
    // unreachable;
   }
   $5 = HEAP32[$4>>2]|0;
   $switch2$i$i$i$i$i$i$i$i = ($5|0)==(1);
   if (!($switch2$i$i$i$i$i$i$i$i)) {
    $6 = $4;
    $7 = $6;
    HEAP8[$7>>0]=1&255;HEAP8[$7+1>>0]=(1>>8)&255;HEAP8[$7+2>>0]=(1>>16)&255;HEAP8[$7+3>>0]=1>>24;
    $8 = (($6) + 4)|0;
    $9 = $8;
    HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
    $$pre5$i$i$i$i$i$i = ((($4)) + 4|0);
    HEAP8[$$pre5$i$i$i$i$i$i>>0]=0&255;HEAP8[$$pre5$i$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre5$i$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre5$i$i$i$i$i$i+3>>0]=0>>24;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($4)) + 4|0);
   $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
   $10 = ($$pre$i$i$i$i$i$i|0)==(0);
   if (!($10)) {
    $11 = ((($0)) + 4|0);
    HEAP8[$11>>0] = 1;
   }
  }
 } while(0);
 $12 = HEAP32[$arg0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 (_pthread_mutex_unlock(($13|0))|0);
 return;
}
function __ZN3std6thread6Thread6unpark17hdf0c9c337ba9ba11E($self) {
 $self = $self|0;
 var $$index = 0, $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i12 = 0, $$pre$i$i$i$i$i$i31 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre5$i$i$i$i$i$i = 0, $$pre5$i$i$i$i$i$i13 = 0, $$pre5$i$i$i$i$i$i25 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i10 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i29 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4$sroa$0$0$copyload2$i$i$i = 0, $_4$sroa$0$0$copyload2$i$i$i20 = 0, $_4$sroa$0$0$copyload2$i$i$i6 = 0, $_4$sroa$0$0$copyload2$i$i$i65 = 0, $_8$i = 0, $_lock = 0, $success = 0, $success6 = 0, $success9 = 0, $switch$i2$i$i$i$i$i$i$i = 0;
 var $switch$i2$i$i$i$i$i$i$i21 = 0, $switch$i2$i$i$i$i$i$i$i7 = 0, $switch2$i$i$i$i$i$i$i$i = 0, $switch2$i$i$i$i$i$i$i$i23 = 0, $switch2$i$i$i$i$i$i$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_8$i = sp + 8|0;
 $_lock = sp;
 $_4$sroa$0$0$copyload2$i$i$i65 = HEAP32[$self>>2]|0;
 $0 = ((($_4$sroa$0$0$copyload2$i$i$i65)) + 24|0);
 $1 = HEAP32[$0>>2]|0;if (($1|0) == 0) HEAP32[$0>>2] = 2;
 $success = ($1|0)==(0);
 if ($success) {
  STACKTOP = sp;return;
 }
 $2 = ((($_lock)) + 4|0);
 $$index = $1;
 L4: while(1) {
  switch ($$index|0) {
  case 2:  {
   label = 12;
   break L4;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   label = 10;
   break L4;
  }
  }
  $_4$sroa$0$0$copyload2$i$i$i6 = HEAP32[$self>>2]|0;
  $3 = ((($_4$sroa$0$0$copyload2$i$i$i6)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  (_pthread_mutex_lock(($4|0))|0);
  $5 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
  $switch$i2$i$i$i$i$i$i$i7 = ($5|0)==(0|0);
  $6 = $3;
  if ($switch$i2$i$i$i$i$i$i$i7) {
   label = 7;
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $switch2$i$i$i$i$i$i$i$i8 = ($7|0)==(1);
  if ($switch2$i$i$i$i$i$i$i$i8) {
   $$sink$in$phi$trans$insert$i$i$i$i$i$i10 = ((($5)) + 4|0);
   $$pre$i$i$i$i$i$i12 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i10>>2]|0;
   $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i10;$12 = $$pre$i$i$i$i$i$i12;
  } else {
   $8 = $5;
   $9 = $8;
   HEAP8[$9>>0]=1&255;HEAP8[$9+1>>0]=(1>>8)&255;HEAP8[$9+2>>0]=(1>>16)&255;HEAP8[$9+3>>0]=1>>24;
   $10 = (($8) + 4)|0;
   $11 = $10;
   HEAP8[$11>>0]=0&255;HEAP8[$11+1>>0]=(0>>8)&255;HEAP8[$11+2>>0]=(0>>16)&255;HEAP8[$11+3>>0]=0>>24;
   $$pre5$i$i$i$i$i$i13 = ((($5)) + 4|0);
   $$pre$phi$i$i$i$i$i$iZ2D = $$pre5$i$i$i$i$i$i13;$12 = 0;
  }
  HEAP8[$$pre$phi$i$i$i$i$i$iZ2D>>0]=$12&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+1>>0]=($12>>8)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+2>>0]=($12>>16)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+3>>0]=$12>>24;
  $13 = ($12|0)!=(0);
  $14 = ((($_4$sroa$0$0$copyload2$i$i$i6)) + 32|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  $17 = $13&1;
  if (!($16)) {
   label = 9;
   break;
  }
  $22 = $_lock;
  $23 = $22;
  HEAP32[$23>>2] = $6;
  $24 = (($22) + 4)|0;
  $25 = $24;
  HEAP32[$25>>2] = $17;
  $26 = ((($_4$sroa$0$0$copyload2$i$i$i6)) + 24|0);
  $27 = HEAP32[$26>>2]|0;if (($27|0) == 1) HEAP32[$26>>2] = 2;
  $success6 = ($27|0)==(1);
  if ($success6) {
   label = 24;
   break;
  }
  switch ($27|0) {
  case 2:  {
   break L4;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   label = 22;
   break L4;
  }
  }
  $28 = HEAP32[$_lock>>2]|0;
  $29 = HEAP8[$2>>0]|0;
  $30 = ($29<<24>>24)==(0);
  do {
   if ($30) {
    $31 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
    $switch$i2$i$i$i$i$i$i$i21 = ($31|0)==(0|0);
    if ($switch$i2$i$i$i$i$i$i$i21) {
     label = 18;
     break L4;
    }
    $32 = HEAP32[$31>>2]|0;
    $switch2$i$i$i$i$i$i$i$i23 = ($32|0)==(1);
    if (!($switch2$i$i$i$i$i$i$i$i23)) {
     $33 = $31;
     $34 = $33;
     HEAP8[$34>>0]=1&255;HEAP8[$34+1>>0]=(1>>8)&255;HEAP8[$34+2>>0]=(1>>16)&255;HEAP8[$34+3>>0]=1>>24;
     $35 = (($33) + 4)|0;
     $36 = $35;
     HEAP8[$36>>0]=0&255;HEAP8[$36+1>>0]=(0>>8)&255;HEAP8[$36+2>>0]=(0>>16)&255;HEAP8[$36+3>>0]=0>>24;
     $$pre5$i$i$i$i$i$i25 = ((($31)) + 4|0);
     HEAP8[$$pre5$i$i$i$i$i$i25>>0]=0&255;HEAP8[$$pre5$i$i$i$i$i$i25+1>>0]=(0>>8)&255;HEAP8[$$pre5$i$i$i$i$i$i25+2>>0]=(0>>16)&255;HEAP8[$$pre5$i$i$i$i$i$i25+3>>0]=0>>24;
     break;
    }
    $$sink$in$phi$trans$insert$i$i$i$i$i$i29 = ((($31)) + 4|0);
    $$pre$i$i$i$i$i$i31 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i29>>2]|0;
    $37 = ($$pre$i$i$i$i$i$i31|0)==(0);
    if (!($37)) {
     $38 = ((($28)) + 4|0);
     HEAP8[$38>>0] = 1;
    }
   }
  } while(0);
  $39 = HEAP32[$28>>2]|0;
  (_pthread_mutex_unlock(($39|0))|0);
  $_4$sroa$0$0$copyload2$i$i$i = HEAP32[$self>>2]|0;
  $40 = ((($_4$sroa$0$0$copyload2$i$i$i)) + 24|0);
  $41 = HEAP32[$40>>2]|0;if (($41|0) == 0) HEAP32[$40>>2] = 2;
  $success9 = ($41|0)==(0);
  if ($success9) {
   label = 12;
   break;
  } else {
   $$index = $41;
  }
 }
 if ((label|0) == 7) {
  __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
  // unreachable;
 }
 else if ((label|0) == 9) {
  $18 = $_8$i;
  $19 = $18;
  HEAP32[$19>>2] = $6;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $17;
  __ZN4core6result13unwrap_failed17h9ef61d4721a2abfdE($_8$i);
  // unreachable;
 }
 else if ((label|0) == 10) {
  __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(7403,28,3040);
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 18) {
  __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
  // unreachable;
 }
 else if ((label|0) == 22) {
  __THREW__ = 0;
  invoke_viii(95,(7403|0),28,(3056|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = ___cxa_find_matching_catch_2()|0;
  $44 = tempRet0;
  __ZN4core3ptr13drop_in_place17h9a38c2a898c5e094E($_lock);
  ___resumeException($43|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $_4$sroa$0$0$copyload2$i$i$i20 = HEAP32[$self>>2]|0;
  $45 = ((($_4$sroa$0$0$copyload2$i$i$i20)) + 36|0);
  $46 = HEAP32[$45>>2]|0;
  (_pthread_cond_signal(($46|0))|0);
 }
 $47 = HEAP32[$_lock>>2]|0;
 $48 = HEAP8[$2>>0]|0;
 $49 = ($48<<24>>24)==(0);
 do {
  if ($49) {
   $50 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
   $switch$i2$i$i$i$i$i$i$i = ($50|0)==(0|0);
   if ($switch$i2$i$i$i$i$i$i$i) {
    __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
    // unreachable;
   }
   $51 = HEAP32[$50>>2]|0;
   $switch2$i$i$i$i$i$i$i$i = ($51|0)==(1);
   if (!($switch2$i$i$i$i$i$i$i$i)) {
    $52 = $50;
    $53 = $52;
    HEAP8[$53>>0]=1&255;HEAP8[$53+1>>0]=(1>>8)&255;HEAP8[$53+2>>0]=(1>>16)&255;HEAP8[$53+3>>0]=1>>24;
    $54 = (($52) + 4)|0;
    $55 = $54;
    HEAP8[$55>>0]=0&255;HEAP8[$55+1>>0]=(0>>8)&255;HEAP8[$55+2>>0]=(0>>16)&255;HEAP8[$55+3>>0]=0>>24;
    $$pre5$i$i$i$i$i$i = ((($50)) + 4|0);
    HEAP8[$$pre5$i$i$i$i$i$i>>0]=0&255;HEAP8[$$pre5$i$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre5$i$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre5$i$i$i$i$i$i+3>>0]=0>>24;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($50)) + 4|0);
   $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
   $56 = ($$pre$i$i$i$i$i$i|0)==(0);
   if (!($56)) {
    $57 = ((($47)) + 4|0);
    HEAP8[$57>>0] = 1;
   }
  }
 } while(0);
 $58 = HEAP32[$47>>2]|0;
 (_pthread_mutex_unlock(($58|0))|0);
 STACKTOP = sp;return;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h99219cca8058aad9E($self,$additional) {
 $self = $self|0;
 $additional = $additional|0;
 var $$50$i = 0, $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_33$sroa$0$0$copyload4849$i = 0, $_47$i = 0, $e$sroa$4$0$$sroa_idx$i = 0;
 var $err$i$i = 0, $err$i11$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0, $res$sroa$5$2$i = 0, $res$sroa$5$4$copyload25$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i11$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_47$i = sp;
 $0 = ((($self)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($self)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - ($1))|0;
 $5 = ($4>>>0)<($additional>>>0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $$arith = (($1) + ($additional))|0;
 $$overflow = ($$arith>>>0)<($1>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h6800fb08054f8544E(6758,17);
  // unreachable;
 }
 $6 = $3 << 1;
 $7 = ($$arith>>>0)>=($6>>>0);
 $_0$0$sroa$speculated$i$i$i$i = $7 ? $$arith : $6;
 $$arith2 = ($_0$0$sroa$speculated$i$i$i$i*12)|0;
 $$overflow3 = ($_0$0$sroa$speculated$i$i$i$i>>>0)>(357913941);
 if ($$overflow3) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(3072);
  // unreachable;
 }
 $8 = ($$arith2|0)<(0);
 if ($8) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2824);
  // unreachable;
 }
 $9 = ($3|0)==(0);
 if ($9) {
  $10 = (___rust_alloc($$arith2,4,$err$i11$i)|0);
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$50$i = $11&1;
  $26 = 0;$29 = 0;$res$sroa$0$0$i = $$50$i;$res$sroa$5$2$i = $12;
 } else {
  $13 = ($3*12)|0;
  $_33$sroa$0$0$copyload4849$i = HEAP32[$self>>2]|0;
  $14 = (___rust_realloc($_33$sroa$0$0$copyload4849$i,$13,4,$$arith2,4,$err$i$i)|0);
  $15 = ($14|0)==(0|0);
  $res$sroa$5$4$copyload25$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $16 = $res$sroa$11$4$$sroa_idx$i;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $14;
  $res$sroa$5$1$i = $15 ? $res$sroa$5$4$copyload25$i : $22;
  $$sink$i$i = $15&1;
  $26 = $18;$29 = $21;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $switch$i = ($res$sroa$0$0$i|0)==(1);
 if ($switch$i) {
  HEAP32[$_47$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_47$i)) + 4|0);
  $24 = $e$sroa$4$0$$sroa_idx$i;
  $25 = $24;
  HEAP32[$25>>2] = $26;
  $27 = (($24) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $29;
  ___rust_oom($_47$i);
  // unreachable;
 }
 $23 = $res$sroa$5$2$i;
 HEAP32[$self>>2] = $23;
 HEAP32[$2>>2] = $_0$0$sroa$speculated$i$i$i$i;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h0225c0bf549aeaafE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$arg0>>2]|0;
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN4core3ptr13drop_in_place17h7939b4d3aee5839aE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$112$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i6$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_2$sroa$0$0$copyload2$i$i$i$i = HEAP32[$arg0>>2]|0;
 $0 = ((($arg0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($_2$sroa$0$0$copyload2$i$i$i$i) + (($1*12)|0)|0);
 $3 = ($1|0)==(0);
 if (!($3)) {
  $_10$112$i$i = $_2$sroa$0$0$copyload2$i$i$i$i;
  while(1) {
   $4 = ((($_10$112$i$i)) + 12|0);
   $5 = ((($_10$112$i$i)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$_10$112$i$i>>2]|0;
    ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i,$6,1);
   }
   $8 = ($4|0)==($2|0);
   if ($8) {
    break;
   } else {
    $_10$112$i$i = $4;
   }
  }
 }
 $9 = ((($arg0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = ($10*12)|0;
 $_2$sroa$0$0$copyload2$i6$i$i$i = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i6$i$i$i,$12,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h0649555e37f755a2E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $cond = ($0|0)==(0);
 if ($cond) {
  return;
 }
 $1 = ((($arg0)) + 4|0);
 __ZN4core3ptr13drop_in_place17hff6abf3e64b8d9d6E($1);
 return;
}
function __ZN3std10sys_common11at_exit_imp4push17h2a0baa62f267fe68E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$sroa_idx$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$sroa$0$0$copyload2$i$i$i = 0, $_5$i$i$i$i = 0, $err$i$i$i = 0, $ret$0$off09 = 0, $value$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $value$i = sp + 32|0;
 $err$i$i$i = sp + 16|0;
 $_5$i$i$i$i = sp;
 (_pthread_mutex_lock(((13528)|0))|0);
 $2 = HEAP32[3389]|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $6 = (___rust_alloc(12,4,$err$i$i$i)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    ___rust_oom($_5$i$i$i$i);
    // unreachable;
   } else {
    HEAP32[$6>>2] = 4;
    $$sroa_idx$i$i = ((($6)) + 4|0);
    HEAP32[$$sroa_idx$i$i>>2] = 0;
    $8 = ((($6)) + 8|0);
    HEAP32[$8>>2] = 0;
    HEAP32[3389] = $6;
    $11 = $6;
    break L1;
   }
   break;
  }
  case 1:  {
   (_pthread_mutex_unlock(((13528)|0))|0);
   $25 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($25|0,($0|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    __ZN5alloc4heap8box_free17h4b65c90a039c8535E($0,$1);
    ___resumeException($33|0);
    // unreachable;
   }
   $28 = ((($1)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   if ($30) {
    $ret$0$off09 = 0;
    STACKTOP = sp;return ($ret$0$off09|0);
   }
   $31 = ((($1)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   ___rust_dealloc($0,$29,$32);
   $ret$0$off09 = 0;
   STACKTOP = sp;return ($ret$0$off09|0);
   break;
  }
  default: {
   $11 = $5;
  }
  }
 } while(0);
 HEAP32[$value$i>>2] = $0;
 $9 = ((($value$i)) + 4|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($11)) + 8|0);
 $12 = HEAP32[$10>>2]|0;
 $13 = ((($11)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 do {
  if ($15) {
   __THREW__ = 0;
   invoke_vi(137,($11|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = tempRet0;
    __ZN4core3ptr13drop_in_place17h1f31e783515dcf44E($value$i);
    ___resumeException($16|0);
    // unreachable;
   } else {
    $$pre$i = HEAP32[$10>>2]|0;
    $21 = $$pre$i;
    break;
   }
  } else {
   $21 = $12;
  }
 } while(0);
 $_2$sroa$0$0$copyload2$i$i$i = HEAP32[$11>>2]|0;
 $20 = (($_2$sroa$0$0$copyload2$i$i$i) + ($21<<3)|0);
 HEAP32[$20>>2] = $3;
 $22 = (((($_2$sroa$0$0$copyload2$i$i$i) + ($21<<3)|0)) + 4|0);
 HEAP32[$22>>2] = $4;
 $23 = HEAP32[$10>>2]|0;
 $24 = (($23) + 1)|0;
 HEAP32[$10>>2] = $24;
 (_pthread_mutex_unlock(((13528)|0))|0);
 $ret$0$off09 = 1;
 STACKTOP = sp;return ($ret$0$off09|0);
}
function __ZN4core3ptr13drop_in_place17h1f31e783515dcf44E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi($3|0,($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$arg0>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  __ZN5alloc4heap8box_free17h4b65c90a039c8535E($15,$16);
  ___resumeException($13|0);
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 $10 = HEAP32[$arg0>>2]|0;
 $11 = ((($6)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 ___rust_dealloc($10,$8,$12);
 return;
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h89ce0fba6bf46c77E($self) {
 $self = $self|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_11$sroa$0$0 = 0, $_11$sroa$5$0$in = 0, $_31$sroa$0$0$copyload6465 = 0, $_42 = 0, $_58 = 0, $e$sroa$4$0$$sroa_idx = 0, $err$i = 0, $err$i$i = 0, $ptr_res$sroa$4$4$copyload36 = 0, $ptr_res$sroa$8$4$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i = sp + 48|0;
 $err$i$i = sp + 32|0;
 $_58 = sp + 16|0;
 $_42 = sp;
 $0 = ((($self)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = $1 << 3;
 if ($2) {
  $19 = (___rust_alloc(32,4,$err$i$i)|0);
  $20 = ($19|0)==(0|0);
  if ($20) {
   ___rust_oom($_58);
   // unreachable;
  }
  $$pre$phiZ2D = $self;$_11$sroa$0$0 = 4;$_11$sroa$5$0$in = $19;
  HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0$in;
  HEAP32[$0>>2] = $_11$sroa$0$0;
  STACKTOP = sp;return;
 }
 $4 = $1 << 4;
 $5 = ($4|0)<(0);
 if ($5) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2824);
  // unreachable;
 }
 $_31$sroa$0$0$copyload6465 = HEAP32[$self>>2]|0;
 $6 = (___rust_realloc($_31$sroa$0$0$copyload6465,$3,4,$4,4,$err$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $ptr_res$sroa$4$4$copyload36 = HEAP32[$err$i>>2]|0;
  $ptr_res$sroa$8$4$$sroa_idx = ((($err$i)) + 4|0);
  $9 = $ptr_res$sroa$8$4$$sroa_idx;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$_42>>2] = $ptr_res$sroa$4$4$copyload36;
  $e$sroa$4$0$$sroa_idx = ((($_42)) + 4|0);
  $15 = $e$sroa$4$0$$sroa_idx;
  $16 = $15;
  HEAP32[$16>>2] = $11;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  ___rust_oom($_42);
  // unreachable;
 }
 $8 = $1 << 1;
 $$pre$phiZ2D = $self;$_11$sroa$0$0 = $8;$_11$sroa$5$0$in = $6;
 HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0$in;
 HEAP32[$0>>2] = $_11$sroa$0$0;
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17h4b65c90a039c8535E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN3std2io5stdio6stdout17h50393728fd37ff08E() {
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_4$sroa$0$0$copyload2$i$i$i$i = 0, $_5$i$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i = 0, $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i = 0, $magicptr$i = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $self$i = sp + 64|0;
 $err$i$i$i$i$i = sp + 48|0;
 $_5$i$i$i$i$i$i = sp + 32|0;
 $err$i$i$i$i$i$i = sp + 16|0;
 $_5$i$i$i$i$i$i$i = sp;
 (_pthread_mutex_lock(((3096)|0))|0);
 $0 = HEAP32[(3124)>>2]|0;
 $magicptr$i = $0;
 L1: do {
  switch ($magicptr$i|0) {
  case 0:  {
   $1 = (___rust_alloc(4,4,$err$i$i$i$i$i$i)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    ___rust_oom($_5$i$i$i$i$i$i$i);
    // unreachable;
   }
   HEAP32[$1>>2] = 3096;
   $3 = (__ZN3std10sys_common11at_exit_imp4push17h2a0baa62f267fe68E($1,288)|0);
   $4 = HEAP32[(3128)>>2]|0;
   $5 = (FUNCTION_TABLE_i[$4 & 255]()|0);
   $6 = $5;
   if ($3) {
    $7 = HEAP32[$6>>2]|0;HEAP32[$6>>2] = (($7+1)|0);
    $8 = ($7|0)<(0);
    if ($8) {
     _llvm_trap();
     // unreachable;
    }
    $9 = (___rust_alloc(4,4,$err$i$i$i$i$i)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     ___rust_oom($_5$i$i$i$i$i$i);
     // unreachable;
    } else {
     HEAP32[$9>>2] = $6;
     $11 = $9;
     HEAP32[(3124)>>2] = $11;
     $$sink$i = $6;
     break L1;
    }
   } else {
    $$sink$i = $6;
   }
   break;
  }
  case 1:  {
   $$sink$i = 0;
   break;
  }
  default: {
   $_4$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
   $12 = HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i>>2] = (($12+1)|0);
   $13 = ($12|0)<(0);
   if ($13) {
    _llvm_trap();
    // unreachable;
   } else {
    $$sink$i = $_4$sroa$0$0$copyload2$i$i$i$i;
   }
  }
  }
 } while(0);
 $14 = $$sink$i;
 (_pthread_mutex_unlock(((3096)|0))|0);
 HEAP32[$self$i>>2] = $14;
 $15 = ($$sink$i|0)==(0|0);
 if ($15) {
  __THREW__ = 0;
  invoke_vii(133,(7431|0),36);
  $16 = __THREW__; __THREW__ = 0;
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  __ZN4core3ptr13drop_in_place17h34c48095c0430192E($self$i);
  ___resumeException($17|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h34c48095c0430192E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h1842960a728cf569E($arg0);
 return;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h1842960a728cf569E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_3$sroa$0$0$copyload23 = 0, $_4$sroa$0$0$copyload2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_3$sroa$0$0$copyload23 = HEAP32[$self>>2]|0;
 $0 = ((($_3$sroa$0$0$copyload23)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 (_pthread_mutex_destroy(($1|0))|0);
 $2 = HEAP32[$0>>2]|0;
 ___rust_dealloc($2,28,4);
 $3 = ((($_3$sroa$0$0$copyload23)) + 16|0);
 __ZN4core3ptr13drop_in_place17h62e379e852660d2eE($3);
 $_4$sroa$0$0$copyload2$i$i = HEAP32[$self>>2]|0;
 $4 = ((($_4$sroa$0$0$copyload2$i$i)) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5-1)|0);
 $6 = ($5|0)==(1);
 if (!($6)) {
  return;
 }
 /* fence */;
 ___rust_dealloc($_3$sroa$0$0$copyload23,40,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h62e379e852660d2eE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, $_r$i$i$i = 0, $cond$i$i$i$i = 0, $eh$lpad$body$i$i$index2Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0;
 var $switch$i$i$i$i = 0, $switch$i1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_r$i$i$i = sp;
 $0 = ((($arg0)) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $switch$i$i$i$i = ($1<<24>>24)==(1);
 if ($switch$i$i$i$i) {
  $2 = ((($arg0)) + 14|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   __THREW__ = 0;
   invoke_vii(138,($_r$i$i$i|0),($arg0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    $eh$lpad$body$i$i$index2Z2D = $34;$eh$lpad$body$i$i$indexZ2D = $33;
    __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($arg0);
    ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
    // unreachable;
   }
   $7 = HEAP32[$_r$i$i$i>>2]|0;
   $cond$i$i$i$i = ($7|0)==(0);
   if (!($cond$i$i$i$i)) {
    $8 = ((($_r$i$i$i)) + 4|0);
    $9 = HEAP8[$8>>0]|0;
    $switch$i1$i$i$i = ($9&255)<(2);
    if (!($switch$i1$i$i$i)) {
     $10 = ((($_r$i$i$i)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($11)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($11)) + 8|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = HEAP32[$15>>2]|0;
     __THREW__ = 0;
     invoke_vi($16|0,($13|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      $26 = ___cxa_find_matching_catch_2()|0;
      $27 = tempRet0;
      $28 = HEAP32[$12>>2]|0;
      $29 = HEAP32[$14>>2]|0;
      __ZN5alloc4heap8box_free17he2c7ab366ae97083E($28,$29);
      __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($11);
      $eh$lpad$body$i$i$index2Z2D = $27;$eh$lpad$body$i$i$indexZ2D = $26;
      __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($arg0);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
     }
     $19 = HEAP32[$14>>2]|0;
     $20 = ((($19)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0);
     if (!($22)) {
      $23 = HEAP32[$12>>2]|0;
      $24 = ((($19)) + 8|0);
      $25 = HEAP32[$24>>2]|0;
      ___rust_dealloc($23,$21,$25);
     }
     ___rust_dealloc($11,12,4);
    }
   }
  }
 }
 $30 = ((($arg0)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i,$31,1);
 STACKTOP = sp;return;
}
function __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h1fc90e4056f7bc50E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$pre = 0, $$pre215 = 0, $$pre216 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $_0$0$sroa$speculated$i$i$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i1$i$i = 0, $_3$i$i$i = 0, $_4$sroa$0$i$i$i$i = 0;
 var $_5$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i$i = 0, $_5$i$sroa$0$0 = 0, $_5$sroa$4$0$$sroa_raw_idx$i = 0, $_5$sroa$4$i = 0, $_5$sroa$411$0$$sroa_idx$i = 0, $_5$sroa$5$0$$sroa_idx$i = 0, $cond171 = 0, $cond5 = 0, $eh$lpad$body125$index2Z2D = 0, $eh$lpad$body125$indexZ2D = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $extract$t217$clear = 0, $not$switch$i76 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$10$0 = 0, $r = 0, $ret = 0, $switch = 0;
 var $switch$i118 = 0, $switch$i78 = 0, $written$0197 = 0, $written$0199 = 0, $written$1231 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $err$i$i$i$i = sp + 112|0;
 $_5$i$i$i$i$i = sp + 96|0;
 $_5$sroa$4$i = sp + 124|0;
 $err$i$i$i$i$i$i$i = sp + 80|0;
 $_5$i$i$i$i$i$i$i$i = sp + 64|0;
 $_4$sroa$0$i$i$i$i = sp + 48|0;
 $_3$i$i$i = sp + 32|0;
 $r = sp + 16|0;
 $ret = sp;
 $1 = ((($self)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ret>>2] = 0;
 $3 = ($2|0)==(0);
 if ($3) {
  ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = ((($self)) + 14|0);
 $5 = ((($self)) + 12|0);
 $6 = ((($self)) + 13|0);
 $7 = ((($r)) + 4|0);
 $8 = ((($r)) + 4|0);
 $9 = ((($r)) + 8|0);
 $written$0199 = 0;
 L4: while(1) {
  HEAP8[$4>>0] = 1;
  $11 = HEAP8[$5>>0]|0;
  $not$switch$i76 = ($11<<24>>24)==(1);
  if (!($not$switch$i76)) {
   label = 5;
   break;
  }
  $13 = HEAP32[$1>>2]|0;
  $14 = ($13>>>0)<($written$0199>>>0);
  if ($14) {
   label = 8;
   break;
  }
  $16 = (($13) - ($written$0199))|0;
  $17 = HEAP8[$6>>0]|0;
  $switch$i78 = ($17<<24>>24)==(1);
  do {
   if ($switch$i78) {
    label = 13;
   } else {
    $_2$sroa$0$0$copyload2$i$i$i = HEAP32[$self>>2]|0;
    $18 = (($_2$sroa$0$0$copyload2$i$i$i) + ($written$0199)|0);
    $19 = ($16|0)>(-1);
    $_0$0$sroa$speculated$i$i$i$i$i$i = $19 ? $16 : 2147483647;
    $20 = (_write(1,$18,$_0$0$sroa$speculated$i$i$i$i$i$i)|0);
    $21 = ($20|0)==(-1);
    if ($21) {
     $22 = (___errno_location()|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(9);
     if ($24) {
      label = 13;
      break;
     } else {
      $27 = 0;$30 = $23;$_5$i$sroa$0$0 = 1;
     }
    } else {
     $27 = $20;$30 = 0;$_5$i$sroa$0$0 = 0;
    }
    HEAP32[$r>>2] = $_5$i$sroa$0$0;
    $25 = $8;
    $26 = $25;
    HEAP32[$26>>2] = $27;
    $28 = (($25) + 4)|0;
    $29 = $28;
    HEAP32[$29>>2] = $30;
    $31 = $27&255;
    HEAP8[$4>>0] = 0;
    $switch = ($_5$i$sroa$0$0|0)==(1);
    if ($switch) {
     $40 = $27&255;
     $41 = (_bitshift64Lshr(($27|0),($30|0),8)|0);
     $42 = tempRet0;
     $43 = $41&255;
     $extract$t217$clear = $40 & 3;
     switch ($extract$t217$clear<<24>>24) {
     case 0:  {
      $44 = HEAP32[$9>>2]|0;
      $cond171 = ($44|0)==(4);
      if (!($cond171)) {
       label = 42;
       break L4;
      }
      break;
     }
     case 1:  {
      $46 = $43;
      label = 26;
      break;
     }
     case 2:  {
      $45 = HEAP32[$9>>2]|0;
      $$pre = HEAP8[$45>>0]|0;
      $46 = $$pre;
      label = 26;
      break;
     }
     default: {
      label = 23;
      break L4;
     }
     }
     if ((label|0) == 26) {
      label = 0;
      $47 = ($46<<24>>24)==(15);
      if (!($47)) {
       label = 42;
       break L4;
      }
     }
     $switch$i118 = ($31&255)<(2);
     if ($switch$i118) {
      $written$1231 = $written$0199;
     } else {
      $48 = HEAP32[$9>>2]|0;
      $49 = ((($48)) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ((($48)) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = HEAP32[$52>>2]|0;
      __THREW__ = 0;
      invoke_vi($53|0,($50|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 31;
       break L4;
      }
      $56 = HEAP32[$51>>2]|0;
      $57 = ((($56)) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==(0);
      if (!($59)) {
       $60 = HEAP32[$49>>2]|0;
       $61 = ((($56)) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       ___rust_dealloc($60,$58,$62);
      }
      ___rust_dealloc($48,12,4);
      $written$1231 = $written$0199;
     }
    } else {
     $39 = $27;
     label = 21;
    }
   }
  } while(0);
  if ((label|0) == 13) {
   label = 0;
   HEAP32[$r>>2] = 0;
   HEAP32[$7>>2] = $16;
   HEAP8[$4>>0] = 0;
   $39 = $16;
   label = 21;
  }
  if ((label|0) == 21) {
   label = 0;
   $cond5 = ($39|0)==(0);
   if ($cond5) {
    label = 15;
    break;
   }
   $38 = (($39) + ($written$0199))|0;
   $written$1231 = $38;
  }
  $67 = ($written$1231>>>0)<($2>>>0);
  if ($67) {
   $written$0199 = $written$1231;
  } else {
   $written$0197 = $written$1231;
   label = 3;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   __THREW__ = 0;
   invoke_vi(91,(2280|0));
   $12 = __THREW__; __THREW__ = 0;
   label = 43;
  }
  else if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vii(125,($written$0199|0),($13|0));
   $15 = __THREW__; __THREW__ = 0;
   label = 43;
  }
  else if ((label|0) == 15) {
   __THREW__ = 0;
   invoke_viii(123,($_3$i$i$i|0),(7467|0),33);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $74 = ___cxa_find_matching_catch_2()|0;
    $75 = tempRet0;
    __ZN4core3ptr13drop_in_place17h578a67b9e8187303E($r);
    $personalityslot$sroa$0$0 = $74;$personalityslot$sroa$10$0 = $75;
    __ZN4core3ptr13drop_in_place17h0649555e37f755a2E($ret);
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   ;HEAP32[$_4$sroa$0$i$i$i$i>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
   $34 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
   $35 = ($34|0)==(0|0);
   if ($35) {
    ___rust_oom($_5$i$i$i$i$i$i$i$i);
    // unreachable;
   }
   ;HEAP32[$34>>2]=HEAP32[$_4$sroa$0$i$i$i$i>>2]|0;HEAP32[$34+4>>2]=HEAP32[$_4$sroa$0$i$i$i$i+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$_4$sroa$0$i$i$i$i+8>>2]|0;
   $36 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
   $37 = ($36|0)==(0|0);
   if ($37) {
    ___rust_oom($_5$i$i$i$i$i);
    // unreachable;
   } else {
    HEAP8[$36>>0] = 14;
    $_5$sroa$4$0$$sroa_raw_idx$i = ((($36)) + 1|0);
    ;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
    $_5$sroa$411$0$$sroa_idx$i = ((($36)) + 4|0);
    HEAP32[$_5$sroa$411$0$$sroa_idx$i>>2] = $34;
    $_5$sroa$5$0$$sroa_idx$i = ((($36)) + 8|0);
    HEAP32[$_5$sroa$5$0$$sroa_idx$i>>2] = 104;
    $76 = $36;
    $$pre216 = ((($ret)) + 4|0);
    HEAP32[$ret>>2] = 1;
    $77 = $$pre216;
    $78 = $77;
    HEAP32[$78>>2] = 2;
    $79 = (($77) + 4)|0;
    $80 = $79;
    HEAP32[$80>>2] = $76;
    label = 41;
    break;
   }
  }
  else if ((label|0) == 23) {
   // unreachable;
  }
  else if ((label|0) == 31) {
   $63 = ___cxa_find_matching_catch_2()|0;
   $64 = tempRet0;
   $65 = HEAP32[$49>>2]|0;
   $66 = HEAP32[$51>>2]|0;
   __ZN5alloc4heap8box_free17he2c7ab366ae97083E($65,$66);
   __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($48);
   $eh$lpad$body125$index2Z2D = $64;$eh$lpad$body125$indexZ2D = $63;
  }
  else if ((label|0) == 42) {
   $81 = $8;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $$pre215 = ((($ret)) + 4|0);
   HEAP32[$ret>>2] = 1;
   $87 = $$pre215;
   $88 = $87;
   HEAP32[$88>>2] = $83;
   $89 = (($87) + 4)|0;
   $90 = $89;
   HEAP32[$90>>2] = $86;
   label = 41;
  }
 } while(0);
 if ((label|0) == 41) {
  $written$0197 = $written$0199;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $10 = ($written$0197|0)==(0);
   if ($10) {
    ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
    STACKTOP = sp;return;
   }
   $68 = HEAP32[$1>>2]|0;
   $69 = ($68>>>0)<($written$0197>>>0);
   if ($69) {
    __THREW__ = 0;
    invoke_vi(91,(3132|0));
    $70 = __THREW__; __THREW__ = 0;
    label = 43;
    break;
   }
   HEAP32[$1>>2] = 0;
   $71 = (($68) - ($written$0197))|0;
   $72 = ($71|0)==(0);
   if ($72) {
    ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
    STACKTOP = sp;return;
   }
   $_2$sroa$0$0$copyload2$i$i1$i$i = HEAP32[$self>>2]|0;
   $73 = (($_2$sroa$0$0$copyload2$i$i1$i$i) + ($written$0197)|0);
   _memmove(($_2$sroa$0$0$copyload2$i$i1$i$i|0),($73|0),($71|0))|0;
   HEAP32[$1>>2] = $71;
   ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 43) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = tempRet0;
  $eh$lpad$body125$index2Z2D = $92;$eh$lpad$body125$indexZ2D = $91;
 }
 $personalityslot$sroa$0$0 = $eh$lpad$body125$indexZ2D;$personalityslot$sroa$10$0 = $eh$lpad$body125$index2Z2D;
 __ZN4core3ptr13drop_in_place17h0649555e37f755a2E($ret);
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h3e3023433e3be95fE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17hcdcc383566b9089aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$0$0$copyload = 0, $_4$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_3$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $1 = $_3$sroa$0$0$copyload;
 (_pthread_mutex_lock(($1|0))|0);
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP8[$2>>0]=1&255;HEAP8[$2+1>>0]=(1>>8)&255;HEAP8[$2+2>>0]=(1>>16)&255;HEAP8[$2+3>>0]=1>>24;
 (_pthread_mutex_unlock(($1|0))|0);
 $_4$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$3>>2]|0;
 $4 = HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i$i$i>>2] = (($4-1)|0);
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___rust_dealloc($3,4,4);
  ___rust_dealloc($0,4,4);
  return;
 }
 /* fence */;
 __THREW__ = 0;
 invoke_vi(139,($3|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  __ZN5alloc4heap8box_free17hb306821afa7fb2c8E($3);
  __ZN5alloc4heap8box_free17h553f82cf1703f288E($0);
  ___resumeException($8|0);
  // unreachable;
 } else {
  ___rust_dealloc($3,4,4);
  ___rust_dealloc($0,4,4);
  return;
 }
}
function __ZN5alloc4heap8box_free17hb306821afa7fb2c8E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,4,4);
 return;
}
function __ZN5alloc4heap8box_free17h553f82cf1703f288E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,4,4);
 return;
}
function __ZN3std2io5stdio6stdout11stdout_init17hfaa3f66fb886e63fE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_35$i$i$i$i$i$i = 0, $_5$i$i$i$i = 0, $_5$i$i$i$i6 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_6$sroa$4$sroa$0$0$_6$sroa$4$0$$sroa_raw_idx$sroa_idx = 0, $_6$sroa$4$sroa$4$sroa$0$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx = 0, $_6$sroa$4$sroa$4$sroa$10$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = 0, $_6$sroa$4$sroa$4$sroa$11 = 0, $_6$sroa$4$sroa$4$sroa$11$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = 0, $_6$sroa$4$sroa$4$sroa$4$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx = 0;
 var $_6$sroa$4$sroa$4$sroa$5$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx = 0, $_6$sroa$4$sroa$4$sroa$6$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = 0, $_6$sroa$4$sroa$4$sroa$7$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = 0, $_6$sroa$4$sroa$4$sroa$8$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = 0, $_6$sroa$5$0$$sroa_raw_idx = 0, $_6$sroa$6 = 0, $_6$sroa$6$0$$sroa_raw_idx = 0, $_7$sroa$4$sroa$11 = 0, $_8$sroa$10 = 0, $attr$i$i = 0, $err$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $err$i$i$i5 = 0, $mutex$sroa$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $err$i$i$i5 = sp + 88|0;
 $_5$i$i$i$i6 = sp + 72|0;
 $attr$i$i = sp + 64|0;
 $err$i$i$i = sp + 48|0;
 $_5$i$i$i$i = sp + 32|0;
 $mutex$sroa$7$i = sp + 112|0;
 $err$i$i$i$i$i$i$i = sp + 16|0;
 $_35$i$i$i$i$i$i = sp;
 $_8$sroa$10 = sp + 109|0;
 $_7$sroa$4$sroa$11 = sp + 106|0;
 $_6$sroa$4$sroa$4$sroa$11 = sp + 103|0;
 $_6$sroa$6 = sp + 100|0;
 $0 = (___rust_alloc(1024,1,$err$i$i$i$i$i$i$i)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___rust_oom($_35$i$i$i$i$i$i);
  // unreachable;
 }
 $2 = $0;
 ;HEAP8[$_7$sroa$4$sroa$11>>0]=HEAP8[$_8$sroa$10>>0]|0;HEAP8[$_7$sroa$4$sroa$11+1>>0]=HEAP8[$_8$sroa$10+1>>0]|0;HEAP8[$_7$sroa$4$sroa$11+2>>0]=HEAP8[$_8$sroa$10+2>>0]|0;
 $3 = (___rust_alloc(28,4,$err$i$i$i)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  ___rust_oom($_5$i$i$i$i);
  // unreachable;
 }
 (_pthread_mutexattr_init(($attr$i$i|0))|0);
 (_pthread_mutexattr_settype(($attr$i$i|0),1)|0);
 (_pthread_mutex_init(($3|0),($attr$i$i|0))|0);
 (_pthread_mutexattr_destroy(($attr$i$i|0))|0);
 ;HEAP8[$_6$sroa$4$sroa$4$sroa$11>>0]=HEAP8[$_7$sroa$4$sroa$11>>0]|0;HEAP8[$_6$sroa$4$sroa$4$sroa$11+1>>0]=HEAP8[$_7$sroa$4$sroa$11+1>>0]|0;HEAP8[$_6$sroa$4$sroa$4$sroa$11+2>>0]=HEAP8[$_7$sroa$4$sroa$11+2>>0]|0;
 ;HEAP8[$_6$sroa$6>>0]=HEAP8[$mutex$sroa$7$i>>0]|0;HEAP8[$_6$sroa$6+1>>0]=HEAP8[$mutex$sroa$7$i+1>>0]|0;HEAP8[$_6$sroa$6+2>>0]=HEAP8[$mutex$sroa$7$i+2>>0]|0;
 $5 = (___rust_alloc(40,4,$err$i$i$i5)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  ___rust_oom($_5$i$i$i$i6);
  // unreachable;
 } else {
  $7 = $3;
  HEAP32[$5>>2] = 1;
  $_5$sroa$0$0$$sroa_idx$i = ((($5)) + 4|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 1;
  $_6$sroa$0$0$$sroa_idx = ((($5)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx>>2] = $7;
  $_6$sroa$4$sroa$0$0$_6$sroa$4$0$$sroa_raw_idx$sroa_idx = ((($5)) + 12|0);
  HEAP32[$_6$sroa$4$sroa$0$0$_6$sroa$4$0$$sroa_raw_idx$sroa_idx>>2] = 0;
  $_6$sroa$4$sroa$4$sroa$0$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx = ((($5)) + 16|0);
  HEAP32[$_6$sroa$4$sroa$4$sroa$0$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx>>2] = $2;
  $_6$sroa$4$sroa$4$sroa$4$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx = ((($5)) + 20|0);
  HEAP32[$_6$sroa$4$sroa$4$sroa$4$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx>>2] = 1024;
  $_6$sroa$4$sroa$4$sroa$5$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx = ((($5)) + 24|0);
  HEAP32[$_6$sroa$4$sroa$4$sroa$5$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_idx>>2] = 0;
  $_6$sroa$4$sroa$4$sroa$6$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = ((($5)) + 28|0);
  HEAP8[$_6$sroa$4$sroa$4$sroa$6$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx>>0] = 1;
  $_6$sroa$4$sroa$4$sroa$7$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = ((($5)) + 29|0);
  HEAP8[$_6$sroa$4$sroa$4$sroa$7$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx>>0] = 0;
  $_6$sroa$4$sroa$4$sroa$8$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = ((($5)) + 30|0);
  HEAP8[$_6$sroa$4$sroa$4$sroa$8$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx>>0] = 0;
  $_6$sroa$4$sroa$4$sroa$10$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = ((($5)) + 32|0);
  HEAP8[$_6$sroa$4$sroa$4$sroa$10$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx>>0] = 0;
  $_6$sroa$4$sroa$4$sroa$11$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx = ((($5)) + 33|0);
  ;HEAP8[$_6$sroa$4$sroa$4$sroa$11$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx>>0]=HEAP8[$_6$sroa$4$sroa$4$sroa$11>>0]|0;HEAP8[$_6$sroa$4$sroa$4$sroa$11$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx+1>>0]=HEAP8[$_6$sroa$4$sroa$4$sroa$11+1>>0]|0;HEAP8[$_6$sroa$4$sroa$4$sroa$11$0$_6$sroa$4$sroa$4$0$_6$sroa$4$0$$sroa_raw_idx$sroa_raw_idx$sroa_raw_idx+2>>0]=HEAP8[$_6$sroa$4$sroa$4$sroa$11+2>>0]|0;
  $_6$sroa$5$0$$sroa_raw_idx = ((($5)) + 36|0);
  HEAP8[$_6$sroa$5$0$$sroa_raw_idx>>0] = 0;
  $_6$sroa$6$0$$sroa_raw_idx = ((($5)) + 37|0);
  ;HEAP8[$_6$sroa$6$0$$sroa_raw_idx>>0]=HEAP8[$_6$sroa$6>>0]|0;HEAP8[$_6$sroa$6$0$$sroa_raw_idx+1>>0]=HEAP8[$_6$sroa$6+1>>0]|0;HEAP8[$_6$sroa$6$0$$sroa_raw_idx+2>>0]=HEAP8[$_6$sroa$6+2>>0]|0;
  $8 = $5;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h80a3da35d43bb809E($0,$self,$buf$ptr,$buf$meta) {
 $0 = $0|0;
 $self = $self|0;
 $buf$ptr = $buf$ptr|0;
 $buf$meta = $buf$meta|0;
 var $$sink$i = 0, $$sroa_idx$i = 0, $$sroa_idx120$i = 0, $$sroa_idx3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_16$i = 0, $_2$i$i$i = 0, $_2$i$i60$i = 0, $_2$sroa$0$0$$sroa_idx2$i$i = 0, $_2$sroa$0$0$$sroa_idx2$i71$i = 0, $_24$i = 0;
 var $_44$sroa$5$sroa$0$0$extract$trunc$i = 0, $_51$i = 0, $_6 = 0, $cond$i$i$i = 0, $cond$i72$i = 0, $e$sroa$0$0$$sroa_idx$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $err1$sroa$0$0$$sroa_idx$i = 0, $not$switch$i$i$i$i$i$i$i = 0, $not$switch$i$i$i$i$i$i62$i = 0, $or$cond$i = 0, $switch$i$i$i$i = 0, $switch$i$i$i61$i = 0, $switch$i75$i = 0, $switch$i85$i = 0, $switch11$i = 0, $switch12$i = 0, $switch13$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_2$i$i60$i = sp + 64|0;
 $_2$i$i$i = sp + 48|0;
 $_51$i = sp + 32|0;
 $_24$i = sp + 16|0;
 $_16$i = sp + 8|0;
 $_6 = sp;
 $1 = HEAP32[$self>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $cond$i$i$i = ($3|0)==(0);
 if (!($cond$i$i$i)) {
  __ZN4core6result13unwrap_failed17hc56d5bdb79226250E();
  // unreachable;
 }
 HEAP8[$2>>0]=-1&255;HEAP8[$2+1>>0]=(-1>>8)&255;HEAP8[$2+2>>0]=(-1>>16)&255;HEAP8[$2+3>>0]=-1>>24;
 $4 = ((($1)) + 8|0);
 $5 = $4;
 $6 = $2;
 HEAP32[$_6>>2] = $5;
 $$sroa_idx3$i = ((($_6)) + 4|0);
 HEAP32[$$sroa_idx3$i>>2] = $6;
 $7 = ((($1)) + 24|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 do {
  if ($9) {
   label = 10;
  } else {
   __THREW__ = 0;
   invoke_vii(138,($_2$i$i$i|0),($4|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$_2$i$i$i>>2]|0;
    $switch$i$i$i$i = ($12|0)==(1);
    if ($switch$i$i$i$i) {
     $e$sroa$0$0$$sroa_idx$i$i$i$i = ((($_2$i$i$i)) + 4|0);
     $16 = $e$sroa$0$0$$sroa_idx$i$i$i$i;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($16) + 4)|0;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     HEAP32[$0>>2] = 1;
     $_2$sroa$0$0$$sroa_idx2$i$i = ((($0)) + 4|0);
     $22 = $_2$sroa$0$0$$sroa_idx2$i$i;
     $23 = $22;
     HEAP32[$23>>2] = $18;
     $24 = (($22) + 4)|0;
     $25 = $24;
     HEAP32[$25>>2] = $21;
     HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
     STACKTOP = sp;return;
    }
    $13 = ((($1)) + 20|0);
    $14 = HEAP8[$13>>0]|0;
    $not$switch$i$i$i$i$i$i$i = ($14<<24>>24)==(1);
    if ($not$switch$i$i$i$i$i$i$i) {
     HEAP8[$7>>0] = 0;
     label = 10;
     break;
    } else {
     __THREW__ = 0;
     invoke_vi(91,(2280|0));
     $15 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   __THREW__ = 0;
   invoke_viiii(140,($_16$i|0),10,($buf$ptr|0),($buf$meta|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $28 = HEAP32[$_16$i>>2]|0;
    $switch11$i = ($28|0)==(1);
    if (!($switch11$i)) {
     __THREW__ = 0;
     invoke_viiii(141,($0|0),($4|0),($buf$ptr|0),($buf$meta|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      break;
     }
     HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
     STACKTOP = sp;return;
    }
    $31 = ((($_16$i)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)>($buf$meta>>>0);
    if ($34) {
     __THREW__ = 0;
     invoke_vii(108,($33|0),($buf$meta|0));
     $35 = __THREW__; __THREW__ = 0;
     break;
    }
    __THREW__ = 0;
    invoke_viiii(141,($_24$i|0),($4|0),($buf$ptr|0),($33|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if (!($37)) {
     $38 = HEAP32[$_24$i>>2]|0;
     $switch12$i = ($38|0)==(1);
     if ($switch12$i) {
      $err1$sroa$0$0$$sroa_idx$i = ((($_24$i)) + 4|0);
      $48 = $err1$sroa$0$0$$sroa_idx$i;
      $49 = $48;
      $50 = HEAP32[$49>>2]|0;
      $51 = (($48) + 4)|0;
      $52 = $51;
      $53 = HEAP32[$52>>2]|0;
      HEAP32[$0>>2] = 1;
      $_2$sroa$0$0$$sroa_idx2$i71$i = ((($0)) + 4|0);
      $54 = $_2$sroa$0$0$$sroa_idx2$i71$i;
      $55 = $54;
      HEAP32[$55>>2] = $50;
      $56 = (($54) + 4)|0;
      $57 = $56;
      HEAP32[$57>>2] = $53;
      HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
     $39 = ((($_24$i)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     HEAP8[$7>>0] = 1;
     __THREW__ = 0;
     invoke_vii(138,($_2$i$i60$i|0),($4|0));
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $43 = HEAP32[$_2$i$i60$i>>2]|0;
      $switch$i$i$i61$i = ($43|0)==(1);
      if ($switch$i$i$i61$i) {
       $$sroa_idx$i = ((($_2$i$i60$i)) + 4|0);
       $89 = HEAP32[$$sroa_idx$i>>2]|0;
       $$sroa_idx120$i = ((($_2$i$i60$i)) + 8|0);
       $90 = HEAP32[$$sroa_idx120$i>>2]|0;
       $_44$sroa$5$sroa$0$0$extract$trunc$i = $89&255;
       $switch$i85$i = ($_44$sroa$5$sroa$0$0$extract$trunc$i&255)<(2);
       if (!($switch$i85$i)) {
        $91 = ((($90)) + 4|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ((($90)) + 8|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = HEAP32[$94>>2]|0;
        __THREW__ = 0;
        invoke_vi($95|0,($92|0));
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         $105 = ___cxa_find_matching_catch_2()|0;
         $106 = tempRet0;
         $107 = HEAP32[$91>>2]|0;
         $108 = HEAP32[$93>>2]|0;
         __ZN5alloc4heap8box_free17he2c7ab366ae97083E($107,$108);
         __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($90);
         $eh$lpad$body$index3Z2D = $106;$eh$lpad$body$indexZ2D = $105;
         __ZN4core3ptr13drop_in_place17h847f9da305492f9dE($_6);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        $98 = HEAP32[$93>>2]|0;
        $99 = ((($98)) + 4|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ($100|0)==(0);
        if (!($101)) {
         $102 = HEAP32[$91>>2]|0;
         $103 = ((($98)) + 8|0);
         $104 = HEAP32[$103>>2]|0;
         ___rust_dealloc($102,$100,$104);
        }
        ___rust_dealloc($90,12,4);
       }
      } else {
       $44 = ((($1)) + 20|0);
       $45 = HEAP8[$44>>0]|0;
       $not$switch$i$i$i$i$i$i62$i = ($45<<24>>24)==(1);
       if (!($not$switch$i$i$i$i$i$i62$i)) {
        __THREW__ = 0;
        invoke_vi(91,(2280|0));
        $46 = __THREW__; __THREW__ = 0;
        break;
       }
       HEAP8[$7>>0] = 0;
       $47 = ($40|0)==($33|0);
       if ($47) {
        $58 = (($buf$ptr) + ($33)|0);
        $59 = (($buf$meta) - ($33))|0;
        __THREW__ = 0;
        invoke_viiii(141,($_51$i|0),($4|0),($58|0),($59|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break;
        }
        $62 = HEAP32[$_51$i>>2]|0;
        $switch13$i = ($62|0)!=(1);
        $63 = ((($_51$i)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = $switch13$i ? $64 : 0;
        $$sink$i = (($65) + ($33))|0;
        HEAP32[$0>>2] = 0;
        $66 = ((($0)) + 4|0);
        HEAP32[$66>>2] = $$sink$i;
        $cond$i72$i = ($62|0)==(0);
        $67 = $64&255;
        $switch$i75$i = ($67&255)<(2);
        $or$cond$i = $cond$i72$i | $switch$i75$i;
        if (!($or$cond$i)) {
         $68 = ((($_51$i)) + 8|0);
         $69 = HEAP32[$68>>2]|0;
         $70 = ((($69)) + 4|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = ((($69)) + 8|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = HEAP32[$73>>2]|0;
         __THREW__ = 0;
         invoke_vi($74|0,($71|0));
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          $84 = ___cxa_find_matching_catch_2()|0;
          $85 = tempRet0;
          $86 = HEAP32[$70>>2]|0;
          $87 = HEAP32[$72>>2]|0;
          __ZN5alloc4heap8box_free17he2c7ab366ae97083E($86,$87);
          __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($69);
          $eh$lpad$body$index3Z2D = $85;$eh$lpad$body$indexZ2D = $84;
          __ZN4core3ptr13drop_in_place17h847f9da305492f9dE($_6);
          ___resumeException($eh$lpad$body$indexZ2D|0);
          // unreachable;
         }
         $77 = HEAP32[$72>>2]|0;
         $78 = ((($77)) + 4|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = ($79|0)==(0);
         if (!($80)) {
          $81 = HEAP32[$70>>2]|0;
          $82 = ((($77)) + 8|0);
          $83 = HEAP32[$82>>2]|0;
          ___rust_dealloc($81,$79,$83);
         }
         ___rust_dealloc($69,12,4);
        }
        HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
        STACKTOP = sp;return;
       }
      }
      HEAP32[$0>>2] = 0;
      $88 = ((($0)) + 4|0);
      HEAP32[$88>>2] = $40;
      HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $109 = ___cxa_find_matching_catch_2()|0;
 $110 = tempRet0;
 $eh$lpad$body$index3Z2D = $110;$eh$lpad$body$indexZ2D = $109;
 __ZN4core3ptr13drop_in_place17h847f9da305492f9dE($_6);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h14ce4dd6003ad1fbE($arg0) {
 $arg0 = $arg0|0;
 var $$pre$i$i$i$i$i$i = 0, $$pre5$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$i2$i$i$i$i$i$i$i = 0, $switch2$i$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ((($arg0)) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
   $switch$i2$i$i$i$i$i$i$i = ($4|0)==(0|0);
   if ($switch$i2$i$i$i$i$i$i$i) {
    __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
    // unreachable;
   }
   $5 = HEAP32[$4>>2]|0;
   $switch2$i$i$i$i$i$i$i$i = ($5|0)==(1);
   if (!($switch2$i$i$i$i$i$i$i$i)) {
    $6 = $4;
    $7 = $6;
    HEAP8[$7>>0]=1&255;HEAP8[$7+1>>0]=(1>>8)&255;HEAP8[$7+2>>0]=(1>>16)&255;HEAP8[$7+3>>0]=1>>24;
    $8 = (($6) + 4)|0;
    $9 = $8;
    HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
    $$pre5$i$i$i$i$i$i = ((($4)) + 4|0);
    HEAP8[$$pre5$i$i$i$i$i$i>>0]=0&255;HEAP8[$$pre5$i$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre5$i$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre5$i$i$i$i$i$i+3>>0]=0>>24;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($4)) + 4|0);
   $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
   $10 = ($$pre$i$i$i$i$i$i|0)==(0);
   if (!($10)) {
    $11 = ((($0)) + 28|0);
    HEAP8[$11>>0] = 1;
   }
  }
 } while(0);
 $12 = HEAP32[$arg0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 (_pthread_mutex_unlock(($13|0))|0);
 return;
}
function __ZN3std3sys3imp6memchr7memrchr17hb6d3b4592a69615cE($0,$needle,$haystack$ptr,$haystack$meta) {
 $0 = $0|0;
 $needle = $needle|0;
 $haystack$ptr = $haystack$ptr|0;
 $haystack$meta = $haystack$meta|0;
 var $$sink$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $_19$0$i$i = 0, $_25$sroa$5$0$ph$i$i = 0, $accum$0$i$i$i$i = 0, $accum$0$i$i15$i$i = 0, $accum$1$i$i$i$i = 0, $accum$1$i$i21$i$i = 0, $accum$1$sink$i$ph$i$i$i = 0;
 var $offset$0$i$i = 0, $offset$1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $haystack$ptr;
 $2 = (($1) + ($haystack$meta))|0;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $offset$0$i$i = $haystack$meta;
  } else {
   $5 = ($3>>>0)<($haystack$meta>>>0);
   $6 = (($haystack$meta) - ($3))|0;
   $_19$0$i$i = $5 ? $6 : 0;
   $7 = ($_19$0$i$i>>>0)>($haystack$meta>>>0);
   if ($7) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($_19$0$i$i,$haystack$meta);
    // unreachable;
   }
   $8 = (($haystack$ptr) + ($_19$0$i$i)|0);
   $9 = (($haystack$meta) - ($_19$0$i$i))|0;
   $10 = (($8) + ($9)|0);
   $11 = $8;
   $12 = $10;$accum$0$i$i15$i$i = $9;
   while(1) {
    $13 = $12;
    $14 = (($13) - ($11))|0;
    $15 = ($14>>>0)>(3);
    if (!($15)) {
     $33 = $12;$accum$1$i$i21$i$i = $accum$0$i$i15$i$i;
     label = 10;
     break;
    }
    $16 = ((($12)) + -1|0);
    $17 = (($accum$0$i$i15$i$i) + -1)|0;
    $18 = HEAP8[$16>>0]|0;
    $19 = ($18<<24>>24)==($needle<<24>>24);
    if ($19) {
     $_25$sroa$5$0$ph$i$i = $17;
     break;
    }
    $20 = ((($12)) + -2|0);
    $21 = (($accum$0$i$i15$i$i) + -2)|0;
    $22 = HEAP8[$20>>0]|0;
    $23 = ($22<<24>>24)==($needle<<24>>24);
    if ($23) {
     $_25$sroa$5$0$ph$i$i = $21;
     break;
    }
    $24 = ((($12)) + -3|0);
    $25 = (($accum$0$i$i15$i$i) + -3)|0;
    $26 = HEAP8[$24>>0]|0;
    $27 = ($26<<24>>24)==($needle<<24>>24);
    if ($27) {
     $_25$sroa$5$0$ph$i$i = $25;
     break;
    }
    $28 = ((($12)) + -4|0);
    $29 = (($accum$0$i$i15$i$i) + -4)|0;
    $30 = HEAP8[$28>>0]|0;
    $31 = ($30<<24>>24)==($needle<<24>>24);
    if ($31) {
     $_25$sroa$5$0$ph$i$i = $29;
     break;
    } else {
     $12 = $28;$accum$0$i$i15$i$i = $29;
    }
   }
   if ((label|0) == 10) {
    while(1) {
     label = 0;
     $32 = ($8|0)==($33|0);
     if ($32) {
      $offset$0$i$i = $_19$0$i$i;
      break L1;
     }
     $34 = ((($33)) + -1|0);
     $35 = (($accum$1$i$i21$i$i) + -1)|0;
     $36 = HEAP8[$34>>0]|0;
     $37 = ($36<<24>>24)==($needle<<24>>24);
     if ($37) {
      $_25$sroa$5$0$ph$i$i = $35;
      break;
     } else {
      $33 = $34;$accum$1$i$i21$i$i = $35;
      label = 10;
     }
    }
   }
   $38 = (($_25$sroa$5$0$ph$i$i) + ($_19$0$i$i))|0;
   HEAP32[$0>>2] = 1;
   $39 = ((($0)) + 4|0);
   HEAP32[$39>>2] = $38;
   return;
  }
 } while(0);
 $40 = $needle&255;
 $41 = $40 << 8;
 $42 = $41 | $40;
 $43 = $42 << 16;
 $44 = $43 | $42;
 $offset$1$i$i = $offset$0$i$i;
 while(1) {
  $45 = ($offset$1$i$i>>>0)>(7);
  if (!($45)) {
   break;
  }
  $75 = (($offset$1$i$i) + -8)|0;
  $76 = (($haystack$ptr) + ($75)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($offset$1$i$i) + -4)|0;
  $79 = (($haystack$ptr) + ($78)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $77 ^ $44;
  $82 = (($81) + -16843009)|0;
  $83 = $81 & -2139062144;
  $84 = $83 ^ -2139062144;
  $85 = $84 & $82;
  $86 = $80 ^ $44;
  $87 = (($86) + -16843009)|0;
  $88 = $86 & -2139062144;
  $89 = $88 ^ -2139062144;
  $90 = $89 & $87;
  $91 = $90 | $85;
  $92 = ($91|0)==(0);
  if ($92) {
   $offset$1$i$i = $75;
  } else {
   break;
  }
 }
 $46 = ($offset$1$i$i>>>0)>($haystack$meta>>>0);
 if ($46) {
  __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($offset$1$i$i,$haystack$meta);
  // unreachable;
 }
 $47 = (($haystack$ptr) + ($offset$1$i$i)|0);
 $48 = $47;$accum$0$i$i$i$i = $offset$1$i$i;
 while(1) {
  $49 = $48;
  $50 = (($49) - ($1))|0;
  $51 = ($50>>>0)>(3);
  if (!($51)) {
   $68 = $48;$accum$1$i$i$i$i = $accum$0$i$i$i$i;
   label = 23;
   break;
  }
  $52 = ((($48)) + -1|0);
  $53 = (($accum$0$i$i$i$i) + -1)|0;
  $54 = HEAP8[$52>>0]|0;
  $55 = ($54<<24>>24)==($needle<<24>>24);
  if ($55) {
   $accum$1$sink$i$ph$i$i$i = $53;
   label = 25;
   break;
  }
  $56 = ((($48)) + -2|0);
  $57 = (($accum$0$i$i$i$i) + -2)|0;
  $58 = HEAP8[$56>>0]|0;
  $59 = ($58<<24>>24)==($needle<<24>>24);
  if ($59) {
   $accum$1$sink$i$ph$i$i$i = $57;
   label = 25;
   break;
  }
  $60 = ((($48)) + -3|0);
  $61 = (($accum$0$i$i$i$i) + -3)|0;
  $62 = HEAP8[$60>>0]|0;
  $63 = ($62<<24>>24)==($needle<<24>>24);
  if ($63) {
   $accum$1$sink$i$ph$i$i$i = $61;
   label = 25;
   break;
  }
  $64 = ((($48)) + -4|0);
  $65 = (($accum$0$i$i$i$i) + -4)|0;
  $66 = HEAP8[$64>>0]|0;
  $67 = ($66<<24>>24)==($needle<<24>>24);
  if ($67) {
   $accum$1$sink$i$ph$i$i$i = $65;
   label = 25;
   break;
  } else {
   $48 = $64;$accum$0$i$i$i$i = $65;
  }
 }
 L32: do {
  if ((label|0) == 23) {
   while(1) {
    label = 0;
    $69 = ($68|0)==($haystack$ptr|0);
    if ($69) {
     $$sink$i$i$i$i = 0;
     break L32;
    }
    $70 = ((($68)) + -1|0);
    $71 = (($accum$1$i$i$i$i) + -1)|0;
    $72 = HEAP8[$70>>0]|0;
    $73 = ($72<<24>>24)==($needle<<24>>24);
    if ($73) {
     $accum$1$sink$i$ph$i$i$i = $71;
     label = 25;
     break;
    } else {
     $68 = $70;$accum$1$i$i$i$i = $71;
     label = 23;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $74 = ((($0)) + 4|0);
  HEAP32[$74>>2] = $accum$1$sink$i$ph$i$i$i;
  $$sink$i$i$i$i = 1;
 }
 HEAP32[$0>>2] = $$sink$i$i$i$i;
 return;
}
function __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h812b567e87c90b35E($0,$self,$buf$ptr,$buf$meta) {
 $0 = $0|0;
 $self = $self|0;
 $buf$ptr = $buf$ptr|0;
 $buf$meta = $buf$meta|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i$i$i = 0, $_13 = 0, $_2$sroa$0$0$$sroa_idx2$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i = 0, $_33$sroa$4$0$$sroa_idx44 = 0;
 var $_33$sroa$5$0$$sroa_idx46 = 0, $_5$i$sroa$0$0 = 0, $_5$i$sroa$5$0$off0 = 0, $_5$i$sroa$5$0$off32 = 0, $err$sroa$0$0$$sroa_idx = 0, $not$switch$i28 = 0, $r$sroa$0$1 = 0, $r$sroa$6$1 = 0, $r$sroa$8$1 = 0, $switch = 0, $switch$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_13 = sp;
 $1 = ((($self)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($buf$meta))|0;
 $4 = ((($self)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>($5>>>0);
 do {
  if ($6) {
   __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h1fc90e4056f7bc50E($_13,$self);
   $7 = HEAP32[$_13>>2]|0;
   $switch = ($7|0)==(1);
   if (!($switch)) {
    $$pre = HEAP32[$4>>2]|0;
    $18 = $$pre;
    break;
   }
   $err$sroa$0$0$$sroa_idx = ((($_13)) + 4|0);
   $8 = $err$sroa$0$0$$sroa_idx;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = (($8) + 4)|0;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$0>>2] = 1;
   $_2$sroa$0$0$$sroa_idx2$i = ((($0)) + 4|0);
   $14 = $_2$sroa$0$0$$sroa_idx2$i;
   $15 = $14;
   HEAP32[$15>>2] = $10;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = $13;
   STACKTOP = sp;return;
  } else {
   $18 = $5;
  }
 } while(0);
 $19 = ($18>>>0)>($buf$meta>>>0);
 if ($19) {
  __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h0f2743b3e3d41cbeE($self,$buf$meta);
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + ($buf$meta))|0;
  HEAP32[$1>>2] = $32;
  $_2$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$self>>2]|0;
  $33 = (($_2$sroa$0$0$copyload2$i$i$i$i$i) + ($31)|0);
  _memcpy(($33|0),($buf$ptr|0),($buf$meta|0))|0;
  HEAP32[$0>>2] = 0;
  $34 = ((($0)) + 4|0);
  HEAP32[$34>>2] = $buf$meta;
  STACKTOP = sp;return;
 }
 $20 = ((($self)) + 14|0);
 HEAP8[$20>>0] = 1;
 $21 = ((($self)) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $not$switch$i28 = ($22<<24>>24)==(1);
 if (!($not$switch$i28)) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2280);
  // unreachable;
 }
 $23 = ((($self)) + 13|0);
 $24 = HEAP8[$23>>0]|0;
 $switch$i29 = ($24<<24>>24)==(1);
 do {
  if ($switch$i29) {
   $r$sroa$0$1 = 0;$r$sroa$6$1 = $buf$meta;$r$sroa$8$1 = 0;
  } else {
   $25 = ($buf$meta|0)>(-1);
   $_0$0$sroa$speculated$i$i$i$i$i$i = $25 ? $buf$meta : 2147483647;
   $26 = (_write(1,$buf$ptr,$_0$0$sroa$speculated$i$i$i$i$i$i)|0);
   $27 = ($26|0)==(-1);
   if ($27) {
    $28 = (___errno_location()|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(9);
    if ($30) {
     $r$sroa$0$1 = 0;$r$sroa$6$1 = $buf$meta;$r$sroa$8$1 = 0;
     break;
    } else {
     $_5$i$sroa$0$0 = 1;$_5$i$sroa$5$0$off0 = 0;$_5$i$sroa$5$0$off32 = $29;
    }
   } else {
    $_5$i$sroa$0$0 = 0;$_5$i$sroa$5$0$off0 = $26;$_5$i$sroa$5$0$off32 = 0;
   }
   $r$sroa$0$1 = $_5$i$sroa$0$0;$r$sroa$6$1 = $_5$i$sroa$5$0$off0;$r$sroa$8$1 = $_5$i$sroa$5$0$off32;
  }
 } while(0);
 HEAP8[$20>>0] = 0;
 HEAP32[$0>>2] = $r$sroa$0$1;
 $_33$sroa$4$0$$sroa_idx44 = ((($0)) + 4|0);
 HEAP32[$_33$sroa$4$0$$sroa_idx44>>2] = $r$sroa$6$1;
 $_33$sroa$5$0$$sroa_idx46 = ((($0)) + 8|0);
 HEAP32[$_33$sroa$5$0$$sroa_idx46>>2] = $r$sroa$8$1;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h847f9da305492f9dE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$1>>0]=0&255;HEAP8[$1+1>>0]=(0>>8)&255;HEAP8[$1+2>>0]=(0>>16)&255;HEAP8[$1+3>>0]=0>>24;
 return;
}
function __ZN3std2io5Write9write_all17h82e8e0d944c30849E($0,$self,$1,$2) {
 $0 = $0|0;
 $self = $self|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sroa_idx = 0, $$sroa_idx54 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_27$sroa$0$0$$sroa_idx = 0;
 var $_3$i$i$i = 0, $_4$sroa$0$i$i$i$i = 0, $_5$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i$i = 0, $_5$sroa$4$0$$sroa_raw_idx$i = 0, $_5$sroa$4$i = 0, $_5$sroa$411$0$$sroa_idx$i = 0, $_5$sroa$5$0$$sroa_idx$i = 0, $_8 = 0, $buf$sroa$0$087$ph = 0, $buf$sroa$5$086$ph = 0, $cond$i = 0, $cond1 = 0, $cond64 = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $or$cond = 0, $switch = 0, $switch$i = 0, $switch127 = 0;
 var $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $err$i$i$i$i = sp + 96|0;
 $_5$i$i$i$i$i = sp + 80|0;
 $_5$sroa$4$i = sp + 108|0;
 $err$i$i$i$i$i$i$i = sp + 64|0;
 $_5$i$i$i$i$i$i$i$i = sp + 48|0;
 $_4$sroa$0$i$i$i$i = sp + 32|0;
 $_3$i$i$i = sp + 16|0;
 $_8 = sp;
 $3 = ($2|0)==(0);
 L1: do {
  if (!($3)) {
   $4 = ((($_8)) + 4|0);
   $5 = ((($_8)) + 8|0);
   $6 = ((($4)) + 1|0);
   $7 = ((($_8)) + 4|0);
   $buf$sroa$0$087$ph = $1;$buf$sroa$5$086$ph = $2;
   L3: while(1) {
    __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h80a3da35d43bb809E($_8,$self,$buf$sroa$0$087$ph,$buf$sroa$5$086$ph);
    $8 = HEAP32[$_8>>2]|0;
    $switch127 = ($8|0)==(1);
    L5: do {
     if ($switch127) {
      $33 = $8;
      while(1) {
       $trunc$i = HEAP8[$4>>0]|0;
       $trunc$i$clear = $trunc$i & 3;
       switch ($trunc$i$clear<<24>>24) {
       case 0:  {
        $28 = HEAP32[$5>>2]|0;
        $cond64 = ($28|0)==(4);
        if (!($cond64)) {
         label = 12;
         break L3;
        }
        break;
       }
       case 1:  {
        $$sink = $6;
        label = 18;
        break;
       }
       case 2:  {
        $29 = HEAP32[$5>>2]|0;
        $$sink = $29;
        label = 18;
        break;
       }
       default: {
        label = 15;
        break L3;
       }
       }
       if ((label|0) == 18) {
        label = 0;
        $30 = HEAP8[$$sink>>0]|0;
        $31 = ($30<<24>>24)==(15);
        if (!($31)) {
         label = 12;
         break L3;
        }
       }
       $cond$i = ($33|0)==(0);
       $switch$i = ($trunc$i&255)<(2);
       $or$cond = $cond$i | $switch$i;
       if (!($or$cond)) {
        $34 = HEAP32[$5>>2]|0;
        $35 = ((($34)) + 4|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ((($34)) + 8|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = HEAP32[$38>>2]|0;
        __THREW__ = 0;
        invoke_vi($39|0,($36|0));
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if ($41) {
         label = 25;
         break L3;
        }
        $42 = HEAP32[$37>>2]|0;
        $43 = ((($42)) + 4|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($44|0)==(0);
        if (!($45)) {
         $46 = HEAP32[$35>>2]|0;
         $47 = ((($42)) + 8|0);
         $48 = HEAP32[$47>>2]|0;
         ___rust_dealloc($46,$44,$48);
        }
        ___rust_dealloc($34,12,4);
       }
       __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h80a3da35d43bb809E($_8,$self,$buf$sroa$0$087$ph,$buf$sroa$5$086$ph);
       $53 = HEAP32[$_8>>2]|0;
       $switch = ($53|0)==(1);
       if ($switch) {
        $33 = $53;
       } else {
        break L5;
       }
      }
     }
    } while(0);
    $16 = HEAP32[$7>>2]|0;
    $cond1 = ($16|0)==(0);
    if ($cond1) {
     label = 5;
     break;
    }
    $15 = ($buf$sroa$5$086$ph>>>0)<($16>>>0);
    if ($15) {
     label = 11;
     break;
    }
    $54 = (($buf$sroa$0$087$ph) + ($16)|0);
    $55 = (($buf$sroa$5$086$ph) - ($16))|0;
    $56 = ($55|0)==(0);
    if ($56) {
     break L1;
    } else {
     $buf$sroa$0$087$ph = $54;$buf$sroa$5$086$ph = $55;
    }
   }
   do {
    if ((label|0) == 5) {
     __THREW__ = 0;
     invoke_viii(123,($_3$i$i$i|0),(5724|0),28);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      $57 = ___cxa_find_matching_catch_2()|0;
      $58 = tempRet0;
      __ZN4core3ptr13drop_in_place17h578a67b9e8187303E($_8);
      ___resumeException($57|0);
      // unreachable;
     }
     ;HEAP32[$_4$sroa$0$i$i$i$i>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
     $11 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      ___rust_oom($_5$i$i$i$i$i$i$i$i);
      // unreachable;
     }
     ;HEAP32[$11>>2]=HEAP32[$_4$sroa$0$i$i$i$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_4$sroa$0$i$i$i$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_4$sroa$0$i$i$i$i+8>>2]|0;
     $13 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
     $14 = ($13|0)==(0|0);
     if ($14) {
      ___rust_oom($_5$i$i$i$i$i);
      // unreachable;
     } else {
      HEAP8[$13>>0] = 14;
      $_5$sroa$4$0$$sroa_raw_idx$i = ((($13)) + 1|0);
      ;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
      $_5$sroa$411$0$$sroa_idx$i = ((($13)) + 4|0);
      HEAP32[$_5$sroa$411$0$$sroa_idx$i>>2] = $11;
      $_5$sroa$5$0$$sroa_idx$i = ((($13)) + 8|0);
      HEAP32[$_5$sroa$5$0$$sroa_idx$i>>2] = 104;
      $32 = $13;
      HEAP32[$0>>2] = 1;
      $$sroa_idx = ((($0)) + 4|0);
      HEAP32[$$sroa_idx>>2] = 2;
      $$sroa_idx54 = ((($0)) + 8|0);
      HEAP32[$$sroa_idx54>>2] = $32;
      break;
     }
    }
    else if ((label|0) == 11) {
     __THREW__ = 0;
     invoke_vii(125,($16|0),($buf$sroa$5$086$ph|0));
     $17 = __THREW__; __THREW__ = 0;
     $57 = ___cxa_find_matching_catch_2()|0;
     $58 = tempRet0;
     __ZN4core3ptr13drop_in_place17h578a67b9e8187303E($_8);
     ___resumeException($57|0);
     // unreachable;
    }
    else if ((label|0) == 12) {
     $18 = $4;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     HEAP32[$0>>2] = 1;
     $_27$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
     $24 = $_27$sroa$0$0$$sroa_idx;
     $25 = $24;
     HEAP32[$25>>2] = $20;
     $26 = (($24) + 4)|0;
     $27 = $26;
     HEAP32[$27>>2] = $23;
    }
    else if ((label|0) == 15) {
     // unreachable;
    }
    else if ((label|0) == 25) {
     $49 = ___cxa_find_matching_catch_2()|0;
     $50 = tempRet0;
     $51 = HEAP32[$35>>2]|0;
     $52 = HEAP32[$37>>2]|0;
     __ZN5alloc4heap8box_free17he2c7ab366ae97083E($51,$52);
     __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($34);
     ___resumeException($49|0);
     // unreachable;
    }
   } while(0);
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h6093e12f7527bee1E($0,$self,$args) {
 $0 = $0|0;
 $self = $self|0;
 $args = $args|0;
 var $$pre$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i13 = 0, $$pre$phi$i$i$i$i$i$i$iZ2D = 0, $$pre5$i$i$i$i$i$i$i = 0, $$pre5$i$i$i$i$i$i$i8 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i11 = 0, $$sroa_idx$i = 0, $$sroa_idx17$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $_11$i = 0, $_3$i$i$i$i = 0, $_4 = 0, $_4$sroa$0$0$copyload2$i$i$i$i = 0, $_4$sroa$0$i$i$i$i$i = 0, $_5$i$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_raw_idx$i$i = 0, $_5$sroa$4$i$i = 0, $_5$sroa$411$0$$sroa_idx$i$i = 0, $_5$sroa$5$0$$sroa_idx$i$i = 0, $cond$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i$i$i = 0, $output$i = 0, $switch$i = 0, $switch$i$i = 0, $switch$i2$i$i$i$i$i$i$i$i = 0, $switch$i2$i$i$i$i$i$i$i$i5 = 0, $switch2$i$i$i$i$i$i$i$i$i = 0, $switch2$i$i$i$i$i$i$i$i$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $err$i$i$i$i$i = sp + 128|0;
 $_5$i$i$i$i$i$i = sp + 112|0;
 $_5$sroa$4$i$i = sp + 140|0;
 $err$i$i$i$i$i$i$i$i = sp + 96|0;
 $_5$i$i$i$i$i$i$i$i$i = sp + 80|0;
 $_4$sroa$0$i$i$i$i$i = sp + 64|0;
 $_3$i$i$i$i = sp + 48|0;
 $_11$i = sp + 24|0;
 $output$i = sp + 8|0;
 $_4 = sp;
 $_4$sroa$0$0$copyload2$i$i$i$i = HEAP32[$self>>2]|0;
 $1 = ((($_4$sroa$0$0$copyload2$i$i$i$i)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 (_pthread_mutex_lock(($2|0))|0);
 $3 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
 $switch$i2$i$i$i$i$i$i$i$i = ($3|0)==(0|0);
 $4 = $1;
 if ($switch$i2$i$i$i$i$i$i$i$i) {
  __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
  // unreachable;
 }
 $5 = HEAP32[$3>>2]|0;
 $switch2$i$i$i$i$i$i$i$i$i = ($5|0)==(1);
 if ($switch2$i$i$i$i$i$i$i$i$i) {
  $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($3)) + 4|0);
  $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i$i;$10 = $$pre$i$i$i$i$i$i$i;
 } else {
  $6 = $3;
  $7 = $6;
  HEAP8[$7>>0]=1&255;HEAP8[$7+1>>0]=(1>>8)&255;HEAP8[$7+2>>0]=(1>>16)&255;HEAP8[$7+3>>0]=1>>24;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
  $$pre5$i$i$i$i$i$i$i = ((($3)) + 4|0);
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$pre5$i$i$i$i$i$i$i;$10 = 0;
 }
 HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D>>0]=$10&255;HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D+1>>0]=($10>>8)&255;HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D+2>>0]=($10>>16)&255;HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D+3>>0]=$10>>24;
 $11 = ($10|0)!=(0);
 $12 = ((($_4$sroa$0$0$copyload2$i$i$i$i)) + 36|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $11&1;
 $15 = $_4;
 $16 = $15;
 HEAP32[$16>>2] = $4;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 HEAP32[$output$i>>2] = $_4;
 $_5$sroa$0$0$$sroa_idx$i = ((($output$i)) + 4|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 0;
 ;HEAP32[$_11$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_11$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_11$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_11$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_11$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_11$i+20>>2]=HEAP32[$args+20>>2]|0;
 __THREW__ = 0;
 $19 = (invoke_iiii(102,($output$i|0),(304|0),($_11$i|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 L8: do {
  if (!($21)) {
   $switch$i = ($19<<24>>24)==(0);
   do {
    if ($switch$i) {
     HEAP32[$0>>2] = 0;
     label = 17;
    } else {
     $22 = ((($output$i)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(1);
     if ($24) {
      ;HEAP32[$0>>2]=HEAP32[$22>>2]|0;HEAP32[$0+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$22+8>>2]|0;
      break;
     }
     __THREW__ = 0;
     invoke_viii(123,($_3$i$i$i$i|0),(5698|0),15);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      break L8;
     }
     ;HEAP32[$_4$sroa$0$i$i$i$i$i>>2]=HEAP32[$_3$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_3$i$i$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_3$i$i$i$i+8>>2]|0;
     $27 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i$i)|0);
     $28 = ($27|0)==(0|0);
     if ($28) {
      ___rust_oom($_5$i$i$i$i$i$i$i$i$i);
      // unreachable;
     }
     ;HEAP32[$27>>2]=HEAP32[$_4$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$27+4>>2]=HEAP32[$_4$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$_4$sroa$0$i$i$i$i$i+8>>2]|0;
     $29 = (___rust_alloc(12,4,$err$i$i$i$i$i)|0);
     $30 = ($29|0)==(0|0);
     if ($30) {
      ___rust_oom($_5$i$i$i$i$i$i);
      // unreachable;
     } else {
      HEAP8[$29>>0] = 16;
      $_5$sroa$4$0$$sroa_raw_idx$i$i = ((($29)) + 1|0);
      ;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$_5$sroa$4$i$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$_5$sroa$4$i$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$_5$sroa$4$i$i+2>>0]|0;
      $_5$sroa$411$0$$sroa_idx$i$i = ((($29)) + 4|0);
      HEAP32[$_5$sroa$411$0$$sroa_idx$i$i>>2] = $27;
      $_5$sroa$5$0$$sroa_idx$i$i = ((($29)) + 8|0);
      HEAP32[$_5$sroa$5$0$$sroa_idx$i$i>>2] = 104;
      $31 = $29;
      HEAP32[$0>>2] = 1;
      $$sroa_idx$i = ((($0)) + 4|0);
      HEAP32[$$sroa_idx$i>>2] = 2;
      $$sroa_idx17$i = ((($0)) + 8|0);
      HEAP32[$$sroa_idx17$i>>2] = $31;
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $32 = HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2]|0;
    $cond$i$i = ($32|0)==(0);
    if (!($cond$i$i)) {
     $33 = ((($output$i)) + 8|0);
     $34 = HEAP8[$33>>0]|0;
     $switch$i$i = ($34&255)<(2);
     if (!($switch$i$i)) {
      $35 = ((($output$i)) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($36)) + 4|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($36)) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      invoke_vi($41|0,($38|0));
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       $51 = ___cxa_find_matching_catch_2()|0;
       $52 = tempRet0;
       $53 = HEAP32[$37>>2]|0;
       $54 = HEAP32[$39>>2]|0;
       __ZN5alloc4heap8box_free17he2c7ab366ae97083E($53,$54);
       $55 = HEAP32[$35>>2]|0;
       __ZN5alloc4heap8box_free17h6c1e243b739a6ed0E($55);
       $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
       __ZN4core3ptr13drop_in_place17h14ce4dd6003ad1fbE($_4);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      $44 = HEAP32[$39>>2]|0;
      $45 = ((($44)) + 4|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0);
      if (!($47)) {
       $48 = HEAP32[$37>>2]|0;
       $49 = ((($44)) + 8|0);
       $50 = HEAP32[$49>>2]|0;
       ___rust_dealloc($48,$46,$50);
      }
      $56 = HEAP32[$35>>2]|0;
      ___rust_dealloc($56,12,4);
     }
    }
   }
   $61 = HEAP32[$_4>>2]|0;
   $62 = ((($_4)) + 4|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = ($63<<24>>24)==(0);
   if (!($64)) {
    $73 = HEAP32[$_4>>2]|0;
    $74 = HEAP32[$73>>2]|0;
    (_pthread_mutex_unlock(($74|0))|0);
    STACKTOP = sp;return;
   }
   $65 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
   $switch$i2$i$i$i$i$i$i$i$i5 = ($65|0)==(0|0);
   if ($switch$i2$i$i$i$i$i$i$i$i5) {
    __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
    // unreachable;
   }
   $66 = HEAP32[$65>>2]|0;
   $switch2$i$i$i$i$i$i$i$i$i6 = ($66|0)==(1);
   if (!($switch2$i$i$i$i$i$i$i$i$i6)) {
    $67 = $65;
    $68 = $67;
    HEAP8[$68>>0]=1&255;HEAP8[$68+1>>0]=(1>>8)&255;HEAP8[$68+2>>0]=(1>>16)&255;HEAP8[$68+3>>0]=1>>24;
    $69 = (($67) + 4)|0;
    $70 = $69;
    HEAP8[$70>>0]=0&255;HEAP8[$70+1>>0]=(0>>8)&255;HEAP8[$70+2>>0]=(0>>16)&255;HEAP8[$70+3>>0]=0>>24;
    $$pre5$i$i$i$i$i$i$i8 = ((($65)) + 4|0);
    HEAP8[$$pre5$i$i$i$i$i$i$i8>>0]=0&255;HEAP8[$$pre5$i$i$i$i$i$i$i8+1>>0]=(0>>8)&255;HEAP8[$$pre5$i$i$i$i$i$i$i8+2>>0]=(0>>16)&255;HEAP8[$$pre5$i$i$i$i$i$i$i8+3>>0]=0>>24;
    $73 = HEAP32[$_4>>2]|0;
    $74 = HEAP32[$73>>2]|0;
    (_pthread_mutex_unlock(($74|0))|0);
    STACKTOP = sp;return;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i$i11 = ((($65)) + 4|0);
   $$pre$i$i$i$i$i$i$i13 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i11>>2]|0;
   $71 = ($$pre$i$i$i$i$i$i$i13|0)==(0);
   if ($71) {
    $73 = HEAP32[$_4>>2]|0;
    $74 = HEAP32[$73>>2]|0;
    (_pthread_mutex_unlock(($74|0))|0);
    STACKTOP = sp;return;
   }
   $72 = ((($61)) + 28|0);
   HEAP8[$72>>0] = 1;
   $73 = HEAP32[$_4>>2]|0;
   $74 = HEAP32[$73>>2]|0;
   (_pthread_mutex_unlock(($74|0))|0);
   STACKTOP = sp;return;
  }
 } while(0);
 $57 = ___cxa_find_matching_catch_2()|0;
 $58 = tempRet0;
 __THREW__ = 0;
 invoke_vi(50,($output$i|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if (!($60)) {
  $eh$lpad$body$index3Z2D = $58;$eh$lpad$body$indexZ2D = $57;
  __ZN4core3ptr13drop_in_place17h14ce4dd6003ad1fbE($_4);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $75 = ___cxa_find_matching_catch_2()|0;
 $76 = tempRet0;
 $eh$lpad$body$index3Z2D = $76;$eh$lpad$body$indexZ2D = $75;
 __ZN4core3ptr13drop_in_place17h14ce4dd6003ad1fbE($_4);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17he5bf24d8a0f450abE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $cond$i = ($1|0)==(0);
 if ($cond$i) {
  return;
 }
 $2 = ((($arg0)) + 8|0);
 __ZN4core3ptr13drop_in_place17hff6abf3e64b8d9d6E($2);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h07d3a1e6e74a20f8E($self,$s$ptr,$s$meta) {
 $self = $self|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var $$pre = 0, $$sink46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $cond$i32 = 0, $e$sroa$0$0$$sroa_idx = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp;
 $0 = HEAP32[$self>>2]|0;
 __ZN3std2io5Write9write_all17h82e8e0d944c30849E($_3,$0,$s$ptr,$s$meta);
 $1 = HEAP32[$_3>>2]|0;
 $switch = ($1|0)==(1);
 if (!($switch)) {
  $$sink46 = 0;
  STACKTOP = sp;return ($$sink46|0);
 }
 $e$sroa$0$0$$sroa_idx = ((($_3)) + 4|0);
 $2 = $e$sroa$0$0$$sroa_idx;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $cond$i32 = ($9|0)==(0);
 $$pre = ((($self)) + 8|0);
 if (!($cond$i32)) {
  __THREW__ = 0;
  invoke_vi(124,($$pre|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch_2()|0;
   $13 = tempRet0;
   HEAP32[$8>>2] = 1;
   $14 = $$pre;
   $15 = $14;
   HEAP32[$15>>2] = $4;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = $7;
   ___resumeException($12|0);
   // unreachable;
  }
 }
 HEAP32[$8>>2] = 1;
 $18 = $$pre;
 $19 = $18;
 HEAP32[$19>>2] = $4;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $7;
 $$sink46 = 1;
 STACKTOP = sp;return ($$sink46|0);
}
function __ZN4core3fmt5Write10write_char17hb7d9af0eab0fd278E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$pre$i = 0, $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $$sink46$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10 = 0, $_3$i = 0, $cond$i32$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, $len$1$i = 0, $len$2$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $_10 = sp + 12|0;
 HEAP32[$_10>>2] = 0;
 $0 = ($c>>>0)<(128);
 if ($0) {
  $1 = $c&255;
  HEAP8[$_10>>0] = $1;
  $len$2$i = 1;
 } else {
  $2 = ($c>>>0)<(2048);
  do {
   if ($2) {
    $3 = $c >>> 6;
    $4 = $3 & 31;
    $5 = $4&255;
    $6 = $5 | -64;
    $$sink$i = $6;$$sink$sink$i = 1;$$sink15$i = $_10;$len$1$i = 2;
   } else {
    $7 = ($c>>>0)<(65536);
    if ($7) {
     $8 = $c >>> 12;
     $9 = $8 & 15;
     $10 = $9&255;
     $11 = $10 | -32;
     HEAP8[$_10>>0] = $11;
     $12 = $c >>> 6;
     $13 = $12 & 63;
     $14 = $13&255;
     $15 = ((($_10)) + 1|0);
     $16 = $14 | -128;
     $$sink$i = $16;$$sink$sink$i = 2;$$sink15$i = $15;$len$1$i = 3;
     break;
    } else {
     $17 = $c >>> 18;
     $18 = $17 & 7;
     $19 = $18&255;
     $20 = $19 | -16;
     HEAP8[$_10>>0] = $20;
     $21 = $c >>> 12;
     $22 = $21 & 63;
     $23 = $22&255;
     $24 = ((($_10)) + 1|0);
     $25 = $23 | -128;
     HEAP8[$24>>0] = $25;
     $26 = $c >>> 6;
     $27 = $26 & 63;
     $28 = $27&255;
     $29 = ((($_10)) + 2|0);
     $30 = $28 | -128;
     $$sink$i = $30;$$sink$sink$i = 3;$$sink15$i = $29;$len$1$i = 4;
     break;
    }
   }
  } while(0);
  HEAP8[$$sink15$i>>0] = $$sink$i;
  $31 = $c & 63;
  $32 = $31&255;
  $33 = (($_10) + ($$sink$sink$i)|0);
  $34 = $32 | -128;
  HEAP8[$33>>0] = $34;
  $len$2$i = $len$1$i;
 }
 $35 = HEAP32[$self>>2]|0;
 __ZN3std2io5Write9write_all17h82e8e0d944c30849E($_3$i,$35,$_10,$len$2$i);
 $36 = HEAP32[$_3$i>>2]|0;
 $switch$i = ($36|0)==(1);
 if (!($switch$i)) {
  $$sink46$i = 0;
  STACKTOP = sp;return ($$sink46$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_3$i)) + 4|0);
 $37 = $e$sroa$0$0$$sroa_idx$i;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($self)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $cond$i32$i = ($44|0)==(0);
 $$pre$i = ((($self)) + 8|0);
 if (!($cond$i32$i)) {
  __THREW__ = 0;
  invoke_vi(124,($$pre$i|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   HEAP32[$43>>2] = 1;
   $49 = $$pre$i;
   $50 = $49;
   HEAP32[$50>>2] = $39;
   $51 = (($49) + 4)|0;
   $52 = $51;
   HEAP32[$52>>2] = $42;
   ___resumeException($47|0);
   // unreachable;
  }
 }
 HEAP32[$43>>2] = 1;
 $53 = $$pre$i;
 $54 = $53;
 HEAP32[$54>>2] = $39;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $42;
 $$sink46$i = 1;
 STACKTOP = sp;return ($$sink46$i|0);
}
function __ZN4core3fmt5Write9write_fmt17h20bbf582546b0b9fE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self;
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0;
 $0 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6,328,$_8)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr13drop_in_place17h6b486329dc8ab9a4E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h6270b4850f75135aE($self,$s$ptr,$s$meta) {
 $self = $self|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var $$pre$i = 0, $$sink46$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$i = 0, $cond$i32$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17h82e8e0d944c30849E($_3$i,$1,$s$ptr,$s$meta);
 $2 = HEAP32[$_3$i>>2]|0;
 $switch$i = ($2|0)==(1);
 if (!($switch$i)) {
  $$sink46$i = 0;
  STACKTOP = sp;return ($$sink46$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_3$i)) + 4|0);
 $3 = $e$sroa$0$0$$sroa_idx$i;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $cond$i32$i = ($10|0)==(0);
 $$pre$i = ((($0)) + 8|0);
 if (!($cond$i32$i)) {
  __THREW__ = 0;
  invoke_vi(124,($$pre$i|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch_2()|0;
   $14 = tempRet0;
   HEAP32[$9>>2] = 1;
   $15 = $$pre$i;
   $16 = $15;
   HEAP32[$16>>2] = $5;
   $17 = (($15) + 4)|0;
   $18 = $17;
   HEAP32[$18>>2] = $8;
   ___resumeException($13|0);
   // unreachable;
  }
 }
 HEAP32[$9>>2] = 1;
 $19 = $$pre$i;
 $20 = $19;
 HEAP32[$20>>2] = $5;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 $$sink46$i = 1;
 STACKTOP = sp;return ($$sink46$i|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h83f15d305ba1842aE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN4core3fmt5Write10write_char17hb7d9af0eab0fd278E($0,$c)|0);
 return ($1|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h6ba5e2c5c76fed99E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0;
 HEAP32[$_6$i>>2] = $0;
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0;
 $1 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6$i,328,$_8$i)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN3std2io5stdio6_print17hf88ba8f93377d797E($args) {
 $args = $args|0;
 var $$pre$i = 0, $$pre$i$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi13$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $_10$i = 0, $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx22$i$i$i = 0, $_12$i = 0, $_15$i$i$i$i = 0, $_16$i$i$i = 0, $_17$i$i$i$i = 0, $_19$i$i$i$i = 0, $_21$i = 0, $_28$i = 0, $_3 = 0, $_4$i$i$i$i = 0, $_4$i$i$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $_7$sroa$4$0$$sroa_idx3$i$i$i$i$i = 0, $borrowed$i$i$i$i = 0, $cond$i = 0, $e$i = 0, $label$i = 0;
 var $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$0$0$i$i$i$i = 0, $personalityslot$sroa$6$0$i = 0, $personalityslot$sroa$8$0$i$i$i$i = 0, $phitmp$i$i = 0, $result$i = 0, $switch$i = 0, $switch$i$i$i = 0, $switch$i$i$i$i$i = 0, $switch2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $_4$i$i$i$i$i = sp + 216|0;
 $_19$i$i$i$i = sp + 192|0;
 $_17$i$i$i$i = sp + 184|0;
 $_15$i$i$i$i = sp + 160|0;
 $borrowed$i$i$i$i = sp + 152|0;
 $_4$i$i$i$i = sp + 144|0;
 $_16$i$i$i = sp + 128|0;
 $_28$i = sp + 112|0;
 $_21$i = sp + 88|0;
 $e$i = sp + 80|0;
 $_12$i = sp + 56|0;
 $_10$i = sp + 48|0;
 $result$i = sp + 32|0;
 $label$i = sp + 24|0;
 $_3 = sp;
 ;HEAP32[$_3>>2]=HEAP32[$args>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_3+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_3+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_3+20>>2]=HEAP32[$args+20>>2]|0;
 HEAP32[$label$i>>2] = 7557;
 $0 = ((($label$i)) + 4|0);
 HEAP32[$0>>2] = 6;
 $1 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2949dc4d687237faE(3156)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $switch$i = ($3|0)==(1);
  if ($switch$i) {
   $7 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2949dc4d687237faE(3156)|0);
   $switch$i$i$i = ($7|0)==(0|0);
   if ($switch$i$i$i) {
    __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
    // unreachable;
   }
   $8 = HEAP32[$7>>2]|0;
   $switch2$i$i$i = ($8|0)==(1);
   $9 = ((($7)) + 4|0);
   do {
    if ($switch2$i$i$i) {
     $$pre$i$i = HEAP32[$9>>2]|0;
     $phitmp$i$i = ($$pre$i$i|0)==(0);
     if ($phitmp$i$i) {
      $$pre$i = ((($7)) + 8|0);
      $$pre$phi$iZ2D = $$pre$i;$$pre$phi13$i$iZ2D = $9;$75 = $_4$i$i$i$i;
      label = 11;
      break;
     } else {
      HEAP32[$_4$i$i$i$i>>2] = 0;
      $76 = $_4$i$i$i$i;
      label = 20;
      break;
     }
    } else {
     $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx22$i$i$i = ((($7)) + 8|0);
     HEAP8[$7>>0]=1&255;HEAP8[$7+1>>0]=(1>>8)&255;HEAP8[$7+2>>0]=(1>>16)&255;HEAP8[$7+3>>0]=1>>24;
     HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
     $10 = $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx22$i$i$i;
     $11 = $10;
     HEAP8[$11>>0]=0&255;HEAP8[$11+1>>0]=(0>>8)&255;HEAP8[$11+2>>0]=(0>>16)&255;HEAP8[$11+3>>0]=0>>24;
     $12 = (($10) + 4)|0;
     $13 = $12;
     HEAP8[$13>>0]=0&255;HEAP8[$13+1>>0]=(0>>8)&255;HEAP8[$13+2>>0]=(0>>16)&255;HEAP8[$13+3>>0]=0>>24;
     $$pre$phi$iZ2D = $_10$sroa$6$i$sroa$4$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx22$i$i$i;$$pre$phi13$i$iZ2D = $9;$75 = $_4$i$i$i$i;
     label = 11;
    }
   } while(0);
   do {
    if ((label|0) == 11) {
     HEAP8[$$pre$phi13$i$iZ2D>>0]=-1&255;HEAP8[$$pre$phi13$i$iZ2D+1>>0]=(-1>>8)&255;HEAP8[$$pre$phi13$i$iZ2D+2>>0]=(-1>>16)&255;HEAP8[$$pre$phi13$i$iZ2D+3>>0]=-1>>24;
     $14 = $9;
     $_7$sroa$4$0$$sroa_idx3$i$i$i$i$i = ((($_4$i$i$i$i)) + 4|0);
     HEAP32[$_7$sroa$4$0$$sroa_idx3$i$i$i$i$i>>2] = $14;
     HEAP32[$_4$i$i$i$i>>2] = $$pre$phi$iZ2D;
     $15 = $_4$i$i$i$i;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) + 4)|0;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = $borrowed$i$i$i$i;
     $22 = $21;
     HEAP32[$22>>2] = $17;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     $25 = $17;
     $26 = HEAP32[$25>>2]|0;
     $switch$i$i$i$i$i = ($26|0)==(0|0);
     $27 = $20;
     if ($switch$i$i$i$i$i) {
      HEAP8[$27>>0]=0&255;HEAP8[$27+1>>0]=(0>>8)&255;HEAP8[$27+2>>0]=(0>>16)&255;HEAP8[$27+3>>0]=0>>24;
      $76 = $75;
      label = 20;
      break;
     }
     ;HEAP32[$_15$i$i$i$i>>2]=HEAP32[$_3>>2]|0;HEAP32[$_15$i$i$i$i+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$_15$i$i$i$i+8>>2]=HEAP32[$_3+8>>2]|0;HEAP32[$_15$i$i$i$i+12>>2]=HEAP32[$_3+12>>2]|0;HEAP32[$_15$i$i$i$i+16>>2]=HEAP32[$_3+16>>2]|0;HEAP32[$_15$i$i$i$i+20>>2]=HEAP32[$_3+20>>2]|0;
     $31 = $17;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($25)) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     ;HEAP32[$_4$i$i$i$i$i>>2]=HEAP32[$_15$i$i$i$i>>2]|0;HEAP32[$_4$i$i$i$i$i+4>>2]=HEAP32[$_15$i$i$i$i+4>>2]|0;HEAP32[$_4$i$i$i$i$i+8>>2]=HEAP32[$_15$i$i$i$i+8>>2]|0;HEAP32[$_4$i$i$i$i$i+12>>2]=HEAP32[$_15$i$i$i$i+12>>2]|0;HEAP32[$_4$i$i$i$i$i+16>>2]=HEAP32[$_15$i$i$i$i+16>>2]|0;HEAP32[$_4$i$i$i$i$i+20>>2]=HEAP32[$_15$i$i$i$i+20>>2]|0;
     $35 = ((($34)) + 24|0);
     $36 = HEAP32[$35>>2]|0;
     __THREW__ = 0;
     invoke_viii($36|0,($_16$i$i$i|0),($32|0),($_4$i$i$i$i$i|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if (!($38)) {
      HEAP8[$27>>0]=0&255;HEAP8[$27+1>>0]=(0>>8)&255;HEAP8[$27+2>>0]=(0>>16)&255;HEAP8[$27+3>>0]=0>>24;
      break;
     }
     $28 = ___cxa_find_matching_catch_2()|0;
     $29 = tempRet0;
     __ZN4core3ptr13drop_in_place17h3090aaf055f7624fE($borrowed$i$i$i$i);
     $30 = ($17|0)==(0);
     if (!($30)) {
      $personalityslot$sroa$0$0$i$i$i$i = $28;$personalityslot$sroa$8$0$i$i$i$i = $29;
      ___resumeException($personalityslot$sroa$0$0$i$i$i$i|0);
      // unreachable;
     }
     __ZN4core3ptr13drop_in_place17hb5cdb37508272afcE($_4$i$i$i$i);
     $personalityslot$sroa$0$0$i$i$i$i = $28;$personalityslot$sroa$8$0$i$i$i$i = $29;
     ___resumeException($personalityslot$sroa$0$0$i$i$i$i|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 20) {
    $39 = (__ZN3std2io5stdio6stdout17h50393728fd37ff08E()|0);
    HEAP32[$_17$i$i$i$i>>2] = $39;
    ;HEAP32[$_19$i$i$i$i>>2]=HEAP32[$_3>>2]|0;HEAP32[$_19$i$i$i$i+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$_19$i$i$i$i+8>>2]=HEAP32[$_3+8>>2]|0;HEAP32[$_19$i$i$i$i+12>>2]=HEAP32[$_3+12>>2]|0;HEAP32[$_19$i$i$i$i+16>>2]=HEAP32[$_3+16>>2]|0;HEAP32[$_19$i$i$i$i+20>>2]=HEAP32[$_3+20>>2]|0;
    __THREW__ = 0;
    invoke_viii(142,($_16$i$i$i|0),($_17$i$i$i$i|0),($_19$i$i$i$i|0));
    $43 = __THREW__; __THREW__ = 0;
    $44 = $43&1;
    if ($44) {
     $45 = ___cxa_find_matching_catch_2()|0;
     $46 = tempRet0;
     __ZN4core3ptr13drop_in_place17h49f6f3f994fceba7E($_17$i$i$i$i);
     $personalityslot$sroa$0$0$i$i$i$i = $45;$personalityslot$sroa$8$0$i$i$i$i = $46;
     ___resumeException($personalityslot$sroa$0$0$i$i$i$i|0);
     // unreachable;
    }
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;HEAP32[$40>>2] = (($41-1)|0);
    $42 = ($41|0)==(1);
    if ($42) {
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h1842960a728cf569E($_17$i$i$i$i);
    }
   }
   ;HEAP32[$result$i>>2]=HEAP32[$_16$i$i$i>>2]|0;HEAP32[$result$i+4>>2]=HEAP32[$_16$i$i$i+4>>2]|0;HEAP32[$result$i+8>>2]=HEAP32[$_16$i$i$i+8>>2]|0;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $4 = (__ZN3std2io5stdio6stdout17h50393728fd37ff08E()|0);
  HEAP32[$_10$i>>2] = $4;
  ;HEAP32[$_12$i>>2]=HEAP32[$_3>>2]|0;HEAP32[$_12$i+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$_12$i+8>>2]=HEAP32[$_3+8>>2]|0;HEAP32[$_12$i+12>>2]=HEAP32[$_3+12>>2]|0;HEAP32[$_12$i+16>>2]=HEAP32[$_3+16>>2]|0;HEAP32[$_12$i+20>>2]=HEAP32[$_3+20>>2]|0;
  __THREW__ = 0;
  invoke_viii(142,($result$i|0),($_10$i|0),($_12$i|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $73 = ___cxa_find_matching_catch_2()|0;
   $74 = tempRet0;
   __ZN4core3ptr13drop_in_place17h49f6f3f994fceba7E($_10$i);
   $personalityslot$sroa$0$0$i = $73;$personalityslot$sroa$6$0$i = $74;
   ___resumeException($personalityslot$sroa$0$0$i|0);
   // unreachable;
  }
  $48 = $4;
  $49 = HEAP32[$48>>2]|0;HEAP32[$48>>2] = (($49-1)|0);
  $50 = ($49|0)==(1);
  if ($50) {
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h1842960a728cf569E($_10$i);
  }
 }
 $47 = HEAP32[$result$i>>2]|0;
 $cond$i = ($47|0)==(1);
 if (!($cond$i)) {
  STACKTOP = sp;return;
 }
 $51 = ((($result$i)) + 4|0);
 $52 = $51;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $e$i;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $62 = $label$i;
 $63 = $e$i;
 HEAP32[$_28$i>>2] = $62;
 $64 = ((($_28$i)) + 4|0);
 HEAP32[$64>>2] = (93);
 $65 = ((($_28$i)) + 8|0);
 HEAP32[$65>>2] = $63;
 $66 = ((($_28$i)) + 12|0);
 HEAP32[$66>>2] = (117);
 HEAP32[$_21$i>>2] = 3164;
 $67 = ((($_21$i)) + 4|0);
 HEAP32[$67>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i$i = ((($_21$i)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i$i = ((($_21$i)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2;
 $68 = ((($_21$i)) + 16|0);
 HEAP32[$68>>2] = $_28$i;
 $69 = ((($_21$i)) + 20|0);
 HEAP32[$69>>2] = 2;
 __THREW__ = 0;
 invoke_vii(118,($_21$i|0),(3180|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = ___cxa_find_matching_catch_2()|0;
 $72 = tempRet0;
 __ZN4core3ptr13drop_in_place17h4000831a22082efeE($e$i);
 $personalityslot$sroa$0$0$i = $71;$personalityslot$sroa$6$0$i = $72;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hb5cdb37508272afcE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($arg0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP8[$3>>0]=0&255;HEAP8[$3+1>>0]=(0>>8)&255;HEAP8[$3+2>>0]=(0>>16)&255;HEAP8[$3+3>>0]=0>>24;
 return;
}
function __ZN4core3ptr13drop_in_place17h49f6f3f994fceba7E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $_4$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_4$sroa$0$0$copyload2$i$i$i$i = HEAP32[$arg0>>2]|0;
 $0 = HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i>>2] = (($0-1)|0);
 $1 = ($0|0)==(1);
 if (!($1)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h1842960a728cf569E($arg0);
 return;
}
function __ZN3std4sync4once4Once10call_inner17h0cc4a7759d5194a2E($self,$ignore_poisoning,$0,$1) {
 $self = $self|0;
 $ignore_poisoning = $ignore_poisoning|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_38$sroa$0$0$$sroa_idx = 0, $complete = 0, $node = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$8$0 = 0, $self$i$i = 0, $state$0 = 0, $state$1 = 0, $success = 0, $success1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$i$i = sp + 24|0;
 $node = sp + 8|0;
 $complete = sp;
 $2 = HEAP32[$self>>2]|0;
 $_38$sroa$0$0$$sroa_idx = ((($node)) + 8|0);
 $3 = ((($node)) + 4|0);
 $4 = $node;
 $5 = $4 | 2;
 $state$0 = $2;
 L1: while(1) {
  switch ($state$0|0) {
  case 3:  {
   label = 7;
   break L1;
   break;
  }
  case 1:  {
   if (!($ignore_poisoning)) {
    label = 3;
    break L1;
   }
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $7 = $state$0 & 3;
   $8 = ($7|0)==(2);
   if (!($8)) {
    label = 11;
    break L1;
   }
   $15 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h98747b8064f0dfd3E()|0);
   HEAP32[$self$i$i>>2] = $15;
   $16 = ($15|0)==(0);
   if ($16) {
    label = 13;
    break L1;
   }
   HEAP32[$node>>2] = $15;
   HEAP8[$_38$sroa$0$0$$sroa_idx>>0] = 0;
   HEAP32[$3>>2] = 0;
   $state$1 = $state$0;
   while(1) {
    $20 = $state$1 & 3;
    $21 = ($20|0)==(2);
    if (!($21)) {
     label = 16;
     break;
    }
    $26 = $state$1 & -4;
    $27 = $26;
    HEAP32[$3>>2] = $27;
    $28 = HEAP32[$self>>2]|0;if (($28|0) == ($state$1|0)) HEAP32[$self>>2] = $5;
    $success1 = ($28|0)==($state$1|0);
    if ($success1) {
     break;
    } else {
     $state$1 = $28;
    }
   }
   if ((label|0) == 16) {
    label = 0;
    $22 = HEAP32[$node>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $24 = HEAP32[$22>>2]|0;HEAP32[$22>>2] = (($24-1)|0);
     $25 = ($24|0)==(1);
     if ($25) {
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($node);
     }
    }
    $state$0 = $state$1;
    continue L1;
   }
   while(1) {
    $29 = HEAP8[$_38$sroa$0$0$$sroa_idx>>0]|0;
    $30 = ($29<<24>>24)==(0);
    if (!($30)) {
     break;
    }
    __THREW__ = 0;
    invoke_v(143);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     label = 27;
     break L1;
    }
   }
   $33 = HEAP32[$self>>2]|0;
   $34 = HEAP32[$node>>2]|0;
   $35 = ($34|0)==(0|0);
   if (!($35)) {
    $36 = HEAP32[$34>>2]|0;HEAP32[$34>>2] = (($36-1)|0);
    $37 = ($36|0)==(1);
    if ($37) {
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($node);
    }
   }
   $state$0 = $33;
   continue L1;
  }
  }
  $6 = HEAP32[$self>>2]|0;if (($6|0) == ($state$0|0)) HEAP32[$self>>2] = 2;
  $success = ($6|0)==($state$0|0);
  if ($success) {
   label = 8;
   break;
  } else {
   $state$0 = $6;
  }
 }
 if ((label|0) == 3) {
  __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(7614,42,3196);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  HEAP8[$complete>>0] = 1;
  $9 = ((($complete)) + 4|0);
  HEAP32[$9>>2] = $self;
  $10 = ($state$0|0)==(1);
  $11 = ((($1)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  __THREW__ = 0;
  invoke_vii($12|0,($0|0),($10|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $40 = ___cxa_find_matching_catch_2()|0;
   $41 = tempRet0;
   __ZN4core3ptr13drop_in_place17h5cff9d50ab32f975E($complete);
   $personalityslot$sroa$0$0 = $40;$personalityslot$sroa$8$0 = $41;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  } else {
   HEAP8[$complete>>0] = 0;
   __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17hcebb3829227c47c7E($complete);
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 11) {
  __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(7656,47,3212);
  // unreachable;
 }
 else if ((label|0) == 13) {
  __THREW__ = 0;
  invoke_vii(133,(5089|0),94);
  $17 = __THREW__; __THREW__ = 0;
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  __ZN4core3ptr13drop_in_place17h6dd585eab22f486eE($self$i$i);
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  __ZN4core3ptr13drop_in_place17h62bcf7d83add4a8eE($node);
  $personalityslot$sroa$0$0 = $38;$personalityslot$sroa$8$0 = $39;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
}
function __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17hcebb3829227c47c7E($self) {
 $self = $self|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_22 = 0, $_29 = 0, $_4$sroa$0$0$copyload2$i$i$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0;
 var $left_val = 0, $queue1$019 = 0, $right_val = 0, $self$i = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $self$i = sp + 48|0;
 $thread = sp + 40|0;
 $_29 = sp + 24|0;
 $_22 = sp;
 $right_val = sp + 60|0;
 $left_val = sp + 56|0;
 $_11 = sp + 52|0;
 $0 = HEAP8[$self>>0]|0;
 $1 = ($0<<24>>24)==(0);
 $2 = ((($self)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $$sink = $1 ? 3 : 1;
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = $$sink;
 $5 = $4 & 3;
 HEAP32[$_11>>2] = $5;
 HEAP32[$left_val>>2] = $_11;
 HEAP32[$right_val>>2] = 3228;
 $6 = ($5|0)==(2);
 if (!($6)) {
  $7 = $left_val;
  $8 = $right_val;
  HEAP32[$_29>>2] = $7;
  $9 = ((($_29)) + 4|0);
  HEAP32[$9>>2] = (42);
  $10 = ((($_29)) + 8|0);
  HEAP32[$10>>2] = $8;
  $11 = ((($_29)) + 12|0);
  HEAP32[$11>>2] = (42);
  HEAP32[$_22>>2] = 2352;
  $12 = ((($_22)) + 4|0);
  HEAP32[$12>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i = ((($_22)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
  $_5$sroa$4$0$$sroa_idx2$i = ((($_22)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
  $13 = ((($_22)) + 16|0);
  HEAP32[$13>>2] = $_29;
  $14 = ((($_22)) + 20|0);
  HEAP32[$14>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($_22,3232);
  // unreachable;
 }
 $15 = $4 & -4;
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $15;
 $queue1$019 = $17;
 while(1) {
  $18 = ((($queue1$019)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAPU8[$queue1$019>>0]|(HEAPU8[$queue1$019+1>>0]<<8)|(HEAPU8[$queue1$019+2>>0]<<16)|(HEAPU8[$queue1$019+3>>0]<<24);
  HEAP8[$queue1$019>>0]=0&255;HEAP8[$queue1$019+1>>0]=(0>>8)&255;HEAP8[$queue1$019+2>>0]=(0>>16)&255;HEAP8[$queue1$019+3>>0]=0>>24;
  HEAP32[$self$i>>2] = $20;
  $21 = ($20|0)==(0);
  if ($21) {
   label = 7;
   break;
  }
  HEAP32[$thread>>2] = $20;
  $25 = ((($queue1$019)) + 8|0);
  HEAP8[$25>>0] = 1;
  __THREW__ = 0;
  invoke_vi(144,($thread|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 12;
   break;
  }
  $_4$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$thread>>2]|0;
  $28 = HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i>>2] = (($28-1)|0);
  $29 = ($28|0)==(1);
  if ($29) {
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($thread);
  }
  $30 = ($19|0)==(0|0);
  if ($30) {
   label = 5;
   break;
  } else {
   $queue1$019 = $19;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  __THREW__ = 0;
  invoke_vi(91,(2280|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  __ZN4core3ptr13drop_in_place17h6dd585eab22f486eE($self$i);
  ___resumeException($23|0);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = tempRet0;
  __ZN4core3ptr13drop_in_place17h9e419fd5ea2ba438E($thread);
  ___resumeException($31|0);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17h62bcf7d83add4a8eE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($arg0);
 return;
}
function __ZN4core3ptr13drop_in_place17h5cff9d50ab32f975E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17hcebb3829227c47c7E($arg0);
 return;
}
function __ZN4core3ptr13drop_in_place17h0f88ba7175dd4980E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17h8493f05a525ecf02E($arg0,$arg1) {
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 var $$$i$i = 0, $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$112$i$i$i$i$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i6$i$i$i$i$i$i$i$i$i = 0;
 var $_39$sroa$4$0$$sroa_idx38$i$i = 0, $_39$sroa$5$0$$sroa_idx40$i$i = 0, $_39$sroa$6$0$$sroa_idx42$i$i = 0, $_40$sroa$0$0$copyload$i$i = 0, $_40$sroa$4$0$$sroa_idx45$i$i = 0, $_40$sroa$4$0$copyload$i$i = 0, $_40$sroa$5$0$$sroa_idx47$i$i = 0, $_40$sroa$5$0$copyload$i$i = 0, $iter$sroa$0$0$i$i = 0, $iter$sroa$0$0$ph$i$i = 0, $iter1$i$i = 0, $magicptr$i$i = 0, $switch$i = 0, $tmp$sroa$0$0$copyload$i$i$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = 0, $tmp$sroa$5$0$copyload$i1$i79$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $iter1$i$i = sp;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 HEAP8[$0>>0] = 0;
 $switch$i = ($1<<24>>24)==(0);
 if ($switch$i) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(2280);
  // unreachable;
 }
 (_pthread_mutex_lock(((13496)|0))|0);
 $2 = HEAP32[3381]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i = HEAP32[$2>>2]|0;
  $4 = ((($2)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i) + (($5*12)|0)|0);
  $7 = ($5|0)==(0);
  if (!($7)) {
   $_10$112$i$i$i$i$i$i$i$i = $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i;
   while(1) {
    $8 = ((($_10$112$i$i$i$i$i$i$i$i)) + 12|0);
    $9 = ((($_10$112$i$i$i$i$i$i$i$i)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if (!($11)) {
     $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i = HEAP32[$_10$112$i$i$i$i$i$i$i$i>>2]|0;
     ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i,$10,1);
    }
    $12 = ($8|0)==($6|0);
    if ($12) {
     break;
    } else {
     $_10$112$i$i$i$i$i$i$i$i = $8;
    }
   }
  }
  $13 = ((($2)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = ($14*12)|0;
   $_2$sroa$0$0$copyload2$i6$i$i$i$i$i$i$i$i$i = HEAP32[$2>>2]|0;
   ___rust_dealloc($_2$sroa$0$0$copyload2$i6$i$i$i$i$i$i$i$i$i,$16,4);
  }
  $17 = HEAP32[3381]|0;
  ___rust_dealloc($17,12,4);
 }
 HEAP32[3381] = 0;
 (_pthread_mutex_unlock(((13496)|0))|0);
 $_39$sroa$4$0$$sroa_idx38$i$i = ((($iter1$i$i)) + 4|0);
 $_39$sroa$5$0$$sroa_idx40$i$i = ((($iter1$i$i)) + 8|0);
 $_39$sroa$6$0$$sroa_idx42$i$i = ((($iter1$i$i)) + 12|0);
 $iter$sroa$0$0$ph$i$i = 0;
 L17: while(1) {
  $iter$sroa$0$0$i$i = $iter$sroa$0$0$ph$i$i;
  L19: while(1) {
   $18 = ($iter$sroa$0$0$i$i>>>0)<(10);
   if (!($18)) {
    label = 24;
    break L17;
   }
   $$arith = (($iter$sroa$0$0$i$i) + 1)|0;
   $$overflow = ($iter$sroa$0$0$i$i>>>0)>(4294967294);
   if ($$overflow) {
    label = 24;
    break L17;
   }
   (_pthread_mutex_lock(((13528)|0))|0);
   $19 = HEAP32[3389]|0;
   $20 = ($iter$sroa$0$0$i$i|0)==(9);
   $$$i$i = $20 ? (1) : 0;
   HEAP32[3389] = $$$i$i;
   (_pthread_mutex_unlock(((13528)|0))|0);
   $magicptr$i$i = $19;
   switch ($magicptr$i$i|0) {
   case 1:  {
    label = 16;
    break L17;
    break;
   }
   case 0:  {
    $iter$sroa$0$0$i$i = $$arith;
    break;
   }
   default: {
    break L19;
   }
   }
  }
  $_40$sroa$0$0$copyload$i$i = HEAP32[$19>>2]|0;
  $_40$sroa$4$0$$sroa_idx45$i$i = ((($19)) + 4|0);
  $_40$sroa$4$0$copyload$i$i = HEAP32[$_40$sroa$4$0$$sroa_idx45$i$i>>2]|0;
  $_40$sroa$5$0$$sroa_idx47$i$i = ((($19)) + 8|0);
  $_40$sroa$5$0$copyload$i$i = HEAP32[$_40$sroa$5$0$$sroa_idx47$i$i>>2]|0;
  $21 = (($_40$sroa$0$0$copyload$i$i) + ($_40$sroa$5$0$copyload$i$i<<3)|0);
  HEAP32[$iter1$i$i>>2] = $_40$sroa$0$0$copyload$i$i;
  HEAP32[$_39$sroa$4$0$$sroa_idx38$i$i>>2] = $_40$sroa$4$0$copyload$i$i;
  HEAP32[$_39$sroa$5$0$$sroa_idx40$i$i>>2] = $_40$sroa$0$0$copyload$i$i;
  HEAP32[$_39$sroa$6$0$$sroa_idx42$i$i>>2] = $21;
  $22 = $_40$sroa$0$0$copyload$i$i;
  while(1) {
   $23 = ($22|0)==($21|0);
   if ($23) {
    break;
   }
   $28 = ((($22)) + 8|0);
   $tmp$sroa$0$0$copyload$i$i$i$i = HEAP32[$22>>2]|0;
   $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = ((($22)) + 4|0);
   $tmp$sroa$5$0$copyload$i1$i79$i$i = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i$i$i>>2]|0;
   $29 = ((($tmp$sroa$5$0$copyload$i1$i79$i$i)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   __THREW__ = 0;
   invoke_vi($30|0,($tmp$sroa$0$0$copyload$i$i$i$i|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    label = 22;
    break L17;
   } else {
    $22 = $28;
   }
  }
  HEAP32[$_39$sroa$5$0$$sroa_idx40$i$i>>2] = $21;
  $24 = ($_40$sroa$4$0$copyload$i$i|0)==(0);
  if (!($24)) {
   $25 = $_40$sroa$4$0$copyload$i$i << 3;
   ___rust_dealloc($_40$sroa$0$0$copyload$i$i,$25,4);
  }
  ___rust_dealloc($19,12,4);
  $iter$sroa$0$0$ph$i$i = $$arith;
 }
 if ((label|0) == 16) {
  __ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E(7736,37,3248);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  HEAP32[$_39$sroa$5$0$$sroa_idx40$i$i>>2] = $28;
  __ZN4core3ptr13drop_in_place17hcce3d53e9fb2687eE($iter1$i$i);
  __ZN5alloc4heap8box_free17h63c4ae2bbf361eb9E($19);
  ___resumeException($26|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function __ZN4core3ops8function6FnOnce9call_once17h84874e26aa349f75E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17h8493f05a525ecf02E($arg0,$1);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17hcce3d53e9fb2687eE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_22$sroa$0$0$copyload4344$i = 0, $tmp$sroa$0$0$copyload$i$i$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = 0, $tmp$sroa$5$0$copyload$i1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($arg0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 L1: do {
  if (!($4)) {
   $13 = $1;
   while(1) {
    $12 = ((($13)) + 8|0);
    HEAP32[$0>>2] = $12;
    $tmp$sroa$0$0$copyload$i$i$i$i = HEAP32[$13>>2]|0;
    $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = ((($13)) + 4|0);
    $tmp$sroa$5$0$copyload$i1$i$i$i = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i$i$i>>2]|0;
    $14 = $tmp$sroa$5$0$copyload$i1$i$i$i;
    $15 = HEAP32[$14>>2]|0;
    __THREW__ = 0;
    invoke_vi($15|0,($tmp$sroa$0$0$copyload$i$i$i$i|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     break;
    }
    $18 = $tmp$sroa$5$0$copyload$i1$i$i$i;
    $19 = ((($18)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    if (!($21)) {
     $22 = ((($18)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     ___rust_dealloc($tmp$sroa$0$0$copyload$i$i$i$i,$20,$23);
    }
    $24 = HEAP32[$0>>2]|0;
    $25 = HEAP32[$2>>2]|0;
    $26 = ($24|0)==($25|0);
    if ($26) {
     break L1;
    } else {
     $13 = $24;
    }
   }
   $5 = ___cxa_find_matching_catch_2()|0;
   $6 = tempRet0;
   $7 = $tmp$sroa$5$0$copyload$i1$i$i$i;
   __ZN5alloc4heap8box_free17h4b65c90a039c8535E($tmp$sroa$0$0$copyload$i$i$i$i,$7);
   ___resumeException($5|0);
   // unreachable;
  }
 } while(0);
 $8 = ((($arg0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = $9 << 3;
 $_22$sroa$0$0$copyload4344$i = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($_22$sroa$0$0$copyload4344$i,$11,4);
 return;
}
function __ZN5alloc4heap8box_free17h63c4ae2bbf361eb9E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4);
 return;
}
function ___rdl_alloc($size,$align,$err) {
 $size = $size|0;
 $align = $align|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0$0 = 0, $_18$sroa$4$0$err$sroa_idx = 0, $_18$sroa$5$0$err$sroa_idx = 0, $out$i$i$i = 0, $ptr$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i = sp;
 $0 = ($align>>>0)<(9);
 if ($0) {
  $1 = (_malloc($size)|0);
  $ptr$0$i$i = $1;
  label = 4;
 } else {
  HEAP32[$out$i$i$i>>2] = 0;
  $2 = (_posix_memalign($out$i$i$i,$align,$size)|0);
  $3 = ($2|0)==(0);
  $4 = HEAP32[$out$i$i$i>>2]|0;
  if ($3) {
   $ptr$0$i$i = $4;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $5 = ($ptr$0$i$i|0)==(0|0);
  if (!($5)) {
   $_0$0 = $ptr$0$i$i;
   STACKTOP = sp;return ($_0$0|0);
  }
 }
 HEAP32[$err>>2] = 0;
 $_18$sroa$4$0$err$sroa_idx = ((($err)) + 4|0);
 HEAP32[$_18$sroa$4$0$err$sroa_idx>>2] = $size;
 $_18$sroa$5$0$err$sroa_idx = ((($err)) + 8|0);
 HEAP32[$_18$sroa$5$0$err$sroa_idx>>2] = $align;
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0);
}
function ___rdl_oom($err) {
 $err = $err|0;
 var $$val$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp + 16|0;
 $_4 = sp;
 $0 = HEAP32[$err>>2]|0;
 $1 = ((($err)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($err)) + 8|0);
 $$val$i = HEAP32[$3>>2]|0;
 HEAP32[$_4>>2] = $0;
 $4 = ((($_4)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_4)) + 8|0);
 HEAP32[$5>>2] = $$val$i;
 __ZN64__LT_alloc_system__System_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h81f8a12ec7d9e0edE($_3,$_4);
 // unreachable;
}
function ___rdl_dealloc($ptr,$size,$align) {
 $ptr = $ptr|0;
 $size = $size|0;
 $align = $align|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function ___rdl_realloc($ptr,$old_size,$old_align,$new_size,$new_align,$err) {
 $ptr = $ptr|0;
 $old_size = $old_size|0;
 $old_align = $old_align|0;
 $new_size = $new_size|0;
 $new_align = $new_align|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0$0 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_13$sroa$13$0$ph = 0, $_13$sroa$16$0$ph = 0, $_13$sroa$7$0$ph = 0, $_26$sroa$4$0$err$sroa_idx = 0, $_26$sroa$5$0$err$sroa_idx = 0, $or$cond$i$i = 0, $out$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i$i = sp;
 $0 = ($old_align|0)==($new_align|0);
 do {
  if ($0) {
   $1 = ($old_align>>>0)<(9);
   if ($1) {
    $2 = (_realloc($ptr,$new_size)|0);
    $3 = ($2|0)==(0|0);
    if ($3) {
     $_13$sroa$13$0$ph = $new_size;$_13$sroa$16$0$ph = $old_align;$_13$sroa$7$0$ph = 0;
     break;
    } else {
     $_0$0 = $2;
    }
    STACKTOP = sp;return ($_0$0|0);
   }
   HEAP32[$out$i$i$i$i>>2] = 0;
   $4 = (_posix_memalign($out$i$i$i$i,$old_align,$new_size)|0);
   $5 = ($4|0)!=(0);
   $6 = HEAP32[$out$i$i$i$i>>2]|0;
   $7 = ($6|0)==(0|0);
   $or$cond$i$i = $5 | $7;
   if ($or$cond$i$i) {
    $_13$sroa$13$0$ph = $new_size;$_13$sroa$16$0$ph = $old_align;$_13$sroa$7$0$ph = 0;
   } else {
    $8 = ($old_size>>>0)<=($new_size>>>0);
    $_0$0$sroa$speculated$i$i$i$i = $8 ? $old_size : $new_size;
    _memcpy(($6|0),($ptr|0),($_0$0$sroa$speculated$i$i$i$i|0))|0;
    _free($ptr);
    $_0$0 = $6;
    STACKTOP = sp;return ($_0$0|0);
   }
  } else {
   $_13$sroa$13$0$ph = (7819);$_13$sroa$16$0$ph = 36;$_13$sroa$7$0$ph = 1;
  }
 } while(0);
 HEAP32[$err>>2] = $_13$sroa$7$0$ph;
 $_26$sroa$4$0$err$sroa_idx = ((($err)) + 4|0);
 HEAP32[$_26$sroa$4$0$err$sroa_idx>>2] = $_13$sroa$13$0$ph;
 $_26$sroa$5$0$err$sroa_idx = ((($err)) + 8|0);
 HEAP32[$_26$sroa$5$0$err$sroa_idx>>2] = $_13$sroa$16$0$ph;
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0);
}
function __ZN3std10sys_common11thread_info3set17he9db28551ac32c6dE($stack_guard,$0) {
 $stack_guard = $stack_guard|0;
 $0 = $0|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0, $$sroa_idx3$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_3$i$i$i = 0, $_4$sroa$4$0$$sroa_idx12$i$i$i = 0, $_5$i = 0, $_8$sroa$4$0$$sroa_idx31 = 0, $_9$i$i$i = 0, $eh$lpad$body32$index2Z2D = 0, $eh$lpad$body32$indexZ2D = 0, $personalityslot$sroa$0$015$i$i = 0, $personalityslot$sroa$6$016$i$i = 0, $phitmp = 0, $phitmp$i = 0, $phitmp$i19 = 0, $switch$i$i = 0, $switch$i$i14 = 0, $switch2$i$i = 0, $switch2$i$i15 = 0, $thread = 0, $value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = 0;
 var $value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_9$i$i$i = sp + 40|0;
 $_3$i$i$i = sp + 24|0;
 $_5$i = sp + 8|0;
 $thread = sp;
 HEAP32[$thread>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_i(145)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $switch$i$i = ($1|0)==(0|0);
   if ($switch$i$i) {
    __THREW__ = 0;
    invoke_v(104);
    $8 = __THREW__; __THREW__ = 0;
    break;
   }
   $4 = HEAP32[$1>>2]|0;
   $switch2$i$i = ($4|0)==(1);
   $5 = ((($1)) + 4|0);
   if ($switch2$i$i) {
    $$pre$i = HEAP32[$5>>2]|0;
    $phitmp$i = ($$pre$i|0)==(-1);
    if ($phitmp$i) {
     __THREW__ = 0;
     invoke_v(87);
     $6 = __THREW__; __THREW__ = 0;
     break;
    }
    $$phi$trans$insert = ((($1)) + 16|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $phitmp = ($$pre|0)==(0|0);
    if (!($phitmp)) {
     __THREW__ = 0;
     invoke_viii(95,(7855|0),38,(3264|0));
     $7 = __THREW__; __THREW__ = 0;
     break;
    }
   } else {
    HEAP8[$1>>0]=1&255;HEAP8[$1+1>>0]=(1>>8)&255;HEAP8[$1+2>>0]=(1>>16)&255;HEAP8[$1+3>>0]=1>>24;
    HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
    $value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = ((($1)) + 16|0);
    HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i>>0]=0&255;HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+3>>0]=0>>24;
   }
   $9 = $stack_guard;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = $_5$i;
   $16 = $15;
   HEAP32[$16>>2] = $11;
   $17 = (($15) + 4)|0;
   $18 = $17;
   HEAP32[$18>>2] = $14;
   $_8$sroa$4$0$$sroa_idx31 = ((($_5$i)) + 8|0);
   HEAP32[$_8$sroa$4$0$$sroa_idx31>>2] = $0;
   $19 = $0;
   __THREW__ = 0;
   $20 = (invoke_i(145)|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   do {
    if ($22) {
     $48 = ___cxa_find_matching_catch_2()|0;
     $49 = tempRet0;
     __ZN4core3ptr13drop_in_place17haee5935388f24aa1E($_5$i);
     $personalityslot$sroa$0$015$i$i = $48;$personalityslot$sroa$6$016$i$i = $49;
    } else {
     $switch$i$i14 = ($20|0)==(0|0);
     if ($switch$i$i14) {
      $23 = HEAP32[$19>>2]|0;HEAP32[$19>>2] = (($23-1)|0);
      $24 = ($23|0)==(1);
      if (!($24)) {
       __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
       // unreachable;
      }
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($_8$sroa$4$0$$sroa_idx31);
      __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
      // unreachable;
     }
     $25 = HEAP32[$20>>2]|0;
     $switch2$i$i15 = ($25|0)==(1);
     $26 = ((($20)) + 4|0);
     if ($switch2$i$i15) {
      $$pre$i18 = HEAP32[$26>>2]|0;
      $phitmp$i19 = ($$pre$i18|0)==(0);
      $$pre$phi$iZ2D = $26;$56 = $phitmp$i19;
     } else {
      HEAP8[$20>>0]=1&255;HEAP8[$20+1>>0]=(1>>8)&255;HEAP8[$20+2>>0]=(1>>16)&255;HEAP8[$20+3>>0]=1>>24;
      HEAP8[$26>>0]=0&255;HEAP8[$26+1>>0]=(0>>8)&255;HEAP8[$26+2>>0]=(0>>16)&255;HEAP8[$26+3>>0]=0>>24;
      $value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i20 = ((($20)) + 16|0);
      HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i20>>0]=0&255;HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i20+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i20+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$49$0$t1$i$i$i$i$sroa$4$0$$sroa_cast$i$sroa_idx$i$i20+3>>0]=0>>24;
      $$pre$phi$iZ2D = $26;$56 = 1;
     }
     $27 = $_3$i$i$i;
     $28 = $27;
     HEAP32[$28>>2] = $11;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = $14;
     $_4$sroa$4$0$$sroa_idx12$i$i$i = ((($_3$i$i$i)) + 8|0);
     HEAP32[$_4$sroa$4$0$$sroa_idx12$i$i$i>>2] = $0;
     if (!($56)) {
      __THREW__ = 0;
      invoke_v(89);
      $31 = __THREW__; __THREW__ = 0;
      $32 = ___cxa_find_matching_catch_2()|0;
      $33 = tempRet0;
      __THREW__ = 0;
      invoke_vi(146,($_3$i$i$i|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if (!($35)) {
       $personalityslot$sroa$0$015$i$i = $32;$personalityslot$sroa$6$016$i$i = $33;
       break;
      }
      $50 = ___cxa_find_matching_catch_2()|0;
      $51 = tempRet0;
      $personalityslot$sroa$0$015$i$i = $50;$personalityslot$sroa$6$016$i$i = $51;
      break;
     }
     HEAP8[$$pre$phi$iZ2D>>0]=-1&255;HEAP8[$$pre$phi$iZ2D+1>>0]=(-1>>8)&255;HEAP8[$$pre$phi$iZ2D+2>>0]=(-1>>16)&255;HEAP8[$$pre$phi$iZ2D+3>>0]=-1>>24;
     $38 = ((($20)) + 8|0);
     $39 = $38;
     $40 = $26;
     HEAP32[$_9$i$i$i>>2] = $39;
     $$sroa_idx3$i$i$i$i = ((($_9$i$i$i)) + 4|0);
     HEAP32[$$sroa_idx3$i$i$i$i>>2] = $40;
     $41 = ((($20)) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      ;HEAP32[$38>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$38+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
      $52 = ((($_9$i$i$i)) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      HEAP8[$53>>0]=0&255;HEAP8[$53+1>>0]=(0>>8)&255;HEAP8[$53+2>>0]=(0>>16)&255;HEAP8[$53+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
     $44 = HEAP32[$42>>2]|0;HEAP32[$42>>2] = (($44-1)|0);
     $45 = ($44|0)==(1);
     if (!($45)) {
      ;HEAP32[$38>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$38+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
      $52 = ((($_9$i$i$i)) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      HEAP8[$53>>0]=0&255;HEAP8[$53+1>>0]=(0>>8)&255;HEAP8[$53+2>>0]=(0>>16)&255;HEAP8[$53+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
     /* fence */;
     __THREW__ = 0;
     invoke_vi(90,($41|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $36 = ___cxa_find_matching_catch_2()|0;
      $37 = tempRet0;
      ;HEAP32[$38>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$38+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
      __ZN4core3ptr13drop_in_place17h9d7acdbda03f799fE($_9$i$i$i);
      $personalityslot$sroa$0$015$i$i = $36;$personalityslot$sroa$6$016$i$i = $37;
      break;
     } else {
      ;HEAP32[$38>>2]=HEAP32[$_3$i$i$i>>2]|0;HEAP32[$38+4>>2]=HEAP32[$_3$i$i$i+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$_3$i$i$i+8>>2]|0;
      $52 = ((($_9$i$i$i)) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      HEAP8[$53>>0]=0&255;HEAP8[$53+1>>0]=(0>>8)&255;HEAP8[$53+2>>0]=(0>>16)&255;HEAP8[$53+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $eh$lpad$body32$index2Z2D = $personalityslot$sroa$6$016$i$i;$eh$lpad$body32$indexZ2D = $personalityslot$sroa$0$015$i$i;
   ___resumeException($eh$lpad$body32$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 $54 = ___cxa_find_matching_catch_2()|0;
 $55 = tempRet0;
 __ZN4core3ptr13drop_in_place17h9e419fd5ea2ba438E($thread);
 $eh$lpad$body32$index2Z2D = $55;$eh$lpad$body32$indexZ2D = $54;
 ___resumeException($eh$lpad$body32$indexZ2D|0);
 // unreachable;
}
function __ZN3std10sys_common11thread_info11THREAD_INFO7__getit17h592ba3c0c96cc1d3E() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i3 = 0, $_18$i$sroa$0$sroa$0$0$_18$i$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_5$i$i$i$i = 0, $cond$i$i = 0, $cond$i$i1 = 0, $err$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i$i = sp + 16|0;
 $_5$i$i$i$i = sp;
 $0 = HEAP32[568]|0;
 $cond$i$i = ($0|0)==(0);
 if ($cond$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2272)|0);
  $_0$0$i$i = $1;
 } else {
  $_0$0$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $10 = $$$i;
  STACKTOP = sp;return ($10|0);
 }
 $6 = (___rust_alloc(24,4,$err$i$i$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  ___rust_oom($_5$i$i$i$i);
  // unreachable;
 }
 HEAP32[$6>>2] = 2272;
 $_18$i$sroa$0$sroa$0$0$_18$i$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($6)) + 4|0);
 HEAP32[$_18$i$sroa$0$sroa$0$0$_18$i$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
 $8 = HEAP32[568]|0;
 $cond$i$i1 = ($8|0)==(0);
 if ($cond$i$i1) {
  $9 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E(2272)|0);
  $_0$0$i$i3 = $9;
 } else {
  $_0$0$i$i3 = $8;
 }
 (_pthread_setspecific(($_0$0$i$i3|0),($6|0))|0);
 $10 = $_18$i$sroa$0$sroa$0$0$_18$i$sroa$0$0$$sroa_raw_idx$sroa_idx;
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr13drop_in_place17haee5935388f24aa1E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $_4$sroa$0$0$copyload2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0);
 $_4$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$0>>2]|0;
 $1 = HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i>>2]|0;HEAP32[$_4$sroa$0$0$copyload2$i$i$i$i$i>>2] = (($1-1)|0);
 $2 = ($1|0)==(1);
 if (!($2)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E($0);
 return;
}
function _rust_begin_unwind($msg,$file$ptr,$file$meta,$line,$col) {
 $msg = $msg|0;
 $file$ptr = $file$ptr|0;
 $file$meta = $file$meta|0;
 $line = $line|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $2 = 0, $_9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_9 = sp;
 HEAP32[$_9>>2] = $file$ptr;
 $0 = ((($_9)) + 4|0);
 HEAP32[$0>>2] = $file$meta;
 $1 = ((($_9)) + 8|0);
 HEAP32[$1>>2] = $line;
 $2 = ((($_9)) + 12|0);
 HEAP32[$2>>2] = $col;
 __ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E($msg,$_9);
 // unreachable;
}
function __ZN3std2rt10lang_start17h9cca0072ff17d8f0E($0,$argc,$argv) {
 $0 = $0|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$ = 0, $$$i$i$i$i$i$i$i$i$i = 0, $$lcssa$i$i$i$i$i = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre5$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $_14 = 0;
 var $_15$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $_35$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $_5$i$i$i$i$i = 0, $_9 = 0, $__next$i$sroa$5$0$$sroa_idx$i$i$i$i$i = 0, $any_data$i$i = 0, $any_vtable$i$i = 0, $args$i$i = 0, $data$i$i = 0, $eh$lpad$body14$i$i$i$i$i$index2Z2D = 0, $eh$lpad$body14$i$i$i$i$i$indexZ2D = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $f$i$i = 0, $iter$i$sroa$0$073$i$i$i$i$i = 0, $local_len$i$i$i$i$i$i = 0, $main = 0, $personalityslot$sroa$0$1$i$i$i$i$i$i = 0;
 var $personalityslot$sroa$8$1$i$i$i$i$i$i = 0, $phitmp$i$i = 0, $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $ptr$0$i74$i$i$i$i$i = 0, $res = 0, $switch$i$i$i$i$i$i = 0, $switch$i2$i$i$i$i = 0, $switch2$i$i$i$i$i = 0, $vector$i$i$i$i$i = 0, $vector$i$i$i$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $_15$i$i = sp + 168|0;
 $f$i$i = sp + 160|0;
 $data$i$i = sp + 152|0;
 $any_vtable$i$i = sp + 180|0;
 $any_data$i$i = sp + 176|0;
 $err$i$i$i$i = sp + 136|0;
 $_5$i$i$i$i$i = sp + 120|0;
 $err$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = sp + 104|0;
 $_35$i$i$i$i$i$i$i$i$i$i$i$i$i$i = sp + 88|0;
 $vector$i$i$i$i$i$i$i$i$i$i$i = sp + 72|0;
 $local_len$i$i$i$i$i$i = sp + 64|0;
 $vector$i$i$i$i$i = sp + 48|0;
 $args$i$i = sp + 32|0;
 $res = sp + 24|0;
 $_14 = sp + 16|0;
 $_9 = sp;
 $main = sp + 172|0;
 HEAP32[$main>>2] = $0;
 __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17ha26fb5dd5ea39aabE($_9,7939,4);
 $1 = (__ZN3std6thread6Thread3new17ha003124fd8d98d59E($_9)|0);
 $2 = $_14;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 __ZN3std10sys_common11thread_info3set17he9db28551ac32c6dE($_14,$1);
 HEAP32[$vector$i$i$i$i$i>>2] = 4;
 $$sroa_idx$i$i$i$i$i$i = ((($vector$i$i$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i$i$i>>2] = 0;
 $6 = ((($vector$i$i$i$i$i)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ($argc|0)>(0);
 $$$i$i$i$i$i$i$i$i$i = $7 ? $argc : 0;
 __THREW__ = 0;
 invoke_vii(147,($vector$i$i$i$i$i|0),($$$i$i$i$i$i$i$i$i$i|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  $personalityslot$sroa$0$1$i$i$i$i$i$i = $49;$personalityslot$sroa$8$1$i$i$i$i$i$i = $50;
  __ZN4core3ptr13drop_in_place17h7939b4d3aee5839aE($vector$i$i$i$i$i);
  ___resumeException($personalityslot$sroa$0$1$i$i$i$i$i$i|0);
  // unreachable;
 }
 $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i$i$i>>2]|0;
 $14 = HEAP32[$6>>2]|0;
 HEAP32[$local_len$i$i$i$i$i$i>>2] = $6;
 $13 = ((($local_len$i$i$i$i$i$i)) + 4|0);
 HEAP32[$13>>2] = $14;
 L5: do {
  if ($7) {
   $15 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i) + (($14*12)|0)|0);
   $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 4|0);
   $16 = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 8|0);
   $12 = $14;$iter$i$sroa$0$073$i$i$i$i$i = 0;$ptr$0$i74$i$i$i$i$i = $15;
   while(1) {
    $17 = (($iter$i$sroa$0$073$i$i$i$i$i) + 1)|0;
    $18 = (($argv) + ($iter$i$sroa$0$073$i$i$i$i$i<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_strlen($19)|0);
    $21 = ($20|0)==(-1);
    if ($21) {
     label = 7;
     break;
    }
    $23 = ($20|0)<(0);
    if ($23) {
     label = 9;
     break;
    }
    $25 = ($20|0)==(0);
    if ($25) {
     $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i = (1);
    } else {
     $26 = (___rust_alloc($20,1,$err$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i)|0);
     $27 = ($26|0)==(0|0);
     if ($27) {
      label = 12;
      break;
     } else {
      $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i = $26;
     }
    }
    $28 = $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
    HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2] = $28;
    HEAP32[$$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i>>2] = $20;
    HEAP32[$16>>2] = 0;
    __THREW__ = 0;
    invoke_vii(115,($vector$i$i$i$i$i$i$i$i$i$i$i|0),($20|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 14;
     break;
    }
    $33 = HEAP32[$16>>2]|0;
    $34 = (($33) + ($20))|0;
    HEAP32[$16>>2] = $34;
    $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2]|0;
    $35 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i) + ($33)|0);
    _memcpy(($35|0),($19|0),($20|0))|0;
    $36 = $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (($36) + 4)|0;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $switch$i$i$i$i$i$i = ($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i|0)==(0|0);
    if ($switch$i$i$i$i$i$i) {
     $$lcssa$i$i$i$i$i = $12;
     break L5;
    }
    HEAP32[$ptr$0$i74$i$i$i$i$i>>2] = $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
    $__next$i$sroa$5$0$$sroa_idx$i$i$i$i$i = ((($ptr$0$i74$i$i$i$i$i)) + 4|0);
    $42 = $__next$i$sroa$5$0$$sroa_idx$i$i$i$i$i;
    $43 = $42;
    HEAP32[$43>>2] = $38;
    $44 = (($42) + 4)|0;
    $45 = $44;
    HEAP32[$45>>2] = $41;
    $46 = ((($ptr$0$i74$i$i$i$i$i)) + 12|0);
    $47 = (($12) + 1)|0;
    $48 = ($17|0)<($argc|0);
    if ($48) {
     $12 = $47;$iter$i$sroa$0$073$i$i$i$i$i = $17;$ptr$0$i74$i$i$i$i$i = $46;
    } else {
     $$lcssa$i$i$i$i$i = $47;
     break L5;
    }
   }
   if ((label|0) == 7) {
    __THREW__ = 0;
    invoke_vii(108,-1,0);
    $22 = __THREW__; __THREW__ = 0;
    label = 2;
   }
   else if ((label|0) == 9) {
    __THREW__ = 0;
    invoke_vi(91,(2824|0));
    $24 = __THREW__; __THREW__ = 0;
    label = 2;
   }
   else if ((label|0) == 12) {
    ___rust_oom($_35$i$i$i$i$i$i$i$i$i$i$i$i$i$i);
    // unreachable;
   }
   else if ((label|0) == 14) {
    $31 = ___cxa_find_matching_catch_2()|0;
    $32 = tempRet0;
    __ZN4core3ptr13drop_in_place17h55406b74fdf85ed6E($vector$i$i$i$i$i$i$i$i$i$i$i);
    $eh$lpad$body14$i$i$i$i$i$index2Z2D = $32;$eh$lpad$body14$i$i$i$i$i$indexZ2D = $31;
   }
   if ((label|0) == 2) {
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    $eh$lpad$body14$i$i$i$i$i$index2Z2D = $11;$eh$lpad$body14$i$i$i$i$i$indexZ2D = $10;
   }
   HEAP32[$13>>2] = $12;
   __ZN4core3ptr13drop_in_place17h0225c0bf549aeaafE($local_len$i$i$i$i$i$i);
   $personalityslot$sroa$0$1$i$i$i$i$i$i = $eh$lpad$body14$i$i$i$i$i$indexZ2D;$personalityslot$sroa$8$1$i$i$i$i$i$i = $eh$lpad$body14$i$i$i$i$i$index2Z2D;
   __ZN4core3ptr13drop_in_place17h7939b4d3aee5839aE($vector$i$i$i$i$i);
   ___resumeException($personalityslot$sroa$0$1$i$i$i$i$i$i|0);
   // unreachable;
  } else {
   $$lcssa$i$i$i$i$i = $14;
  }
 } while(0);
 HEAP32[$6>>2] = $$lcssa$i$i$i$i$i;
 ;HEAP32[$args$i$i>>2]=HEAP32[$vector$i$i$i$i$i>>2]|0;HEAP32[$args$i$i+4>>2]=HEAP32[$vector$i$i$i$i$i+4>>2]|0;HEAP32[$args$i$i+8>>2]=HEAP32[$vector$i$i$i$i$i+8>>2]|0;
 (_pthread_mutex_lock(((13496)|0))|0);
 $51 = HEAP32[3381]|0;
 $52 = ($51|0)==(0|0);
 if (!($52)) {
  __THREW__ = 0;
  invoke_viii(95,(7943|0),34,(3280|0));
  $53 = __THREW__; __THREW__ = 0;
  $54 = ___cxa_find_matching_catch_2()|0;
  $55 = tempRet0;
  __ZN4core3ptr13drop_in_place17h7939b4d3aee5839aE($args$i$i);
  ___resumeException($54|0);
  // unreachable;
 }
 $56 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
 $57 = ($56|0)==(0|0);
 if ($57) {
  ___rust_oom($_5$i$i$i$i$i);
  // unreachable;
 }
 ;HEAP32[$56>>2]=HEAP32[$args$i$i>>2]|0;HEAP32[$56+4>>2]=HEAP32[$args$i$i+4>>2]|0;HEAP32[$56+8>>2]=HEAP32[$args$i$i+8>>2]|0;
 HEAP32[3381] = $56;
 (_pthread_mutex_unlock(((13496)|0))|0);
 HEAP32[$any_data$i$i>>2] = 0;
 HEAP32[$any_vtable$i$i>>2] = 0;
 HEAP32[$data$i$i>>2] = $main;
 $58 = (___rust_maybe_catch_panic(148,$data$i$i,$any_data$i$i,$any_vtable$i$i)|0);
 $59 = ($58|0)==(0);
 if ($59) {
  HEAP32[$res>>2] = 0;
 } else {
  $60 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E()|0);
  $switch$i2$i$i$i$i = ($60|0)==(0|0);
  if ($switch$i2$i$i$i$i) {
   __ZN4core6result13unwrap_failed17h6e9520dde6482bf3E();
   // unreachable;
  }
  $61 = HEAP32[$60>>2]|0;
  $switch2$i$i$i$i$i = ($61|0)==(1);
  if ($switch2$i$i$i$i$i) {
   $$sink$in$phi$trans$insert$i$i$i = ((($60)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i>>2]|0;
   $phitmp$i$i = (($$pre$i$i$i) + -1)|0;
   $$pre$phi$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i;$66 = $phitmp$i$i;
  } else {
   $62 = $60;
   $63 = $62;
   HEAP8[$63>>0]=1&255;HEAP8[$63+1>>0]=(1>>8)&255;HEAP8[$63+2>>0]=(1>>16)&255;HEAP8[$63+3>>0]=1>>24;
   $64 = (($62) + 4)|0;
   $65 = $64;
   HEAP8[$65>>0]=0&255;HEAP8[$65+1>>0]=(0>>8)&255;HEAP8[$65+2>>0]=(0>>16)&255;HEAP8[$65+3>>0]=0>>24;
   $$pre5$i$i$i = ((($60)) + 4|0);
   $$pre$phi$i$i$iZ2D = $$pre5$i$i$i;$66 = -1;
  }
  HEAP8[$$pre$phi$i$i$iZ2D>>0]=$66&255;HEAP8[$$pre$phi$i$i$iZ2D+1>>0]=($66>>8)&255;HEAP8[$$pre$phi$i$i$iZ2D+2>>0]=($66>>16)&255;HEAP8[$$pre$phi$i$i$iZ2D+3>>0]=$66>>24;
  $67 = HEAP32[$any_data$i$i>>2]|0;
  $68 = HEAP32[$any_vtable$i$i>>2]|0;
  HEAP32[$res>>2] = $67;
  $69 = ((($res)) + 4|0);
  HEAP32[$69>>2] = $68;
 }
 $70 = HEAP32[3390]|0;
 $71 = ($70|0)==(3);
 do {
  if (!($71)) {
   HEAP8[$f$i$i>>0] = 1;
   HEAP32[$_15$i$i>>2] = $f$i$i;
   __THREW__ = 0;
   invoke_viiii(149,(13560|0),0,($_15$i$i|0),(352|0));
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $89 = ___cxa_find_matching_catch_2()|0;
    $90 = tempRet0;
    __ZN4core3ptr13drop_in_place17hde69bb608a68673eE($res);
    ___resumeException($89|0);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $74 = HEAP32[$res>>2]|0;
 $75 = ($74|0)!=(0|0);
 $76 = ($74|0)==(0|0);
 if ($76) {
  $$ = $75 ? 101 : 0;
  STACKTOP = sp;return ($$|0);
 }
 $77 = ((($res)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$78>>2]|0;
 __THREW__ = 0;
 invoke_vi($79|0,($74|0));
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if ($81) {
  $87 = ___cxa_find_matching_catch_2()|0;
  $88 = tempRet0;
  __ZN5alloc4heap8box_free17h77e562e15155f989E($74,$78);
  ___resumeException($87|0);
  // unreachable;
 }
 $82 = ((($78)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0);
 if ($84) {
  $$ = $75 ? 101 : 0;
  STACKTOP = sp;return ($$|0);
 }
 $85 = ((($78)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 ___rust_dealloc($74,$83,$86);
 $$ = $75 ? 101 : 0;
 STACKTOP = sp;return ($$|0);
}
function __ZN3std9panicking3try7do_call17h1a82342fb969d953E($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $tmp$sroa$0$0$copyload17$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tmp$sroa$0$0$copyload17$i = HEAP32[$data>>2]|0;
 $0 = $tmp$sroa$0$0$copyload17$i;
 $1 = HEAP32[$0>>2]|0;
 __ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h5f1bb0109a49469dE($1);
 return;
}
function __ZN4core3ptr13drop_in_place17hde69bb608a68673eE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($arg0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$arg0>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  __ZN5alloc4heap8box_free17h77e562e15155f989E($16,$17);
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = HEAP32[$arg0>>2]|0;
 $12 = ((($7)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 ___rust_dealloc($11,$9,$13);
 return;
}
function __ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h5f1bb0109a49469dE($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[$f & 255]();
 return;
}
function _rust_eh_personality($version,$0,$1,$2,$exception_object,$context) {
 $version = $version|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $exception_object = $exception_object|0;
 $context = $context|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___gxx_personality_v0(($version|0),($0|0),($1|0),($2|0),($exception_object|0),($context|0))|0);
 return ($3|0);
}
function ___rust_maybe_catch_panic($f,$data,$data_ptr,$vtable_ptr) {
 $f = $f|0;
 $data = $data|0;
 $data_ptr = $data_ptr|0;
 $vtable_ptr = $vtable_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0$0 = 0, $tmp$sroa$0$0$copyload$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i = 0, $tmp$sroa$5$0$copyload$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi($f|0,($data|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $_0$0 = 0;
  return ($_0$0|0);
 }
 $2 = ___cxa_find_matching_catch_3(0|0)|0;
 $3 = tempRet0;
 $4 = ($2|0)==(0|0);
 if ($4) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(3296);
  // unreachable;
 }
 $tmp$sroa$0$0$copyload$i$i = HEAP32[$2>>2]|0;
 $tmp$sroa$5$0$$sroa_idx2$i$i = ((($2)) + 4|0);
 $tmp$sroa$5$0$copyload$i$i2 = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i>>2]|0;
 ___cxa_free_exception(($2|0));
 $5 = $tmp$sroa$0$0$copyload$i$i;
 HEAP32[$data_ptr>>2] = $5;
 HEAP32[$vtable_ptr>>2] = $tmp$sroa$5$0$copyload$i$i2;
 $_0$0 = 1;
 return ($_0$0|0);
}
function ___rust_start_panic($data,$vtable) {
 $data = $data|0;
 $vtable = $vtable|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $data;
 $1 = $vtable;
 $2 = (___cxa_allocate_exception(8)|0);
 $3 = ($2|0)==(0|0);
 $4 = $data;
 $5 = $vtable;
 if (!($3)) {
  HEAP32[$2>>2] = $data;
  $17 = ((($2)) + 4|0);
  HEAP32[$17>>2] = $vtable;
  ___cxa_throw(($2|0),(0|0),(0|0));
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(3320);
  // unreachable;
 }
 $6 = $vtable;
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($4|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  __ZN5alloc4heap8box_free17h2b2f12e232ec0f5fE($0,$1);
  ___resumeException($15|0);
  // unreachable;
 }
 $10 = ((($5)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  return 3;
 }
 $13 = ((($5)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 ___rust_dealloc($4,$11,$14);
 return 3;
}
function __ZN5alloc4heap8box_free17h2b2f12e232ec0f5fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h4c459d07e068ff31E($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $builder = 0, $builder1 = 0, $builder2 = 0, $builder3 = 0, $builder4 = 0, $builder5 = 0, $builder6 = 0, $builder7 = 0;
 var $builder8 = 0, $builder9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $builder9 = sp + 144|0;
 $builder8 = sp + 128|0;
 $builder7 = sp + 112|0;
 $builder6 = sp + 96|0;
 $builder5 = sp + 80|0;
 $builder4 = sp + 64|0;
 $builder3 = sp + 48|0;
 $builder2 = sp + 32|0;
 $builder1 = sp + 16|0;
 $builder = sp;
 $0 = HEAP32[$self>>2]|0;
 $trunc = $0&255;
 $trunc$clear = $trunc & 15;
 do {
  switch ($trunc$clear<<24>>24) {
  case 0:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder,$__arg_0,8123,14);
   $1 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder)|0);
   $_0$sroa$0$0 = $1;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 1:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder1,$__arg_0,8137,29);
   $2 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder1)|0);
   $_0$sroa$0$0 = $2;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 2:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder2,$__arg_0,8166,23);
   $3 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder2)|0);
   $_0$sroa$0$0 = $3;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 3:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder3,$__arg_0,8189,23);
   $4 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder3)|0);
   $_0$sroa$0$0 = $4;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 4:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder4,$__arg_0,8212,16);
   $5 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder4)|0);
   $_0$sroa$0$0 = $5;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 5:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder5,$__arg_0,8228,17);
   $6 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder5)|0);
   $_0$sroa$0$0 = $6;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 6:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder6,$__arg_0,8245,18);
   $7 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder6)|0);
   $_0$sroa$0$0 = $7;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 7:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder7,$__arg_0,8263,20);
   $8 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder7)|0);
   $_0$sroa$0$0 = $8;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 8:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder8,$__arg_0,8283,20);
   $9 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder8)|0);
   $_0$sroa$0$0 = $9;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 9:  {
   __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder9,$__arg_0,8303,12);
   $10 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder9)|0);
   $_0$sroa$0$0 = $10;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  default: {
   // unreachable;
  }
  }
 } while(0);
 return (0)|0;
}
function __ZN64__LT_alloc_system__System_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h81f8a12ec7d9e0edE($self,$err) {
 $self = $self|0;
 $err = $err|0;
 var $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 ;HEAP32[$_5>>2]=HEAP32[$err>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$err+8>>2]|0;
 __ZN12alloc_system8platform89__LT_impl_u20_alloc__allocator__Alloc_u20_for_u20__RF__u27_a_u20_alloc_system__System_GT_3oom17heeba1b78f8a19567E(0,$_5);
 // unreachable;
}
function __ZN12alloc_system8platform89__LT_impl_u20_alloc__allocator__Alloc_u20_for_u20__RF__u27_a_u20_alloc_system__System_GT_3oom17heeba1b78f8a19567E($self,$err) {
 $self = $self|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $_14 = 0, $_6 = 0, $_6$i = 0, $_7$sroa$4$0$$sroa_idx4 = 0, $_7$sroa$5$0$$sroa_idx6 = 0, $_7$sroa$6$0$$sroa_idx8 = 0, $_7$sroa$7$0$$sroa_idx10 = 0, $_7$sroa$8$0$$sroa_idx12 = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_6 = sp + 40|0;
 $_8$i = sp + 16|0;
 $_6$i = sp + 8|0;
 $_14 = sp;
 $0 = $err;
 HEAP32[$_14>>2] = $0;
 $1 = ((($_14)) + 4|0);
 HEAP32[$1>>2] = (150);
 HEAP32[$_6$i>>2] = $_6;
 HEAP32[$_8$i>>2] = 3344;
 $_7$sroa$4$0$$sroa_idx4 = ((($_8$i)) + 4|0);
 HEAP32[$_7$sroa$4$0$$sroa_idx4>>2] = 2;
 $_7$sroa$5$0$$sroa_idx6 = ((($_8$i)) + 8|0);
 HEAP32[$_7$sroa$5$0$$sroa_idx6>>2] = 4460;
 $_7$sroa$6$0$$sroa_idx8 = ((($_8$i)) + 12|0);
 HEAP32[$_7$sroa$6$0$$sroa_idx8>>2] = 1;
 $_7$sroa$7$0$$sroa_idx10 = ((($_8$i)) + 16|0);
 HEAP32[$_7$sroa$7$0$$sroa_idx10>>2] = $_14;
 $_7$sroa$8$0$$sroa_idx12 = ((($_8$i)) + 20|0);
 HEAP32[$_7$sroa$8$0$$sroa_idx12>>2] = 1;
 (__ZN4core3fmt5write17h450a6417baf49a9bE($_6$i,376,$_8$i)|0);
 _llvm_trap();
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h15d86509b45406f0E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h6124e026c94c6447E($self,$s$ptr,$s$meta) {
 $self = $self|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_write(2,$s$ptr,$s$meta)|0);
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hc236f72f0c352aa7E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $len$1$i$i = 0;
 var $len$2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_10$i = sp;
 HEAP32[$_10$i>>2] = 0;
 $0 = ($c>>>0)<(128);
 if ($0) {
  $1 = $c&255;
  HEAP8[$_10$i>>0] = $1;
  $len$2$i$i = 1;
  (_write(2,$_10$i,$len$2$i$i)|0);
  STACKTOP = sp;return 0;
 }
 $2 = ($c>>>0)<(2048);
 do {
  if ($2) {
   $3 = $c >>> 6;
   $4 = $3 & 31;
   $5 = $4&255;
   $6 = $5 | -64;
   $$sink$i$i = $6;$$sink$sink$i$i = 1;$$sink15$i$i = $_10$i;$len$1$i$i = 2;
  } else {
   $7 = ($c>>>0)<(65536);
   if ($7) {
    $8 = $c >>> 12;
    $9 = $8 & 15;
    $10 = $9&255;
    $11 = $10 | -32;
    HEAP8[$_10$i>>0] = $11;
    $12 = $c >>> 6;
    $13 = $12 & 63;
    $14 = $13&255;
    $15 = ((($_10$i)) + 1|0);
    $16 = $14 | -128;
    $$sink$i$i = $16;$$sink$sink$i$i = 2;$$sink15$i$i = $15;$len$1$i$i = 3;
    break;
   } else {
    $17 = $c >>> 18;
    $18 = $17 & 7;
    $19 = $18&255;
    $20 = $19 | -16;
    HEAP8[$_10$i>>0] = $20;
    $21 = $c >>> 12;
    $22 = $21 & 63;
    $23 = $22&255;
    $24 = ((($_10$i)) + 1|0);
    $25 = $23 | -128;
    HEAP8[$24>>0] = $25;
    $26 = $c >>> 6;
    $27 = $26 & 63;
    $28 = $27&255;
    $29 = ((($_10$i)) + 2|0);
    $30 = $28 | -128;
    $$sink$i$i = $30;$$sink$sink$i$i = 3;$$sink15$i$i = $29;$len$1$i$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
 $31 = $c & 63;
 $32 = $31&255;
 $33 = (($_10$i) + ($$sink$sink$i$i)|0);
 $34 = $32 | -128;
 HEAP8[$33>>0] = $34;
 $len$2$i$i = $len$1$i$i;
 (_write(2,$_10$i,$len$2$i$i)|0);
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h9bab9c7e8a28efebE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0;
 HEAP32[$_6$i>>2] = $0;
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0;
 $1 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6$i,376,$_8$i)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN65__LT_alloc__allocator__AllocErr_u20_as_u20_core__fmt__Display_GT_3fmt17h4680e65ca869147aE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$fca$1$gep = 0, $$sink$i = 0, $$sink2$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_11 = 0, $_14 = 0, $_4 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_14 = sp + 32|0;
 $_11 = sp + 24|0;
 $_4 = sp;
 $0 = HEAP32[$self>>2]|0;
 $switch$i = ($0|0)!=(1);
 $$sink2$i = $switch$i ? 8337 : 8363;
 $$sink$i = $switch$i ? 26 : 29;
 HEAP32[$_14>>2] = $$sink2$i;
 $$fca$1$gep = ((($_14)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$sink$i;
 $1 = $_14;
 HEAP32[$_11>>2] = $1;
 $2 = ((($_11)) + 4|0);
 HEAP32[$2>>2] = (151);
 HEAP32[$_4>>2] = 3360;
 $3 = ((($_4)) + 4|0);
 HEAP32[$3>>2] = 1;
 $_5$sroa$0$0$$sroa_idx$i = ((($_4)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 4460;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_4)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1;
 $4 = ((($_4)) + 16|0);
 HEAP32[$4>>2] = $_11;
 $5 = ((($_4)) + 20|0);
 HEAP32[$5>>2] = 1;
 $6 = (__ZN4core3fmt9Formatter9write_fmt17h2f9d3d275a85e25eE($f,$_4)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h41f84f8c56e98577E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = ((($self)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h3950e9a41b16bb75E($0,$2,$f)|0);
 return ($3|0);
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h7a996d021357c41cE($self,$additional) {
 $self = $self|0;
 $additional = $additional|0;
 var $$$i = 0, $$arith = 0, $$overflow = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_33$sroa$0$0$copyload44$i = 0, $_47$i = 0, $e$sroa$4$0$$sroa_idx$i = 0, $err$i$i = 0, $err$i11$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0, $res$sroa$5$2$i = 0;
 var $res$sroa$5$4$copyload24$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i11$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_47$i = sp;
 $0 = ((($self)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($self)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - ($1))|0;
 $5 = ($4>>>0)<($additional>>>0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $$arith = (($1) + ($additional))|0;
 $$overflow = ($$arith>>>0)<($1>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h6800fb08054f8544E(8392,17);
  // unreachable;
 }
 $6 = $3 << 1;
 $7 = ($$arith>>>0)>=($6>>>0);
 $_0$0$sroa$speculated$i$i$i$i = $7 ? $$arith : $6;
 $8 = ($_0$0$sroa$speculated$i$i$i$i|0)<(0);
 if ($8) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(3368);
  // unreachable;
 }
 $9 = ($3|0)==(0);
 if ($9) {
  $10 = (___rust_alloc($_0$0$sroa$speculated$i$i$i$i,1,$err$i11$i)|0);
  $11 = ($10|0)==(0|0);
  $$$i = $11&1;
  $22 = 0;$25 = 0;$res$sroa$0$0$i = $$$i;$res$sroa$5$2$i = $10;
 } else {
  $_33$sroa$0$0$copyload44$i = HEAP32[$self>>2]|0;
  $12 = (___rust_realloc($_33$sroa$0$0$copyload44$i,$3,1,$_0$0$sroa$speculated$i$i$i$i,1,$err$i$i)|0);
  $13 = ($12|0)==(0|0);
  $res$sroa$5$4$copyload24$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $14 = $res$sroa$11$4$$sroa_idx$i;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $res$sroa$5$1$i = $13 ? $res$sroa$5$4$copyload24$i : $12;
  $$sink$i$i = $13&1;
  $22 = $16;$25 = $19;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $switch$i = ($res$sroa$0$0$i|0)==(1);
 if ($switch$i) {
  HEAP32[$_47$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_47$i)) + 4|0);
  $20 = $e$sroa$4$0$$sroa_idx$i;
  $21 = $20;
  HEAP32[$21>>2] = $22;
  $23 = (($20) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $25;
  ___rust_oom($_47$i);
  // unreachable;
 }
 HEAP32[$self>>2] = $res$sroa$5$2$i;
 HEAP32[$2>>2] = $_0$0$sroa$speculated$i$i$i$i;
 STACKTOP = sp;return;
}
function __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17ha26fb5dd5ea39aabE($0,$self$ptr,$self$meta) {
 $0 = $0|0;
 $self$ptr = $self$ptr|0;
 $self$meta = $self$meta|0;
 var $$sroa_idx$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2 = 0, $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, $_35$i$i$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i$i = 0, $vector$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i$i$i$i$i$i$i = sp + 48|0;
 $_35$i$i$i$i$i$i = sp + 32|0;
 $vector$i$i$i = sp + 16|0;
 $_2 = sp;
 $1 = ($self$meta|0)<(0);
 if ($1) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(3368);
  // unreachable;
 }
 $2 = ($self$meta|0)==(0);
 if ($2) {
  $ptr$0$i$i$i$i$i$i = (1);
 } else {
  $3 = (___rust_alloc($self$meta,1,$err$i$i$i$i$i$i$i)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   ___rust_oom($_35$i$i$i$i$i$i);
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i$i = $3;
  }
 }
 $5 = $ptr$0$i$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $5;
 $$sroa_idx$i$i$i$i = ((($vector$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i>>2] = $self$meta;
 $6 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$6>>2] = 0;
 __THREW__ = 0;
 invoke_vii(152,($vector$i$i$i|0),($self$meta|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  __ZN4core3ptr13drop_in_place17h1402ca1206bf88b2E($vector$i$i$i);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $11 = HEAP32[$6>>2]|0;
  $12 = (($11) + ($self$meta))|0;
  HEAP32[$6>>2] = $12;
  $_2$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i>>2]|0;
  $13 = (($_2$sroa$0$0$copyload2$i$i$i$i$i$i$i) + ($11)|0);
  _memcpy(($13|0),($self$ptr|0),($self$meta|0))|0;
  ;HEAP32[$_2>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$_2+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$_2+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN4core3ptr13drop_in_place17h1402ca1206bf88b2E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $_2$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $_2$sroa$0$0$copyload2$i$i$i$i = HEAP32[$arg0>>2]|0;
 ___rust_dealloc($_2$sroa$0$0$copyload2$i$i$i$i,$1,1);
 return;
}
function __ZN87__LT_alloc__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hf06d463333ace052E($0,$s$ptr,$s$meta) {
 $0 = $0|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17ha26fb5dd5ea39aabE($0,$s$ptr,$s$meta);
 return;
}
function __ZN5alloc6string104__LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__vec__Vec_LT_u8_GT__GT_4from17h6ce0eff5d15b3488E($0,$string) {
 $0 = $0|0;
 $string = $string|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$string>>2]|0;HEAP32[$0+4>>2]=HEAP32[$string+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$string+8>>2]|0;
 return;
}
function __ZN11std_unicode6tables16general_category1N17h2b23837ef743c59bE($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11std_unicode6tables23trie_lookup_range_table17ha521052995434d8cE($c,400)|0);
 return ($0|0);
}
function __ZN11std_unicode6tables23trie_lookup_range_table17ha521052995434d8cE($c,$r) {
 $c = $c|0;
 $r = $r|0;
 var $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(2048);
 do {
  if ($0) {
   $1 = $c >>> 6;
   $2 = (($r) + ($1<<3)|0);
   $$sink2 = $2;
  } else {
   $3 = ($c>>>0)<(65536);
   if ($3) {
    $4 = $c >>> 6;
    $5 = (($4) + -32)|0;
    $6 = ($5>>>0)<(992);
    if (!($6)) {
     __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3392,$5,992);
     // unreachable;
    }
    $7 = (((($r)) + 280|0) + ($5)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = ((($r)) + 260|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9>>>0)<($11>>>0);
    if ($12) {
     $34 = ((($r)) + 256|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (($35) + ($9<<3)|0);
     $$sink2 = $36;
     break;
    } else {
     __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3408,$9,$11);
     // unreachable;
    }
   }
   $13 = $c >>> 12;
   $14 = (($13) + -16)|0;
   $15 = ($14>>>0)<(256);
   if (!($15)) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3392,$14,256);
    // unreachable;
   }
   $16 = (((($r)) + 1272|0) + ($14)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ((($r)) + 268|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $17&255;
   $21 = $20 << 6;
   $22 = $c >>> 6;
   $23 = $22 & 63;
   $24 = $21 | $23;
   $25 = ($24>>>0)<($19>>>0);
   if (!($25)) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3392,$24,$19);
    // unreachable;
   }
   $26 = ((($r)) + 264|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ((($r)) + 276|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30>>>0)<($32>>>0);
   if ($33) {
    $37 = ((($r)) + 272|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + ($30<<3)|0);
    $$sink2 = $39;
    break;
   } else {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3424,$30,$32);
    // unreachable;
   }
  }
 } while(0);
 $40 = $$sink2;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $c & 63;
 $47 = (_bitshift64Shl(1,0,($46|0))|0);
 $48 = tempRet0;
 $49 = $42 & $47;
 $50 = $45 & $48;
 $51 = ($49|0)!=(0);
 $52 = ($50|0)!=(0);
 $53 = $51 | $52;
 return ($53|0);
}
function __ZN11std_unicode5lossy9Utf8Lossy10from_bytes17hfa93b4c70c293121E($retVal,$bytes$ptr,$bytes$meta) {
 $retVal = $retVal|0;
 $bytes$ptr = $bytes$ptr|0;
 $bytes$meta = $bytes$meta|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = $bytes$ptr;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $bytes$meta;
 return;
}
function __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc94d11435d26e161E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$off = 0, $$off374 = 0, $$off376 = 0, $$sink = 0, $$sink251 = 0, $$sink252 = 0, $$sink253 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $_231$sroa$4$0$$sroa_idx201 = 0, $_231$sroa$5$0$$sroa_idx203 = 0, $_231$sroa$6$0$$sroa_idx205 = 0, $cond = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $i$0$be = 0, $i$0418 = 0, $newret249$sink = 0, $or$cond256 = 0, $or$cond257 = 0, $or$cond258 = 0, $or$cond259 = 0, $or$cond261 = 0, $or$cond262 = 0, $or$cond266 = 0, $or$cond267 = 0, $or$cond268 = 0, $or$cond269 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$0>>2] = 0;
  return;
 }
 $4 = HEAP32[$self>>2]|0;
 $i$0418 = 0;
 L5: while(1) {
  $5 = (($4) + ($i$0418)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($i$0418) + 1)|0;
  $8 = ($6<<24>>24)>(-1);
  L7: do {
   if ($8) {
    $i$0$be = $7;
   } else {
    $9 = $6&255;
    $10 = (9066 + ($9)|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 2:  {
     $12 = ($2>>>0)>($7>>>0);
     if (!($12)) {
      label = 18;
      break L5;
     }
     $13 = (($4) + ($7)|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14 & -64;
     $16 = ($15<<24>>24)==(-128);
     if (!($16)) {
      label = 18;
      break L5;
     }
     $38 = (($i$0418) + 2)|0;
     $i$0$be = $38;
     break L7;
     break;
    }
    case 3:  {
     $17 = ($2>>>0)>($7>>>0);
     if (!($17)) {
      label = 27;
      break L5;
     }
     $18 = (($4) + ($7)|0);
     $19 = HEAP8[$18>>0]|0;
     $cond22 = ($6<<24>>24)==(-32);
     $20 = ($19&255)<(192);
     $21 = $19 & -32;
     $22 = ($21<<24>>24)==(-96);
     $23 = $cond22 & $22;
     if (!($23)) {
      $$off376 = (($6) + 31)<<24>>24;
      $44 = ($$off376&255)<(12);
      $45 = ($19<<24>>24)<(0);
      $or$cond256 = $44 & $45;
      $or$cond257 = $20 & $or$cond256;
      if (!($or$cond257)) {
       $cond23 = ($6<<24>>24)==(-19);
       $or$cond258 = $cond23 & $45;
       $46 = ($19&255)<(160);
       $or$cond259 = $46 & $or$cond258;
       if (!($or$cond259)) {
        $47 = $6 & -2;
        $48 = ($47<<24>>24)==(-18);
        $or$cond261 = $48 & $45;
        $or$cond262 = $20 & $or$cond261;
        if (!($or$cond262)) {
         label = 27;
         break L5;
        }
       }
      }
     }
     $49 = (($i$0418) + 2)|0;
     $50 = ($2>>>0)>($49>>>0);
     if (!($50)) {
      label = 39;
      break L5;
     }
     $51 = (($4) + ($49)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52 & -64;
     $54 = ($53<<24>>24)==(-128);
     if (!($54)) {
      label = 39;
      break L5;
     }
     $60 = (($i$0418) + 3)|0;
     $i$0$be = $60;
     break L7;
     break;
    }
    case 4:  {
     $24 = ($2>>>0)>($7>>>0);
     if (!($24)) {
      label = 47;
      break L5;
     }
     $25 = (($4) + ($7)|0);
     $26 = HEAP8[$25>>0]|0;
     $cond = ($6<<24>>24)==(-16);
     $$off = (($26) + 112)<<24>>24;
     $27 = ($$off&255)<(48);
     $28 = $cond & $27;
     if (!($28)) {
      $66 = ($26&255)<(192);
      $$off374 = (($6) + 15)<<24>>24;
      $67 = ($$off374&255)<(3);
      $68 = ($26<<24>>24)<(0);
      $or$cond266 = $67 & $68;
      $or$cond267 = $66 & $or$cond266;
      if (!($or$cond267)) {
       $cond21 = ($6<<24>>24)==(-12);
       $or$cond268 = $cond21 & $68;
       $69 = ($26&255)<(144);
       $or$cond269 = $69 & $or$cond268;
       if (!($or$cond269)) {
        label = 47;
        break L5;
       }
      }
     }
     $70 = (($i$0418) + 2)|0;
     $71 = ($2>>>0)>($70>>>0);
     if (!($71)) {
      label = 58;
      break L5;
     }
     $72 = (($4) + ($70)|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = $73 & -64;
     $75 = ($74<<24>>24)==(-128);
     if (!($75)) {
      label = 58;
      break L5;
     }
     $81 = (($i$0418) + 3)|0;
     $82 = ($2>>>0)>($81>>>0);
     if (!($82)) {
      label = 67;
      break L5;
     }
     $83 = (($4) + ($81)|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 & -64;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      label = 67;
      break L5;
     }
     $92 = (($i$0418) + 4)|0;
     $i$0$be = $92;
     break L7;
     break;
    }
    default: {
     label = 13;
     break L5;
    }
    }
   }
  } while(0);
  $93 = ($i$0$be>>>0)<($2>>>0);
  if ($93) {
   $i$0418 = $i$0$be;
  } else {
   $$sink = 0;$$sink251 = 14140;$$sink252 = 0;$$sink253 = 14140;$newret249$sink = $2;
   break;
  }
 }
 do {
  if ((label|0) == 13) {
   $29 = ($i$0418>>>0)>($2>>>0);
   if ($29) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($i$0418,$2);
    // unreachable;
   }
   $30 = ($2>>>0)<($7>>>0);
   if ($30) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($7,$2);
    // unreachable;
   } else {
    $31 = (($4) + ($7)|0);
    $32 = (($2) - ($7))|0;
    $$sink = 1;$$sink251 = $5;$$sink252 = $32;$$sink253 = $31;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 18) {
   $33 = ($i$0418>>>0)>($2>>>0);
   if ($33) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($i$0418,$2);
    // unreachable;
   }
   $34 = ($i$0418|0)==(-1);
   if ($34) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE(-1,$7);
    // unreachable;
   }
   $35 = ($2>>>0)<($7>>>0);
   if ($35) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($7,$2);
    // unreachable;
   } else {
    $36 = (($4) + ($7)|0);
    $37 = (($2) - ($7))|0;
    $$sink = 1;$$sink251 = $5;$$sink252 = $37;$$sink253 = $36;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 27) {
   $39 = ($i$0418>>>0)>($2>>>0);
   if ($39) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($i$0418,$2);
    // unreachable;
   }
   $40 = ($i$0418|0)==(-1);
   if ($40) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE(-1,$7);
    // unreachable;
   }
   $41 = ($2>>>0)<($7>>>0);
   if ($41) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($7,$2);
    // unreachable;
   } else {
    $42 = (($4) + ($7)|0);
    $43 = (($2) - ($7))|0;
    $$sink = 1;$$sink251 = $5;$$sink252 = $43;$$sink253 = $42;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 39) {
   $55 = ($i$0418>>>0)>($2>>>0);
   if ($55) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($i$0418,$2);
    // unreachable;
   }
   $56 = ($i$0418>>>0)>(4294967293);
   if ($56) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($i$0418,$49);
    // unreachable;
   }
   $57 = ($2>>>0)<($49>>>0);
   if ($57) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($49,$2);
    // unreachable;
   } else {
    $58 = (($4) + ($49)|0);
    $59 = (($2) - ($49))|0;
    $$sink = 2;$$sink251 = $5;$$sink252 = $59;$$sink253 = $58;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 47) {
   $61 = ($i$0418>>>0)>($2>>>0);
   if ($61) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($i$0418,$2);
    // unreachable;
   }
   $62 = ($i$0418|0)==(-1);
   if ($62) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE(-1,$7);
    // unreachable;
   }
   $63 = ($2>>>0)<($7>>>0);
   if ($63) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($7,$2);
    // unreachable;
   } else {
    $64 = (($4) + ($7)|0);
    $65 = (($2) - ($7))|0;
    $$sink = 1;$$sink251 = $5;$$sink252 = $65;$$sink253 = $64;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 58) {
   $76 = ($i$0418>>>0)>($2>>>0);
   if ($76) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($i$0418,$2);
    // unreachable;
   }
   $77 = ($i$0418>>>0)>(4294967293);
   if ($77) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($i$0418,$70);
    // unreachable;
   }
   $78 = ($2>>>0)<($70>>>0);
   if ($78) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($70,$2);
    // unreachable;
   } else {
    $79 = (($4) + ($70)|0);
    $80 = (($2) - ($70))|0;
    $$sink = 2;$$sink251 = $5;$$sink252 = $80;$$sink253 = $79;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 67) {
   $87 = ($i$0418>>>0)>($2>>>0);
   if ($87) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($i$0418,$2);
    // unreachable;
   }
   $88 = ($i$0418>>>0)>(4294967292);
   if ($88) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($i$0418,$81);
    // unreachable;
   }
   $89 = ($2>>>0)<($81>>>0);
   if ($89) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($81,$2);
    // unreachable;
   } else {
    $90 = (($4) + ($81)|0);
    $91 = (($2) - ($81))|0;
    $$sink = 3;$$sink251 = $5;$$sink252 = $91;$$sink253 = $90;$newret249$sink = $i$0418;
    break;
   }
  }
 } while(0);
 HEAP32[$self>>2] = $$sink253;
 HEAP32[$1>>2] = $$sink252;
 HEAP32[$0>>2] = $4;
 $_231$sroa$4$0$$sroa_idx201 = ((($0)) + 4|0);
 HEAP32[$_231$sroa$4$0$$sroa_idx201>>2] = $newret249$sink;
 $_231$sroa$5$0$$sroa_idx203 = ((($0)) + 8|0);
 HEAP32[$_231$sroa$5$0$$sroa_idx203>>2] = $$sink251;
 $_231$sroa$6$0$$sroa_idx205 = ((($0)) + 12|0);
 HEAP32[$_231$sroa$6$0$$sroa_idx205>>2] = $$sink;
 return;
}
function __ZN66__LT_std_unicode__lossy__Utf8Lossy_u20_as_u20_core__fmt__Debug_GT_3fmt17hb00c655e62770324E($0,$self$meta,$f) {
 $0 = $0|0;
 $self$meta = $self$meta|0;
 $f = $f|0;
 var $$$$$i$i = 0, $$$$i$i = 0, $$$i$i = 0, $$cast$i = 0, $$cast$i218 = 0, $$pre$i$i$i = 0, $$pre$phi$i$ph$i$iZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i14$i$i$i = 0;
 var $_0$0$i20$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_0$sroa$0$0 = 0, $_10$i = 0, $_11$sroa$0$sroa$4$0$_11$sroa$0$0$$sroa_cast9$sroa_idx23$i$i = 0, $_11$sroa$0$sroa$5$0$_11$sroa$0$0$$sroa_cast9$sroa_idx$i$i = 0, $_134 = 0, $_141 = 0, $_18$i = 0, $_21 = 0, $_25$i = 0, $_4$i = 0, $_4$sroa$4$0$ph$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $_76 = 0, $b = 0, $esc = 0;
 var $from$0$lcssa252 = 0, $from$0$lcssa253 = 0, $from$0217 = 0, $from$1 = 0, $init_state$sroa$0$0$i$i = 0, $init_state$sroa$9$0$i$i = 0, $iter = 0, $iter1$sroa$0$0215 = 0, $iter1$sroa$6$0216 = 0, $iter1$sroa$6$1 = 0, $iter1$sroa$6$2 = 0, $iter1$sroa$6$3 = 0, $iter1$sroa$6$4 = 0, $iter2 = 0, $iter3$sroa$0$0$in = 0, $left_val$i = 0, $or$cond$i = 0, $or$cond$i$i$i$i = 0, $or$cond$i$i$i$i87 = 0, $or$cond$i3$i$i$i = 0;
 var $phitmp$i$i$i = 0, $phitmp26$i$i$i = 0, $phitmp27$i$i$i = 0, $right_val$i = 0, $switch = 0, $switch21 = 0, $switch22 = 0, $switch23 = 0, $switch24 = 0, $switch26 = 0, $upper$i = 0, $val$sroa$5$0$$sroa_idx58 = 0, $val$sroa$5$0$copyload = 0, $val$sroa$6$0$$sroa_idx61 = 0, $val$sroa$6$0$copyload = 0, $val$sroa$7$0$$sroa_idx64 = 0, $val$sroa$7$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $_25$i = sp + 152|0;
 $_18$i = sp + 128|0;
 $right_val$i = sp + 172|0;
 $left_val$i = sp + 168|0;
 $_10$i = sp + 120|0;
 $_4$i = sp + 104|0;
 $upper$i = sp + 96|0;
 $_141 = sp + 88|0;
 $_134 = sp + 64|0;
 $b = sp + 176|0;
 $_76 = sp + 56|0;
 $iter2 = sp + 40|0;
 $esc = sp + 24|0;
 $_21 = sp + 8|0;
 $iter = sp;
 $1 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he3ddf20e55de23f2E($f,34)|0);
 $switch = ($1<<24>>24)==(0);
 if (!($switch)) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $2 = $0;
 $3 = $iter;
 $4 = $3;
 HEAP32[$4>>2] = $2;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $self$meta;
 __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc94d11435d26e161E($_21,$iter);
 $7 = HEAP32[$_21>>2]|0;
 $8 = ($7|0)==(0|0);
 L4: do {
  if (!($8)) {
   $val$sroa$5$0$$sroa_idx58 = ((($_21)) + 4|0);
   $val$sroa$6$0$$sroa_idx61 = ((($_21)) + 8|0);
   $val$sroa$7$0$$sroa_idx64 = ((($_21)) + 12|0);
   $9 = $b;
   $10 = ((($_141)) + 4|0);
   $11 = ((($_134)) + 4|0);
   $_5$sroa$0$0$$sroa_idx$i = ((($_134)) + 8|0);
   $_5$sroa$4$0$$sroa_idx2$i = ((($_134)) + 12|0);
   $12 = ((($_134)) + 16|0);
   $13 = ((($_134)) + 20|0);
   $_11$sroa$0$sroa$4$0$_11$sroa$0$0$$sroa_cast9$sroa_idx23$i$i = ((($esc)) + 4|0);
   $_11$sroa$0$sroa$5$0$_11$sroa$0$0$$sroa_cast9$sroa_idx$i$i = ((($esc)) + 8|0);
   $14 = ((($_4$i)) + 4|0);
   $15 = ((($_10$i)) + 4|0);
   $16 = ((($_76)) + 4|0);
   $21 = $7;
   L6: while(1) {
    $val$sroa$5$0$copyload = HEAP32[$val$sroa$5$0$$sroa_idx58>>2]|0;
    $val$sroa$6$0$copyload = HEAP32[$val$sroa$6$0$$sroa_idx61>>2]|0;
    $val$sroa$7$0$copyload = HEAP32[$val$sroa$7$0$$sroa_idx64>>2]|0;
    $20 = (($21) + ($val$sroa$5$0$copyload)|0);
    $22 = ($val$sroa$5$0$copyload|0)==(0);
    if ($22) {
     $from$0$lcssa252 = 0;
     label = 21;
    } else {
     $23 = $21;
     $$cast$i218 = $21;$from$0217 = 0;$iter1$sroa$0$0215 = 0;$iter1$sroa$6$0216 = $23;
     while(1) {
      $28 = ((($$cast$i218)) + 1|0);
      $37 = $28;
      $25 = HEAP8[$$cast$i218>>0]|0;
      $38 = ($25<<24>>24)>(-1);
      if ($38) {
       $24 = $25&255;
       $_4$sroa$4$0$ph$i = $24;$iter1$sroa$6$4 = $37;
      } else {
       $26 = $25 & 31;
       $27 = $26&255;
       $29 = ($28|0)==($20|0);
       if ($29) {
        $39 = $20;$_0$0$i20$i$i$i = 0;$iter1$sroa$6$1 = $37;
       } else {
        $30 = ((($$cast$i218)) + 2|0);
        $31 = $30;
        $32 = HEAP8[$28>>0]|0;
        $phitmp$i$i$i = $32 & 63;
        $39 = $30;$_0$0$i20$i$i$i = $phitmp$i$i$i;$iter1$sroa$6$1 = $31;
       }
       $33 = $27 << 6;
       $34 = $_0$0$i20$i$i$i&255;
       $35 = $34 | $33;
       $36 = ($25&255)>(223);
       if ($36) {
        $40 = ($39|0)==($20|0);
        if ($40) {
         $50 = $20;$_0$0$i14$i$i$i = 0;$iter1$sroa$6$2 = $iter1$sroa$6$1;
        } else {
         $41 = ((($39)) + 1|0);
         $42 = $41;
         $43 = HEAP8[$39>>0]|0;
         $phitmp26$i$i$i = $43 & 63;
         $50 = $41;$_0$0$i14$i$i$i = $phitmp26$i$i$i;$iter1$sroa$6$2 = $42;
        }
        $44 = $34 << 6;
        $45 = $_0$0$i14$i$i$i&255;
        $46 = $45 | $44;
        $47 = $27 << 12;
        $48 = $46 | $47;
        $49 = ($25&255)>(239);
        if ($49) {
         $51 = ($50|0)==($20|0);
         if ($51) {
          $_0$0$i9$i$i$i = 0;$iter1$sroa$6$3 = $iter1$sroa$6$2;
         } else {
          $52 = ((($50)) + 1|0);
          $53 = $52;
          $54 = HEAP8[$50>>0]|0;
          $phitmp27$i$i$i = $54 & 63;
          $_0$0$i9$i$i$i = $phitmp27$i$i$i;$iter1$sroa$6$3 = $53;
         }
         $55 = $27 << 18;
         $56 = $55 & 1835008;
         $57 = $46 << 6;
         $58 = $_0$0$i9$i$i$i&255;
         $59 = $57 | $56;
         $60 = $59 | $58;
         $_4$sroa$4$0$ph$i = $60;$iter1$sroa$6$4 = $iter1$sroa$6$3;
        } else {
         $_4$sroa$4$0$ph$i = $48;$iter1$sroa$6$4 = $iter1$sroa$6$2;
        }
       } else {
        $_4$sroa$4$0$ph$i = $35;$iter1$sroa$6$4 = $iter1$sroa$6$1;
       }
      }
      $69 = (($iter1$sroa$0$0215) - ($iter1$sroa$6$0216))|0;
      $70 = (($69) + ($iter1$sroa$6$4))|0;
      switch ($_4$sroa$4$0$ph$i|0) {
      case 9:  {
       $78 = 0;$81 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 116;
       break;
      }
      case 13:  {
       $78 = 0;$81 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 114;
       break;
      }
      case 10:  {
       $78 = 0;$81 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 110;
       break;
      }
      case 34: case 39: case 92:  {
       $78 = 0;$81 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = $_4$sroa$4$0$ph$i;
       break;
      }
      default: {
       $75 = (__ZN4core12char_private12is_printable17hcab8f2c72eb8c5dfE($_4$sroa$4$0$ph$i)|0);
       if ($75) {
        $78 = 0;$81 = 0;$init_state$sroa$0$0$i$i = 1;$init_state$sroa$9$0$i$i = $_4$sroa$4$0$ph$i;
       } else {
        $71 = $_4$sroa$4$0$ph$i | 1;
        $72 = (Math_clz32(($71|0))|0);
        $73 = $72 >>> 2;
        $74 = $73 ^ 7;
        $78 = $74;$81 = 5;$init_state$sroa$0$0$i$i = 3;$init_state$sroa$9$0$i$i = $_4$sroa$4$0$ph$i;
       }
      }
      }
      HEAP32[$esc>>2] = $init_state$sroa$0$0$i$i;
      HEAP32[$_11$sroa$0$sroa$4$0$_11$sroa$0$0$$sroa_cast9$sroa_idx23$i$i>>2] = $init_state$sroa$9$0$i$i;
      $76 = $_11$sroa$0$sroa$5$0$_11$sroa$0$0$$sroa_cast9$sroa_idx$i$i;
      $77 = $76;
      HEAP32[$77>>2] = $78;
      $79 = (($76) + 4)|0;
      $80 = $79;
      HEAP32[$80>>2] = $81;
      __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hc14e294a78a2c8eaE($_4$i,$esc);
      $82 = HEAP32[$_4$i>>2]|0;
      $83 = $14;
      $84 = $83;
      $85 = HEAP32[$84>>2]|0;
      $86 = (($83) + 4)|0;
      $87 = $86;
      $88 = HEAP32[$87>>2]|0;
      $89 = $upper$i;
      $90 = $89;
      HEAP32[$90>>2] = $85;
      $91 = (($89) + 4)|0;
      $92 = $91;
      HEAP32[$92>>2] = $88;
      HEAP32[$_10$i>>2] = 1;
      HEAP32[$15>>2] = $82;
      HEAP32[$left_val$i>>2] = $upper$i;
      HEAP32[$right_val$i>>2] = $_10$i;
      $93 = ($85|0)==(1);
      $94 = ($88|0)==($82|0);
      $or$cond$i = $93 & $94;
      if (!($or$cond$i)) {
       label = 33;
       break L6;
      }
      $103 = ($82|0)==(1);
      if ($103) {
       $from$1 = $from$0217;
      } else {
       $104 = ($iter1$sroa$0$0215>>>0)<($from$0217>>>0);
       if ($104) {
        label = 42;
        break L6;
       }
       $111 = ($from$0217|0)==(0);
       $112 = ($val$sroa$5$0$copyload|0)==($from$0217|0);
       $or$cond$i3$i$i$i = $111 | $112;
       if (!($or$cond$i3$i$i$i)) {
        $113 = ($val$sroa$5$0$copyload>>>0)>($from$0217>>>0);
        if (!($113)) {
         label = 42;
         break L6;
        }
        $114 = (($21) + ($from$0217)|0);
        $115 = HEAP8[$114>>0]|0;
        $116 = ($115<<24>>24)>(-65);
        if (!($116)) {
         label = 42;
         break L6;
        }
       }
       $105 = ($iter1$sroa$0$0215|0)==(0);
       $106 = ($iter1$sroa$0$0215|0)==($val$sroa$5$0$copyload|0);
       $or$cond$i$i$i$i = $105 | $106;
       if (!($or$cond$i$i$i$i)) {
        $107 = ($iter1$sroa$0$0215>>>0)<($val$sroa$5$0$copyload>>>0);
        if (!($107)) {
         label = 42;
         break L6;
        }
        $108 = (($21) + ($iter1$sroa$0$0215)|0);
        $109 = HEAP8[$108>>0]|0;
        $110 = ($109<<24>>24)>(-65);
        if (!($110)) {
         label = 42;
         break L6;
        }
       }
       $117 = (($21) + ($from$0217)|0);
       $118 = (($iter1$sroa$0$0215) - ($from$0217))|0;
       $119 = (__ZN4core3fmt9Formatter9write_str17hee69431d143ad848E($f,$117,$118)|0);
       $switch22 = ($119<<24>>24)==(0);
       if (!($switch22)) {
        label = 45;
        break L6;
       }
       ;HEAP32[$iter2>>2]=HEAP32[$esc>>2]|0;HEAP32[$iter2+4>>2]=HEAP32[$esc+4>>2]|0;HEAP32[$iter2+8>>2]=HEAP32[$esc+8>>2]|0;HEAP32[$iter2+12>>2]=HEAP32[$esc+12>>2]|0;
       while(1) {
        __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h4dd91f6cd3836e26E($_76,$iter2);
        $120 = HEAP32[$_76>>2]|0;
        $switch23 = ($120|0)==(1);
        if (!($switch23)) {
         break;
        }
        $125 = HEAP32[$16>>2]|0;
        $126 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he3ddf20e55de23f2E($f,$125)|0);
        $switch24 = ($126<<24>>24)==(0);
        if (!($switch24)) {
         label = 50;
         break L6;
        }
       }
       $121 = ($_4$sroa$4$0$ph$i>>>0)<(128);
       $122 = ($_4$sroa$4$0$ph$i>>>0)<(2048);
       $123 = ($_4$sroa$4$0$ph$i>>>0)<(65536);
       $$$i$i = $123 ? 3 : 4;
       $$$$i$i = $122 ? 2 : $$$i$i;
       $$$$$i$i = $121 ? 1 : $$$$i$i;
       $124 = (($$$$$i$i) + ($iter1$sroa$0$0215))|0;
       $from$1 = $124;
      }
      $$cast$i = $iter1$sroa$6$4;
      $127 = ($$cast$i|0)==($20|0);
      if ($127) {
       break;
      } else {
       $$cast$i218 = $$cast$i;$from$0217 = $from$1;$iter1$sroa$0$0215 = $70;$iter1$sroa$6$0216 = $iter1$sroa$6$4;
      }
     }
     $61 = ($from$1|0)==(0);
     $62 = ($val$sroa$5$0$copyload|0)==($from$1|0);
     $or$cond$i$i$i$i87 = $61 | $62;
     if ($or$cond$i$i$i$i87) {
      $from$0$lcssa252 = $from$1;
      label = 21;
     } else {
      $63 = ($val$sroa$5$0$copyload>>>0)>($from$1>>>0);
      if (!($63)) {
       label = 24;
       break;
      }
      $64 = (($21) + ($from$1)|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = ($65<<24>>24)>(-65);
      if ($66) {
       $$pre$phi$i$ph$i$iZ2D = $64;$from$0$lcssa253 = $from$1;
      } else {
       label = 24;
       break;
      }
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $$pre$i$i$i = (($21) + ($from$0$lcssa252)|0);
     $$pre$phi$i$ph$i$iZ2D = $$pre$i$i$i;$from$0$lcssa253 = $from$0$lcssa252;
    }
    $67 = (($val$sroa$5$0$copyload) - ($from$0$lcssa253))|0;
    $68 = (__ZN4core3fmt9Formatter9write_str17hee69431d143ad848E($f,$$pre$phi$i$ph$i$iZ2D,$67)|0);
    $switch21 = ($68<<24>>24)==(0);
    if (!($switch21)) {
     break;
    }
    $128 = (($val$sroa$6$0$copyload) + ($val$sroa$7$0$copyload)|0);
    $iter3$sroa$0$0$in = $val$sroa$6$0$copyload;
    while(1) {
     $129 = ($iter3$sroa$0$0$in|0)==($128|0);
     if ($129) {
      break;
     }
     $130 = ((($iter3$sroa$0$0$in)) + 1|0);
     $131 = HEAP8[$iter3$sroa$0$0$in>>0]|0;
     HEAP8[$b>>0] = $131;
     HEAP32[$_141>>2] = $9;
     HEAP32[$10>>2] = (154);
     HEAP32[$_134>>2] = 3480;
     HEAP32[$11>>2] = 1;
     HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3488;
     HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1;
     HEAP32[$12>>2] = $_141;
     HEAP32[$13>>2] = 1;
     $132 = (__ZN4core3fmt9Formatter9write_fmt17h2f9d3d275a85e25eE($f,$_134)|0);
     $switch26 = ($132<<24>>24)==(0);
     if ($switch26) {
      $iter3$sroa$0$0$in = $130;
     } else {
      break L6;
     }
    }
    __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc94d11435d26e161E($_21,$iter);
    $17 = HEAP32[$_21>>2]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     break L4;
    } else {
     $21 = $17;
    }
   }
   if ((label|0) == 24) {
    __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($21,$val$sroa$5$0$copyload,$from$1,$val$sroa$5$0$copyload);
    // unreachable;
   }
   else if ((label|0) == 33) {
    $95 = $left_val$i;
    $96 = $right_val$i;
    HEAP32[$_25$i>>2] = $95;
    $97 = ((($_25$i)) + 4|0);
    HEAP32[$97>>2] = (153);
    $98 = ((($_25$i)) + 8|0);
    HEAP32[$98>>2] = $96;
    $99 = ((($_25$i)) + 12|0);
    HEAP32[$99>>2] = (153);
    HEAP32[$_18$i>>2] = 3440;
    $100 = ((($_18$i)) + 4|0);
    HEAP32[$100>>2] = 3;
    $_5$sroa$0$0$$sroa_idx$i$i = ((($_18$i)) + 8|0);
    HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 3556;
    $_5$sroa$4$0$$sroa_idx2$i$i = ((($_18$i)) + 12|0);
    HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2;
    $101 = ((($_18$i)) + 16|0);
    HEAP32[$101>>2] = $_25$i;
    $102 = ((($_18$i)) + 20|0);
    HEAP32[$102>>2] = 2;
    __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_18$i,3464);
    // unreachable;
   }
   else if ((label|0) == 42) {
    __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($21,$val$sroa$5$0$copyload,$from$0217,$iter1$sroa$0$0215);
    // unreachable;
   }
   else if ((label|0) == 50) {
    label = 45;
   }
   if ((label|0) == 45) {
   }
   $_0$sroa$0$0 = 1;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 } while(0);
 $19 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he3ddf20e55de23f2E($f,34)|0);
 $_0$sroa$0$0 = $19;
 STACKTOP = sp;return ($_0$sroa$0$0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h23d7287061c27b40E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0$sroa$0$0$i = 0, $_21$i = 0, $builder$i = 0, $builder1$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_21$i = sp + 28|0;
 $builder1$i = sp + 16|0;
 $builder$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $switch$i = ($1|0)==(1);
 if ($switch$i) {
  $3 = ((($0)) + 4|0);
  __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder1$i,$f,9062,4);
  HEAP32[$_21$i>>2] = $3;
  (__ZN4core3fmt8builders10DebugTuple5field17h80aed126205c0495E($builder1$i,$_21$i,2136)|0);
  $4 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder1$i)|0);
  $_0$sroa$0$0$i = $4;
  STACKTOP = sp;return ($_0$sroa$0$0$i|0);
 } else {
  __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($builder$i,$f,9058,4);
  $2 = (__ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($builder$i)|0);
  $_0$sroa$0$0$i = $2;
  STACKTOP = sp;return ($_0$sroa$0$0$i|0);
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17hef5fc046610fac57E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6dcfcac692001bd4E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17hfe0f7424930b02b7E($0,$f)|0);
 return ($1|0);
}
function __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 24|0;
 $_3 = sp;
 $len = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 $2 = $index;
 $3 = $len;
 HEAP32[$_10>>2] = $2;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (120);
 $5 = ((($_10)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_10)) + 12|0);
 HEAP32[$6>>2] = (120);
 HEAP32[$_3>>2] = 3628;
 $7 = ((($_3)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $8 = ((($_3)) + 16|0);
 HEAP32[$8>>2] = $_10;
 $9 = ((($_3)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_3,3644);
 // unreachable;
}
function __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E($file_line_col,$0,$1) {
 $file_line_col = $file_line_col|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_4 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_11 = sp + 24|0;
 $_4 = sp;
 $len = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 $2 = $len;
 $3 = $index;
 HEAP32[$_11>>2] = $2;
 $4 = ((($_11)) + 4|0);
 HEAP32[$4>>2] = (120);
 $5 = ((($_11)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_11)) + 12|0);
 HEAP32[$6>>2] = (120);
 HEAP32[$_4>>2] = 3540;
 $7 = ((($_4)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_4)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_4)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $8 = ((($_4)) + 16|0);
 HEAP32[$8>>2] = $_11;
 $9 = ((($_4)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_4,$file_line_col);
 // unreachable;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h5a7782e29a5631cdE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$old5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = ($0>>>0)>(9999);
 if ($1) {
  $curr$0 = 39;$n$1 = $0;
  while(1) {
   $2 = (($n$1>>>0) % 10000)&-1;
   $3 = (($n$1>>>0) / 10000)&-1;
   $4 = (($2>>>0) / 100)&-1;
   $5 = $4 << 1;
   $6 = (($2>>>0) % 100)&-1;
   $7 = $6 << 1;
   $8 = (($curr$0) + -4)|0;
   $9 = (9406 + ($5)|0);
   $10 = (($buf31) + ($8)|0);
   $11 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
   HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8;
   $12 = (9406 + ($7)|0);
   $13 = (($curr$0) + -2)|0;
   $14 = (($buf31) + ($13)|0);
   $15 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $8;$n$1 = $3;
   } else {
    $curr$1 = $8;$n$2 = $3;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $0;
 }
 $16 = ($n$2|0)>(99);
 if ($16) {
  $17 = (($n$2>>>0) % 100)&-1;
  $18 = $17 << 1;
  $19 = (($n$2>>>0) / 100)&-1;
  $20 = (($curr$1) + -2)|0;
  $21 = (9406 + ($18)|0);
  $22 = (($buf31) + ($20)|0);
  $23 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8);
  HEAP8[$22>>0]=$23&255;HEAP8[$22+1>>0]=$23>>8;
  $curr$2 = $20;$n1$0 = $19;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $24 = ($n1$0|0)<(10);
 if ($24) {
  $25 = (($curr$2) + -1)|0;
  $26 = $n1$0&255;
  $27 = (($buf31) + ($25)|0);
  $28 = (($26) + 48)<<24>>24;
  HEAP8[$27>>0] = $28;
  $curr$3 = $25;
  $34 = (($buf31) + ($curr$3)|0);
  $35 = (39 - ($curr$3))|0;
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,14140,0,$34,$35)|0);
  STACKTOP = sp;return ($36|0);
 } else {
  $29 = $n1$0 << 1;
  $30 = (($curr$2) + -2)|0;
  $31 = (9406 + ($29)|0);
  $32 = (($buf31) + ($30)|0);
  $33 = HEAPU8[$31>>0]|(HEAPU8[$31+1>>0]<<8);
  HEAP8[$32>>0]=$33&255;HEAP8[$32+1>>0]=$33>>8;
  $curr$3 = $30;
  $34 = (($buf31) + ($curr$3)|0);
  $35 = (39 - ($curr$3))|0;
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,14140,0,$34,$35)|0);
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($fmt,$file_line_col) {
 $fmt = $fmt|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_6 = 0, $_6$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_6$byval_copy = sp + 24|0;
 $_6 = sp;
 $0 = HEAP32[$file_line_col>>2]|0;
 $1 = ((($file_line_col)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($file_line_col)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($file_line_col)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$_6>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_6+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_6+20>>2]=HEAP32[$fmt+20>>2]|0;
 ;HEAP32[$_6$byval_copy>>2]=HEAP32[$_6>>2]|0;HEAP32[$_6$byval_copy+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$_6$byval_copy+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$_6$byval_copy+12>>2]=HEAP32[$_6+12>>2]|0;HEAP32[$_6$byval_copy+16>>2]=HEAP32[$_6+16>>2]|0;HEAP32[$_6$byval_copy+20>>2]=HEAP32[$_6+20>>2]|0;
 _rust_begin_unwind($_6$byval_copy,$0,$2,$4,$6);
 // unreachable;
}
function __ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($self,$is_nonnegative,$0,$1,$2,$3) {
 $self = $self|0;
 $is_nonnegative = $is_nonnegative|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith10 = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow11 = 0, $$overflow3 = 0, $$overflow7 = 0, $$sink = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$i$i53 = 0, $$sink$i43 = 0, $$sink$sink$i$i = 0, $$sink$sink$i$i54 = 0, $$sink15$i$i = 0, $$sink15$i$i52 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_0$sroa$0$1 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $align$0$off0$i40 = 0, $align$0$off0$i40$clear = 0, $cond$i = 0, $cond$i38 = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$019$i = 0, $extract$t$i = 0, $extract$t$i39 = 0, $fill$i = 0, $fill$i37 = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$0$i60 = 0;
 var $iter1$sroa$0$0$i = 0, $iter1$sroa$0$0$i70 = 0, $len$1$i$i = 0, $len$1$i$i55 = 0, $len$2$i$i = 0, $len$2$i$i57 = 0, $padding$sink$i = 0, $padding$sink$i44 = 0, $prefix = 0, $prefixed = 0, $sign = 0, $switch = 0, $switch$i$i = 0, $switch13 = 0, $switch14 = 0, $switch14$i = 0, $switch14$i65 = 0, $switch15 = 0, $switch15$i = 0, $switch15$i64 = 0;
 var $switch17$i = 0, $switch17$i74 = 0, $width$0 = 0, $width$1 = 0, $write_prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $fill$i37 = sp + 32|0;
 $fill$i = sp + 28|0;
 $write_prefix = sp + 16|0;
 $prefixed = sp + 36|0;
 $sign = sp + 8|0;
 $prefix = sp;
 HEAP32[$prefix>>2] = $0;
 $4 = ((($prefix)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$sign>>2] = 0;
 $5 = HEAP32[$self>>2]|0;
 if ($is_nonnegative) {
  $6 = $5 & 1;
  $7 = ($6|0)==(0);
  if ($7) {
   $width$0 = $3;
  } else {
   $$sink = 43;
   label = 3;
  }
 } else {
  $$sink = 45;
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$sign>>2] = 1;
  $8 = ((($sign)) + 4|0);
  HEAP32[$8>>2] = $$sink;
  $9 = (($3) + 1)|0;
  $width$0 = $9;
 }
 HEAP8[$prefixed>>0] = 0;
 $10 = $5 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $width$1 = $width$0;
 } else {
  HEAP8[$prefixed>>0] = 1;
  $12 = (($0) + ($1)|0);
  $13 = ($1|0)==(0);
  if ($13) {
   $cont_bytes$0$lcssa$i = 0;
  } else {
   $15 = $0;$cont_bytes$019$i = 0;
   while(1) {
    $14 = ((($15)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 & -64;
    $18 = ($17<<24>>24)==(-128);
    $19 = $18&1;
    $20 = (($19) + ($cont_bytes$019$i))|0;
    $21 = ($14|0)==($12|0);
    if ($21) {
     $cont_bytes$0$lcssa$i = $20;
     break;
    } else {
     $15 = $14;$cont_bytes$019$i = $20;
    }
   }
  }
  $22 = (($width$0) + ($1))|0;
  $23 = (($22) - ($cont_bytes$0$lcssa$i))|0;
  $width$1 = $23;
 }
 HEAP32[$write_prefix>>2] = $sign;
 $24 = ((($write_prefix)) + 4|0);
 HEAP32[$24>>2] = $prefixed;
 $25 = ((($write_prefix)) + 8|0);
 HEAP32[$25>>2] = $prefix;
 $26 = ((($self)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $switch = ($27|0)==(1);
 do {
  if ($switch) {
   $97 = ((($self)) + 12|0);
   $36 = HEAP32[$97>>2]|0;
   $98 = ($36>>>0)>($width$1>>>0);
   if (!($98)) {
    $29 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h076285230892e717E($write_prefix,$self)|0);
    $switch14 = ($29<<24>>24)==(0);
    if (!($switch14)) {
     label = 42;
     break;
    }
    $106 = ((($self)) + 24|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ((($self)) + 28|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ((($109)) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (FUNCTION_TABLE_iiii[$111 & 255]($107,$2,$3)|0);
    $_0$sroa$0$0 = $112;
    label = 39;
    break;
   }
   $33 = $5 & 8;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = (($36) - ($width$1))|0;
    $37 = ((($self)) + 48|0);
    $extract$t$i39 = HEAP8[$37>>0]|0;
    $cond$i38 = ($extract$t$i39<<24>>24)==(3);
    $align$0$off0$i40 = $cond$i38 ? 1 : $extract$t$i39;
    $align$0$off0$i40$clear = $align$0$off0$i40 & 3;
    switch ($align$0$off0$i40$clear<<24>>24) {
    case 0:  {
     $$sink$i43 = 0;$padding$sink$i44 = $35;
     break;
    }
    case 3: case 1:  {
     $$sink$i43 = $35;$padding$sink$i44 = 0;
     break;
    }
    case 2:  {
     $76 = $35 >>> 1;
     $77 = (($35) + 1)|0;
     $78 = $77 >>> 1;
     $$sink$i43 = $76;$padding$sink$i44 = $78;
     break;
    }
    default: {
     // unreachable;
    }
    }
    HEAP32[$fill$i37>>2] = 0;
    $38 = ((($self)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39>>>0)<(128);
    if ($40) {
     $41 = $39&255;
     HEAP8[$fill$i37>>0] = $41;
     $len$2$i$i57 = 1;
    } else {
     $42 = ($39>>>0)<(2048);
     do {
      if ($42) {
       $43 = $39 >>> 6;
       $44 = $43 & 31;
       $45 = $44&255;
       $46 = $45 | -64;
       $$sink$i$i53 = $46;$$sink$sink$i$i54 = 1;$$sink15$i$i52 = $fill$i37;$len$1$i$i55 = 2;
      } else {
       $47 = ($39>>>0)<(65536);
       if ($47) {
        $48 = $39 >>> 12;
        $49 = $48 & 15;
        $50 = $49&255;
        $51 = $50 | -32;
        HEAP8[$fill$i37>>0] = $51;
        $52 = $39 >>> 6;
        $53 = $52 & 63;
        $54 = $53&255;
        $55 = ((($fill$i37)) + 1|0);
        $56 = $54 | -128;
        $$sink$i$i53 = $56;$$sink$sink$i$i54 = 2;$$sink15$i$i52 = $55;$len$1$i$i55 = 3;
        break;
       } else {
        $57 = $39 >>> 18;
        $58 = $57&255;
        $59 = $58 | -16;
        HEAP8[$fill$i37>>0] = $59;
        $60 = $39 >>> 12;
        $61 = $60 & 63;
        $62 = $61&255;
        $63 = ((($fill$i37)) + 1|0);
        $64 = $62 | -128;
        HEAP8[$63>>0] = $64;
        $65 = $39 >>> 6;
        $66 = $65 & 63;
        $67 = $66&255;
        $68 = ((($fill$i37)) + 2|0);
        $69 = $67 | -128;
        $$sink$i$i53 = $69;$$sink$sink$i$i54 = 3;$$sink15$i$i52 = $68;$len$1$i$i55 = 4;
        break;
       }
      }
     } while(0);
     HEAP8[$$sink15$i$i52>>0] = $$sink$i$i53;
     $70 = $39 & 63;
     $71 = $70&255;
     $72 = (($fill$i37) + ($$sink$sink$i$i54)|0);
     $73 = $71 | -128;
     HEAP8[$72>>0] = $73;
     $len$2$i$i57 = $len$1$i$i55;
    }
    $74 = ((($self)) + 24|0);
    $75 = ((($self)) + 28|0);
    $iter$sroa$0$0$i60 = 0;
    while(1) {
     $79 = ($iter$sroa$0$0$i60>>>0)<($$sink$i43>>>0);
     if (!($79)) {
      break;
     }
     $$arith10 = (($iter$sroa$0$0$i60) + 1)|0;
     $$overflow11 = ($iter$sroa$0$0$i60>>>0)>(4294967294);
     if ($$overflow11) {
      break;
     }
     $86 = HEAP32[$74>>2]|0;
     $87 = HEAP32[$75>>2]|0;
     $88 = ((($87)) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (FUNCTION_TABLE_iiii[$89 & 255]($86,$fill$i37,$len$2$i$i57)|0);
     $switch14$i65 = ($90<<24>>24)==(0);
     if ($switch14$i65) {
      $iter$sroa$0$0$i60 = $$arith10;
     } else {
      label = 31;
      break;
     }
    }
    if ((label|0) == 31) {
     $_0$sroa$0$0 = 1;
     label = 39;
     break;
    }
    $80 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h076285230892e717E($write_prefix,$self)|0);
    $switch$i$i = ($80<<24>>24)==(0);
    if ($switch$i$i) {
     $81 = HEAP32[$74>>2]|0;
     $82 = HEAP32[$75>>2]|0;
     $83 = ((($82)) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iiii[$84 & 255]($81,$2,$3)|0);
     $switch15$i64 = ($85<<24>>24)==(0);
     if ($switch15$i64) {
      $iter1$sroa$0$0$i70 = 0;
      while(1) {
       $91 = ($iter1$sroa$0$0$i70>>>0)<($padding$sink$i44>>>0);
       if (!($91)) {
        label = 35;
        break;
       }
       $$arith6 = (($iter1$sroa$0$0$i70) + 1)|0;
       $$overflow7 = ($iter1$sroa$0$0$i70>>>0)>(4294967294);
       if ($$overflow7) {
        label = 35;
        break;
       }
       $92 = HEAP32[$74>>2]|0;
       $93 = HEAP32[$75>>2]|0;
       $94 = ((($93)) + 12|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (FUNCTION_TABLE_iiii[$95 & 255]($92,$fill$i37,$len$2$i$i57)|0);
       $switch17$i74 = ($96<<24>>24)==(0);
       if ($switch17$i74) {
        $iter1$sroa$0$0$i70 = $$arith6;
       } else {
        label = 37;
        break;
       }
      }
      if ((label|0) == 35) {
       $_0$sroa$0$0 = 0;
       label = 39;
       break;
      }
      else if ((label|0) == 37) {
       $_0$sroa$0$0 = 1;
       label = 39;
       break;
      }
     }
    }
    $_0$sroa$0$0 = 1;
    label = 39;
    break;
   } else {
    $30 = ((($self)) + 4|0);
    HEAP32[$30>>2] = 48;
    $31 = ((($self)) + 48|0);
    HEAP8[$31>>0] = 1;
    $32 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h076285230892e717E($write_prefix,$self)|0);
    $switch15 = ($32<<24>>24)==(0);
    if (!($switch15)) {
     label = 42;
     break;
    }
    $113 = (($36) - ($width$1))|0;
    $extract$t$i = HEAP8[$31>>0]|0;
    $cond$i = ($extract$t$i<<24>>24)==(3);
    $align$0$off0$i = $cond$i ? 1 : $extract$t$i;
    $align$0$off0$i$clear = $align$0$off0$i & 3;
    switch ($align$0$off0$i$clear<<24>>24) {
    case 0:  {
     $$sink$i = 0;$padding$sink$i = $113;
     break;
    }
    case 3: case 1:  {
     $$sink$i = $113;$padding$sink$i = 0;
     break;
    }
    case 2:  {
     $151 = $113 >>> 1;
     $152 = (($113) + 1)|0;
     $153 = $152 >>> 1;
     $$sink$i = $151;$padding$sink$i = $153;
     break;
    }
    default: {
     // unreachable;
    }
    }
    HEAP32[$fill$i>>2] = 0;
    $114 = HEAP32[$30>>2]|0;
    $115 = ($114>>>0)<(128);
    if ($115) {
     $116 = $114&255;
     HEAP8[$fill$i>>0] = $116;
     $len$2$i$i = 1;
    } else {
     $117 = ($114>>>0)<(2048);
     do {
      if ($117) {
       $118 = $114 >>> 6;
       $119 = $118 & 31;
       $120 = $119&255;
       $121 = $120 | -64;
       $$sink$i$i = $121;$$sink$sink$i$i = 1;$$sink15$i$i = $fill$i;$len$1$i$i = 2;
      } else {
       $122 = ($114>>>0)<(65536);
       if ($122) {
        $123 = $114 >>> 12;
        $124 = $123 & 15;
        $125 = $124&255;
        $126 = $125 | -32;
        HEAP8[$fill$i>>0] = $126;
        $127 = $114 >>> 6;
        $128 = $127 & 63;
        $129 = $128&255;
        $130 = ((($fill$i)) + 1|0);
        $131 = $129 | -128;
        $$sink$i$i = $131;$$sink$sink$i$i = 2;$$sink15$i$i = $130;$len$1$i$i = 3;
        break;
       } else {
        $132 = $114 >>> 18;
        $133 = $132&255;
        $134 = $133 | -16;
        HEAP8[$fill$i>>0] = $134;
        $135 = $114 >>> 12;
        $136 = $135 & 63;
        $137 = $136&255;
        $138 = ((($fill$i)) + 1|0);
        $139 = $137 | -128;
        HEAP8[$138>>0] = $139;
        $140 = $114 >>> 6;
        $141 = $140 & 63;
        $142 = $141&255;
        $143 = ((($fill$i)) + 2|0);
        $144 = $142 | -128;
        $$sink$i$i = $144;$$sink$sink$i$i = 3;$$sink15$i$i = $143;$len$1$i$i = 4;
        break;
       }
      }
     } while(0);
     HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
     $145 = $114 & 63;
     $146 = $145&255;
     $147 = (($fill$i) + ($$sink$sink$i$i)|0);
     $148 = $146 | -128;
     HEAP8[$147>>0] = $148;
     $len$2$i$i = $len$1$i$i;
    }
    $149 = ((($self)) + 24|0);
    $150 = ((($self)) + 28|0);
    $iter$sroa$0$0$i = 0;
    while(1) {
     $154 = ($iter$sroa$0$0$i>>>0)<($$sink$i>>>0);
     if (!($154)) {
      break;
     }
     $$arith2 = (($iter$sroa$0$0$i) + 1)|0;
     $$overflow3 = ($iter$sroa$0$0$i>>>0)>(4294967294);
     if ($$overflow3) {
      break;
     }
     $160 = HEAP32[$149>>2]|0;
     $161 = HEAP32[$150>>2]|0;
     $162 = ((($161)) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (FUNCTION_TABLE_iiii[$163 & 255]($160,$fill$i,$len$2$i$i)|0);
     $switch14$i = ($164<<24>>24)==(0);
     if ($switch14$i) {
      $iter$sroa$0$0$i = $$arith2;
     } else {
      label = 61;
      break;
     }
    }
    if ((label|0) == 61) {
     $_0$sroa$0$0 = 1;
     label = 39;
     break;
    }
    $155 = HEAP32[$149>>2]|0;
    $156 = HEAP32[$150>>2]|0;
    $157 = ((($156)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = (FUNCTION_TABLE_iiii[$158 & 255]($155,$2,$3)|0);
    $switch15$i = ($159<<24>>24)==(0);
    if ($switch15$i) {
     $iter1$sroa$0$0$i = 0;
    } else {
     $_0$sroa$0$0 = 1;
     label = 39;
     break;
    }
    while(1) {
     $165 = ($iter1$sroa$0$0$i>>>0)<($padding$sink$i>>>0);
     if (!($165)) {
      label = 65;
      break;
     }
     $$arith = (($iter1$sroa$0$0$i) + 1)|0;
     $$overflow = ($iter1$sroa$0$0$i>>>0)>(4294967294);
     if ($$overflow) {
      label = 65;
      break;
     }
     $166 = HEAP32[$149>>2]|0;
     $167 = HEAP32[$150>>2]|0;
     $168 = ((($167)) + 12|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (FUNCTION_TABLE_iiii[$169 & 255]($166,$fill$i,$len$2$i$i)|0);
     $switch17$i = ($170<<24>>24)==(0);
     if ($switch17$i) {
      $iter1$sroa$0$0$i = $$arith;
     } else {
      label = 67;
      break;
     }
    }
    if ((label|0) == 65) {
     $_0$sroa$0$0 = 0;
     label = 39;
     break;
    }
    else if ((label|0) == 67) {
     $_0$sroa$0$0 = 1;
     label = 39;
     break;
    }
   }
  } else {
   $28 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h076285230892e717E($write_prefix,$self)|0);
   $switch13 = ($28<<24>>24)==(0);
   if ($switch13) {
    $99 = ((($self)) + 24|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ((($self)) + 28|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($102)) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (FUNCTION_TABLE_iiii[$104 & 255]($100,$2,$3)|0);
    $_0$sroa$0$0 = $105;
    label = 39;
   } else {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 39) {
  $_0$sroa$0$1 = $_0$sroa$0$0;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 else if ((label|0) == 42) {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 return (0)|0;
}
function __ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h076285230892e717E($arg0,$f) {
 $arg0 = $arg0|0;
 $f = $f|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_16 = 0, $cond = 0, $len$1$i = 0, $len$2$i = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_16 = sp;
 $0 = HEAP32[$arg0>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(1);
 if ($cond) {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($f)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($f)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$_16>>2] = 0;
  $8 = ($3>>>0)<(128);
  if ($8) {
   $9 = $3&255;
   HEAP8[$_16>>0] = $9;
   $len$2$i = 1;
  } else {
   $10 = ($3>>>0)<(2048);
   do {
    if ($10) {
     $11 = $3 >>> 6;
     $12 = $11 & 31;
     $13 = $12&255;
     $14 = $13 | -64;
     $$sink$i = $14;$$sink$sink$i = 1;$$sink15$i = $_16;$len$1$i = 2;
    } else {
     $15 = ($3>>>0)<(65536);
     if ($15) {
      $16 = $3 >>> 12;
      $17 = $16 & 15;
      $18 = $17&255;
      $19 = $18 | -32;
      HEAP8[$_16>>0] = $19;
      $20 = $3 >>> 6;
      $21 = $20 & 63;
      $22 = $21&255;
      $23 = ((($_16)) + 1|0);
      $24 = $22 | -128;
      $$sink$i = $24;$$sink$sink$i = 2;$$sink15$i = $23;$len$1$i = 3;
      break;
     } else {
      $25 = $3 >>> 18;
      $26 = $25&255;
      $27 = $26 | -16;
      HEAP8[$_16>>0] = $27;
      $28 = $3 >>> 12;
      $29 = $28 & 63;
      $30 = $29&255;
      $31 = ((($_16)) + 1|0);
      $32 = $30 | -128;
      HEAP8[$31>>0] = $32;
      $33 = $3 >>> 6;
      $34 = $33 & 63;
      $35 = $34&255;
      $36 = ((($_16)) + 2|0);
      $37 = $35 | -128;
      $$sink$i = $37;$$sink$sink$i = 3;$$sink15$i = $36;$len$1$i = 4;
      break;
     }
    }
   } while(0);
   HEAP8[$$sink15$i>>0] = $$sink$i;
   $38 = $3 & 63;
   $39 = $38&255;
   $40 = (($_16) + ($$sink$sink$i)|0);
   $41 = $39 | -128;
   HEAP8[$40>>0] = $41;
   $len$2$i = $len$1$i;
  }
  $42 = ((($7)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (FUNCTION_TABLE_iiii[$43 & 255]($5,$_16,$len$2$i)|0);
  $switch = ($44<<24>>24)==(0);
  if (!($switch)) {
   $_0$sroa$0$0 = 1;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 $45 = ((($arg0)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP8[$46>>0]|0;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $49 = ((($f)) + 24|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($f)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($arg0)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($54)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($52)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (FUNCTION_TABLE_iiii[$59 & 255]($50,$55,$57)|0);
 $_0$sroa$0$0 = $60;
 STACKTOP = sp;return ($_0$sroa$0$0|0);
}
function __ZN4core9panicking5panic17hdf4baf73e8b6719eE($expr_file_line_col) {
 $expr_file_line_col = $expr_file_line_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_17 = 0;
 var $_4$sroa$0$0$$sroa_idx$i = 0, $_6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_17 = sp + 32|0;
 $_10 = sp + 24|0;
 $_6 = sp;
 $0 = HEAP32[$expr_file_line_col>>2]|0;
 $1 = ((($expr_file_line_col)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($expr_file_line_col)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($expr_file_line_col)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($expr_file_line_col)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($expr_file_line_col)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$_10>>2] = $0;
 $11 = ((($_10)) + 4|0);
 HEAP32[$11>>2] = $2;
 HEAP32[$_6>>2] = $_10;
 $12 = ((($_6)) + 4|0);
 HEAP32[$12>>2] = 1;
 $_4$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0;
 $13 = ((($_6)) + 16|0);
 HEAP32[$13>>2] = 13564;
 $14 = ((($_6)) + 20|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$_17>>2] = $4;
 $15 = ((($_17)) + 4|0);
 HEAP32[$15>>2] = $6;
 $16 = ((($_17)) + 8|0);
 HEAP32[$16>>2] = $8;
 $17 = ((($_17)) + 12|0);
 HEAP32[$17>>2] = $10;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_6,$_17);
 // unreachable;
}
function __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $end = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 24|0;
 $_3 = sp;
 $end = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $0;
 HEAP32[$end>>2] = $1;
 $2 = $index;
 $3 = $end;
 HEAP32[$_10>>2] = $2;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (120);
 $5 = ((($_10)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_10)) + 12|0);
 HEAP32[$6>>2] = (120);
 HEAP32[$_3>>2] = 3660;
 $7 = ((($_3)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 3556;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $8 = ((($_3)) + 16|0);
 HEAP32[$8>>2] = $_10;
 $9 = ((($_3)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_3,3676);
 // unreachable;
}
function __ZN4core3fmt9Formatter3pad17h1fecb2876abbb102E($self,$0,$1) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith2 = 0, $$cast$i$i$i$i = 0, $$cast$i$i19$i$i = 0, $$overflow = 0, $$overflow3 = 0, $$phi$trans$insert = 0, $$pre = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink15$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $_0$sroa$0$0 = 0, $_16$sroa$0$0 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $cond = 0, $cond$i = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$0$lcssa$i29 = 0, $cont_bytes$019$i = 0, $cont_bytes$019$i30 = 0, $extract$t$i = 0, $fill$i = 0, $iter$sroa$0$0$i = 0, $iter1$sroa$0$0$i = 0, $len$1$i$i = 0, $len$2$i$i = 0, $n$018$i$i = 0, $or$cond = 0, $or$cond$i$i$i$i = 0, $padding$sink$i = 0;
 var $switch14$i = 0, $switch15$i = 0, $switch17$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fill$i = sp;
 $2 = ((($self)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 $$phi$trans$insert = ((($self)) + 16|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $cond = ($$pre|0)==(1);
 if ($4) {
  if ($cond) {
   label = 6;
  } else {
   $65 = $1;
  }
 } else {
  if ($cond) {
   label = 6;
  } else {
   $5 = ((($self)) + 24|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($self)) + 28|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_iiii[$10 & 255]($6,$0,$1)|0);
   $_0$sroa$0$0 = $11;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 if ((label|0) == 6) {
  $12 = ((($self)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($0) + ($1)|0);
  $15 = ($13|0)==(0);
  $16 = ($1|0)==(0);
  $or$cond = $15 | $16;
  L8: do {
   if ($or$cond) {
    $57 = 0;
   } else {
    $17 = $0;
    $$cast$i$i19$i$i = $0;$19 = $17;$_16$sroa$0$0 = 0;$n$018$i$i = $13;
    while(1) {
     $24 = ((($$cast$i$i19$i$i)) + 1|0);
     $31 = HEAP8[$$cast$i$i19$i$i>>0]|0;
     $33 = ($31<<24>>24)>(-1);
     $28 = $24;
     if ($33) {
      $21 = $28;
     } else {
      $25 = ($24|0)==($14|0);
      $26 = ((($$cast$i$i19$i$i)) + 2|0);
      $27 = $26;
      $29 = $25 ? $28 : $27;
      $30 = $25 ? $14 : $26;
      $32 = ($31&255)>(223);
      if ($32) {
       $34 = ($30|0)==($14|0);
       $35 = ((($30)) + 1|0);
       $36 = $35;
       $37 = $34 ? $29 : $36;
       $38 = $34 ? $14 : $35;
       $39 = ($31&255)>(239);
       if ($39) {
        $40 = ($38|0)==($14|0);
        $41 = ((($38)) + 1|0);
        $42 = $41;
        $43 = $40 ? $37 : $42;
        $21 = $43;
       } else {
        $21 = $37;
       }
      } else {
       $21 = $29;
      }
     }
     $44 = ($n$018$i$i|0)==(0);
     if ($44) {
      break;
     }
     $18 = (($_16$sroa$0$0) - ($19))|0;
     $20 = (($18) + ($21))|0;
     $22 = (($n$018$i$i) + -1)|0;
     $$cast$i$i$i$i = $21;
     $23 = ($$cast$i$i$i$i|0)==($14|0);
     if ($23) {
      $57 = $1;
      break L8;
     } else {
      $$cast$i$i19$i$i = $$cast$i$i$i$i;$19 = $21;$_16$sroa$0$0 = $20;$n$018$i$i = $22;
     }
    }
    $45 = ($_16$sroa$0$0|0)==(0);
    $46 = ($_16$sroa$0$0|0)==($1|0);
    $or$cond$i$i$i$i = $45 | $46;
    if ($or$cond$i$i$i$i) {
     $57 = $_16$sroa$0$0;
    } else {
     $47 = ($_16$sroa$0$0>>>0)<($1>>>0);
     if (!($47)) {
      __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($0,$1,0,$_16$sroa$0$0);
      // unreachable;
     }
     $48 = (($0) + ($_16$sroa$0$0)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)>(-65);
     if ($50) {
      $57 = $_16$sroa$0$0;
     } else {
      __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($0,$1,0,$_16$sroa$0$0);
      // unreachable;
     }
    }
   }
  } while(0);
  if ($4) {
   $65 = $57;
  } else {
   $51 = ((($self)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($self)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $58 = (FUNCTION_TABLE_iiii[$56 & 255]($52,$0,$57)|0);
   $_0$sroa$0$0 = $58;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 $138 = ((($self)) + 12|0);
 $78 = HEAP32[$138>>2]|0;
 $75 = (($0) + ($65)|0);
 $139 = ($65|0)==(0);
 if ($139) {
  $cont_bytes$0$lcssa$i = 0;
 } else {
  $141 = $0;$cont_bytes$019$i = 0;
  while(1) {
   $140 = ((($141)) + 1|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142 & -64;
   $144 = ($143<<24>>24)==(-128);
   $145 = $144&1;
   $146 = (($145) + ($cont_bytes$019$i))|0;
   $147 = ($140|0)==($75|0);
   if ($147) {
    $cont_bytes$0$lcssa$i = $146;
    break;
   } else {
    $141 = $140;$cont_bytes$019$i = $146;
   }
  }
 }
 $148 = (($65) - ($cont_bytes$0$lcssa$i))|0;
 $149 = ($148>>>0)<($78>>>0);
 if (!($149)) {
  $59 = ((($self)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($self)) + 28|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $66 = (FUNCTION_TABLE_iiii[$64 & 255]($60,$0,$65)|0);
  $_0$sroa$0$0 = $66;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 if ($139) {
  $cont_bytes$0$lcssa$i29 = 0;
 } else {
  $68 = $0;$cont_bytes$019$i30 = 0;
  while(1) {
   $67 = ((($68)) + 1|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69 & -64;
   $71 = ($70<<24>>24)==(-128);
   $72 = $71&1;
   $73 = (($72) + ($cont_bytes$019$i30))|0;
   $74 = ($67|0)==($75|0);
   if ($74) {
    $cont_bytes$0$lcssa$i29 = $73;
    break;
   } else {
    $68 = $67;$cont_bytes$019$i30 = $73;
   }
  }
 }
 $76 = (($cont_bytes$0$lcssa$i29) - ($65))|0;
 $77 = (($76) + ($78))|0;
 $79 = ((($self)) + 48|0);
 $extract$t$i = HEAP8[$79>>0]|0;
 $cond$i = ($extract$t$i<<24>>24)==(3);
 $align$0$off0$i = $cond$i ? 0 : $extract$t$i;
 $align$0$off0$i$clear = $align$0$off0$i & 3;
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $$sink$i = 0;$padding$sink$i = $77;
  break;
 }
 case 3: case 1:  {
  $$sink$i = $77;$padding$sink$i = 0;
  break;
 }
 case 2:  {
  $118 = $77 >>> 1;
  $119 = (($77) + 1)|0;
  $120 = $119 >>> 1;
  $$sink$i = $118;$padding$sink$i = $120;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$fill$i>>2] = 0;
 $80 = ((($self)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81>>>0)<(128);
 if ($82) {
  $83 = $81&255;
  HEAP8[$fill$i>>0] = $83;
  $len$2$i$i = 1;
 } else {
  $84 = ($81>>>0)<(2048);
  do {
   if ($84) {
    $85 = $81 >>> 6;
    $86 = $85 & 31;
    $87 = $86&255;
    $88 = $87 | -64;
    $$sink$i$i = $88;$$sink$sink$i$i = 1;$$sink15$i$i = $fill$i;$len$1$i$i = 2;
   } else {
    $89 = ($81>>>0)<(65536);
    if ($89) {
     $90 = $81 >>> 12;
     $91 = $90 & 15;
     $92 = $91&255;
     $93 = $92 | -32;
     HEAP8[$fill$i>>0] = $93;
     $94 = $81 >>> 6;
     $95 = $94 & 63;
     $96 = $95&255;
     $97 = ((($fill$i)) + 1|0);
     $98 = $96 | -128;
     $$sink$i$i = $98;$$sink$sink$i$i = 2;$$sink15$i$i = $97;$len$1$i$i = 3;
     break;
    } else {
     $99 = $81 >>> 18;
     $100 = $99&255;
     $101 = $100 | -16;
     HEAP8[$fill$i>>0] = $101;
     $102 = $81 >>> 12;
     $103 = $102 & 63;
     $104 = $103&255;
     $105 = ((($fill$i)) + 1|0);
     $106 = $104 | -128;
     HEAP8[$105>>0] = $106;
     $107 = $81 >>> 6;
     $108 = $107 & 63;
     $109 = $108&255;
     $110 = ((($fill$i)) + 2|0);
     $111 = $109 | -128;
     $$sink$i$i = $111;$$sink$sink$i$i = 3;$$sink15$i$i = $110;$len$1$i$i = 4;
     break;
    }
   }
  } while(0);
  HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
  $112 = $81 & 63;
  $113 = $112&255;
  $114 = (($fill$i) + ($$sink$sink$i$i)|0);
  $115 = $113 | -128;
  HEAP8[$114>>0] = $115;
  $len$2$i$i = $len$1$i$i;
 }
 $116 = ((($self)) + 24|0);
 $117 = ((($self)) + 28|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $121 = ($iter$sroa$0$0$i>>>0)<($$sink$i>>>0);
  if (!($121)) {
   break;
  }
  $$arith2 = (($iter$sroa$0$0$i) + 1)|0;
  $$overflow3 = ($iter$sroa$0$0$i>>>0)>(4294967294);
  if ($$overflow3) {
   break;
  }
  $127 = HEAP32[$116>>2]|0;
  $128 = HEAP32[$117>>2]|0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_iiii[$130 & 255]($127,$fill$i,$len$2$i$i)|0);
  $switch14$i = ($131<<24>>24)==(0);
  if ($switch14$i) {
   $iter$sroa$0$0$i = $$arith2;
  } else {
   label = 40;
   break;
  }
 }
 if ((label|0) == 40) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $122 = HEAP32[$116>>2]|0;
 $123 = HEAP32[$117>>2]|0;
 $124 = ((($123)) + 12|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (FUNCTION_TABLE_iiii[$125 & 255]($122,$0,$65)|0);
 $switch15$i = ($126<<24>>24)==(0);
 if ($switch15$i) {
  $iter1$sroa$0$0$i = 0;
 } else {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 while(1) {
  $132 = ($iter1$sroa$0$0$i>>>0)<($padding$sink$i>>>0);
  if (!($132)) {
   label = 44;
   break;
  }
  $$arith = (($iter1$sroa$0$0$i) + 1)|0;
  $$overflow = ($iter1$sroa$0$0$i>>>0)>(4294967294);
  if ($$overflow) {
   label = 44;
   break;
  }
  $133 = HEAP32[$116>>2]|0;
  $134 = HEAP32[$117>>2]|0;
  $135 = ((($134)) + 12|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_iiii[$136 & 255]($133,$fill$i,$len$2$i$i)|0);
  $switch17$i = ($137<<24>>24)==(0);
  if ($switch17$i) {
   $iter1$sroa$0$0$i = $$arith;
  } else {
   label = 46;
   break;
  }
 }
 if ((label|0) == 44) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 46) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($s$ptr,$s$meta,$0,$1) {
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$$$$i = 0, $$$$i = 0, $$$i = 0, $$lcssa = 0, $$lcssa78$ph = 0, $$pre$i$i = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink$i = 0, $$sink13 = 0, $$sink6$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i14$i$i = 0, $_0$0$i20$i$i = 0, $_0$0$i9$i$i = 0, $_112$sroa$4$0$ph = 0;
 var $_126 = 0, $_133 = 0, $_28 = 0, $_35 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i23 = 0, $_5$sroa$0$0$$sroa_idx$i25 = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i24 = 0, $_5$sroa$4$0$$sroa_idx2$i26 = 0, $_62 = 0, $_69 = 0, $begin = 0, $ch = 0, $char_range = 0, $char_start$080 = 0, $ellipsis = 0, $end = 0, $index = 0, $max$0$i$lcssa$ph = 0;
 var $max$0$i84 = 0, $oob_index = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i$i$i = 0, $or$cond$i27 = 0, $or$cond$i2779 = 0, $phitmp$i$i = 0, $phitmp26$i$i = 0, $phitmp27$i$i = 0, $s_trunc = 0, $storemerge = 0, $storemerge22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $_133 = sp + 152|0;
 $_126 = sp + 128|0;
 $char_range = sp + 120|0;
 $ch = sp + 208|0;
 $index = sp + 204|0;
 $_69 = sp + 88|0;
 $_62 = sp + 64|0;
 $_35 = sp + 40|0;
 $_28 = sp + 16|0;
 $oob_index = sp + 200|0;
 $ellipsis = sp + 8|0;
 $s_trunc = sp;
 $end = sp + 196|0;
 $begin = sp + 192|0;
 HEAP32[$begin>>2] = $0;
 HEAP32[$end>>2] = $1;
 $2 = ($s$meta>>>0)<(257);
 if ($2) {
  $$sink$i = $s$meta;$$sink6$i = 0;
 } else {
  $max$0$i84 = 256;
  while(1) {
   $3 = ($max$0$i84>>>0)<($s$meta>>>0);
   if ($3) {
    $4 = (($s$ptr) + ($max$0$i84)|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = ($5<<24>>24)>(-65);
    if ($6) {
     $$lcssa78$ph = 0;$max$0$i$lcssa$ph = $max$0$i84;
     break;
    }
   }
   $12 = (($max$0$i84) + -1)|0;
   $13 = ($12|0)==(0);
   $14 = ($12|0)==($s$meta|0);
   $or$cond$i$i = $13 | $14;
   if ($or$cond$i$i) {
    $$lcssa78$ph = $13;$max$0$i$lcssa$ph = $12;
    break;
   } else {
    $max$0$i84 = $12;
   }
  }
  $7 = ($max$0$i$lcssa$ph|0)==($s$meta|0);
  $or$cond$i$i$i$i = $$lcssa78$ph | $7;
  if ($or$cond$i$i$i$i) {
   $$sink$i = $max$0$i$lcssa$ph;$$sink6$i = 1;
  } else {
   $8 = ($max$0$i$lcssa$ph>>>0)<($s$meta>>>0);
   if (!($8)) {
    __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($s$ptr,$s$meta,0,$max$0$i$lcssa$ph);
    // unreachable;
   }
   $9 = (($s$ptr) + ($max$0$i$lcssa$ph)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)>(-65);
   if ($11) {
    $$sink$i = $max$0$i$lcssa$ph;$$sink6$i = 1;
   } else {
    __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($s$ptr,$s$meta,0,$max$0$i$lcssa$ph);
    // unreachable;
   }
  }
 }
 $15 = $s$ptr;
 HEAP32[$s_trunc>>2] = $15;
 $16 = ((($s_trunc)) + 4|0);
 HEAP32[$16>>2] = $$sink$i;
 $$sink13 = $$sink6$i ? 9682 : 14140;
 $$sink = $$sink6$i ? 5 : 0;
 HEAP32[$ellipsis>>2] = $$sink13;
 $17 = ((($ellipsis)) + 4|0);
 HEAP32[$17>>2] = $$sink;
 $18 = ($0>>>0)>($s$meta>>>0);
 $19 = ($1>>>0)>($s$meta>>>0);
 $or$cond = $18 | $19;
 if ($or$cond) {
  $storemerge22 = $18 ? $0 : $1;
  HEAP32[$oob_index>>2] = $storemerge22;
  $20 = $oob_index;
  $21 = $s_trunc;
  $22 = $ellipsis;
  HEAP32[$_35>>2] = $20;
  $23 = ((($_35)) + 4|0);
  HEAP32[$23>>2] = (120);
  $24 = ((($_35)) + 8|0);
  HEAP32[$24>>2] = $21;
  $25 = ((($_35)) + 12|0);
  HEAP32[$25>>2] = (155);
  $26 = ((($_35)) + 16|0);
  HEAP32[$26>>2] = $22;
  $27 = ((($_35)) + 20|0);
  HEAP32[$27>>2] = (155);
  HEAP32[$_28>>2] = 3692;
  $28 = ((($_28)) + 4|0);
  HEAP32[$28>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i23 = ((($_28)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i23>>2] = 3716;
  $_5$sroa$4$0$$sroa_idx2$i24 = ((($_28)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i24>>2] = 3;
  $29 = ((($_28)) + 16|0);
  HEAP32[$29>>2] = $_35;
  $30 = ((($_28)) + 20|0);
  HEAP32[$30>>2] = 3;
  __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_28,3824);
  // unreachable;
 }
 $31 = ($0>>>0)>($1>>>0);
 if ($31) {
  $32 = $begin;
  $33 = $end;
  $34 = $s_trunc;
  $35 = $ellipsis;
  HEAP32[$_69>>2] = $32;
  $36 = ((($_69)) + 4|0);
  HEAP32[$36>>2] = (120);
  $37 = ((($_69)) + 8|0);
  HEAP32[$37>>2] = $33;
  $38 = ((($_69)) + 12|0);
  HEAP32[$38>>2] = (120);
  $39 = ((($_69)) + 16|0);
  HEAP32[$39>>2] = $34;
  $40 = ((($_69)) + 20|0);
  HEAP32[$40>>2] = (155);
  $41 = ((($_69)) + 24|0);
  HEAP32[$41>>2] = $35;
  $42 = ((($_69)) + 28|0);
  HEAP32[$42>>2] = (155);
  HEAP32[$_62>>2] = 3840;
  $43 = ((($_62)) + 4|0);
  HEAP32[$43>>2] = 4;
  $_5$sroa$0$0$$sroa_idx$i25 = ((($_62)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i25>>2] = 3872;
  $_5$sroa$4$0$$sroa_idx2$i26 = ((($_62)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i26>>2] = 4;
  $44 = ((($_62)) + 16|0);
  HEAP32[$44>>2] = $_69;
  $45 = ((($_62)) + 20|0);
  HEAP32[$45>>2] = 4;
  __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_62,4016);
  // unreachable;
 }
 $46 = ($0|0)==(0);
 $47 = ($0|0)==($s$meta|0);
 $or$cond$i = $46 | $47;
 if ($or$cond$i) {
  label = 16;
 } else {
  $48 = ($0>>>0)<($s$meta>>>0);
  if ($48) {
   $49 = (($s$ptr) + ($0)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = ($50<<24>>24)>(-65);
   if ($51) {
    label = 16;
   } else {
    $storemerge = $0;
   }
  } else {
   $storemerge = $0;
  }
 }
 if ((label|0) == 16) {
  $storemerge = $1;
 }
 HEAP32[$index>>2] = $storemerge;
 $52 = ($storemerge|0)==(0);
 $53 = ($storemerge|0)==($s$meta|0);
 $or$cond$i2779 = $52 | $53;
 L26: do {
  if ($or$cond$i2779) {
   $$lcssa = $52;$58 = $storemerge;
  } else {
   $char_start$080 = $storemerge;
   while(1) {
    $54 = ($char_start$080>>>0)<($s$meta>>>0);
    if ($54) {
     $55 = (($s$ptr) + ($char_start$080)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = ($56<<24>>24)>(-65);
     if ($57) {
      $$lcssa = 0;$58 = $char_start$080;
      break L26;
     }
    }
    $124 = (($char_start$080) + -1)|0;
    $125 = ($124|0)==(0);
    $126 = ($124|0)==($s$meta|0);
    $or$cond$i27 = $125 | $126;
    if ($or$cond$i27) {
     $$lcssa = $125;$58 = $124;
     break;
    } else {
     $char_start$080 = $124;
    }
   }
  }
 } while(0);
 $59 = ($58|0)==($s$meta|0);
 $or$cond$i$i$i = $$lcssa | $59;
 if ($or$cond$i$i$i) {
  $$pre$i$i = (($s$ptr) + ($58)|0);
  $$pre$phiZ2D = $$pre$i$i;
 } else {
  $60 = ($58>>>0)<($s$meta>>>0);
  if (!($60)) {
   __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($s$ptr,$s$meta,$58,$s$meta);
   // unreachable;
  }
  $61 = (($s$ptr) + ($58)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = ($62<<24>>24)>(-65);
  if ($63) {
   $$pre$phiZ2D = $61;
  } else {
   __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($s$ptr,$s$meta,$58,$s$meta);
   // unreachable;
  }
 }
 $64 = (($s$ptr) + ($58)|0);
 $65 = (($s$meta) - ($58))|0;
 $66 = (($64) + ($65)|0);
 $67 = ($$pre$phiZ2D|0)==($66|0);
 if ($67) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(4032);
  // unreachable;
 }
 $81 = (($s$ptr) + ($58)|0);
 $72 = ((($81)) + 1|0);
 $69 = HEAP8[$$pre$phiZ2D>>0]|0;
 $82 = ($69<<24>>24)>(-1);
 if ($82) {
  $68 = $69&255;
  $_112$sroa$4$0$ph = $68;
 } else {
  $70 = $69 & 31;
  $71 = $70&255;
  $73 = ($72|0)==($66|0);
  if ($73) {
   $83 = $66;$_0$0$i20$i$i = 0;
  } else {
   $74 = (($s$ptr) + ($58)|0);
   $75 = ((($74)) + 2|0);
   $76 = HEAP8[$72>>0]|0;
   $phitmp$i$i = $76 & 63;
   $83 = $75;$_0$0$i20$i$i = $phitmp$i$i;
  }
  $77 = $71 << 6;
  $78 = $_0$0$i20$i$i&255;
  $79 = $78 | $77;
  $80 = ($69&255)>(223);
  if ($80) {
   $84 = ($83|0)==($66|0);
   if ($84) {
    $93 = $66;$_0$0$i14$i$i = 0;
   } else {
    $85 = ((($83)) + 1|0);
    $86 = HEAP8[$83>>0]|0;
    $phitmp26$i$i = $86 & 63;
    $93 = $85;$_0$0$i14$i$i = $phitmp26$i$i;
   }
   $87 = $78 << 6;
   $88 = $_0$0$i14$i$i&255;
   $89 = $88 | $87;
   $90 = $71 << 12;
   $91 = $89 | $90;
   $92 = ($69&255)>(239);
   if ($92) {
    $94 = ($93|0)==($66|0);
    if ($94) {
     $_0$0$i9$i$i = 0;
    } else {
     $95 = HEAP8[$93>>0]|0;
     $phitmp27$i$i = $95 & 63;
     $_0$0$i9$i$i = $phitmp27$i$i;
    }
    $96 = $71 << 18;
    $97 = $96 & 1835008;
    $98 = $89 << 6;
    $99 = $_0$0$i9$i$i&255;
    $100 = $98 | $97;
    $101 = $100 | $99;
    $_112$sroa$4$0$ph = $101;
   } else {
    $_112$sroa$4$0$ph = $91;
   }
  } else {
   $_112$sroa$4$0$ph = $79;
  }
 }
 HEAP32[$ch>>2] = $_112$sroa$4$0$ph;
 $102 = ($_112$sroa$4$0$ph>>>0)<(128);
 $103 = ($_112$sroa$4$0$ph>>>0)<(2048);
 $104 = ($_112$sroa$4$0$ph>>>0)<(65536);
 $$$i = $104 ? 3 : 4;
 $$$$i = $103 ? 2 : $$$i;
 $$$$$i = $102 ? 1 : $$$$i;
 $105 = (($$$$$i) + ($58))|0;
 HEAP32[$char_range>>2] = $58;
 $106 = ((($char_range)) + 4|0);
 HEAP32[$106>>2] = $105;
 $107 = $index;
 $108 = $ch;
 $109 = $char_range;
 $110 = $s_trunc;
 $111 = $ellipsis;
 HEAP32[$_133>>2] = $107;
 $112 = ((($_133)) + 4|0);
 HEAP32[$112>>2] = (120);
 $113 = ((($_133)) + 8|0);
 HEAP32[$113>>2] = $108;
 $114 = ((($_133)) + 12|0);
 HEAP32[$114>>2] = (156);
 $115 = ((($_133)) + 16|0);
 HEAP32[$115>>2] = $109;
 $116 = ((($_133)) + 20|0);
 HEAP32[$116>>2] = (157);
 $117 = ((($_133)) + 24|0);
 HEAP32[$117>>2] = $110;
 $118 = ((($_133)) + 28|0);
 HEAP32[$118>>2] = (155);
 $119 = ((($_133)) + 32|0);
 HEAP32[$119>>2] = $111;
 $120 = ((($_133)) + 36|0);
 HEAP32[$120>>2] = (155);
 HEAP32[$_126>>2] = 4056;
 $121 = ((($_126)) + 4|0);
 HEAP32[$121>>2] = 5;
 $_5$sroa$0$0$$sroa_idx$i = ((($_126)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 4096;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_126)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 5;
 $122 = ((($_126)) + 16|0);
 HEAP32[$122>>2] = $_133;
 $123 = ((($_126)) + 20|0);
 HEAP32[$123>>2] = 5;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_126,4276);
 // unreachable;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17hcd081525bfbbabbcE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = ((($self)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN4core3fmt9Formatter3pad17h1fecb2876abbb102E($f,$0,$2)|0);
 return ($3|0);
}
function __ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17hb1bff36a33e99380E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$sink4$i$i$i = 0, $$sink4$v$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_21$sroa$13$1$ph = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$1$ph = 0, $switch = 0, $switch8 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0;
 var $trunc$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 255]($1,39)|0);
 $switch = ($6<<24>>24)==(0);
 if (!($switch)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $trunc = HEAP32[$self>>2]|0;
 $trunc$clear = $trunc & 2097151;
 switch ($trunc$clear|0) {
 case 9:  {
  $42 = 0;$43 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
  break;
 }
 case 13:  {
  $42 = 0;$43 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
  break;
 }
 case 10:  {
  $42 = 0;$43 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
  break;
 }
 case 34: case 39: case 92:  {
  $42 = 0;$43 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $trunc;
  break;
 }
 default: {
  $11 = (__ZN4core12char_private12is_printable17hcab8f2c72eb8c5dfE($trunc)|0);
  if ($11) {
   $42 = 0;$43 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $trunc;
  } else {
   $7 = $trunc | 1;
   $8 = (Math_clz32(($7|0))|0);
   $9 = $8 >>> 2;
   $10 = $9 ^ 7;
   $42 = $10;$43 = 5;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $trunc;
  }
 }
 }
 $13 = $43;$21 = $42;$iter$sroa$0$0 = $init_state$sroa$0$0$i;
 L11: while(1) {
  $trunc$i = $iter$sroa$0$0&255;
  $trunc$i$clear = $trunc$i & 3;
  L13: do {
   switch ($trunc$i$clear<<24>>24) {
   case 0:  {
    label = 22;
    break L11;
    break;
   }
   case 1:  {
    $44 = $21;$45 = $13;$_21$sroa$13$1$ph = $init_state$sroa$9$0$i;$iter$sroa$0$1$ph = 0;
    break;
   }
   case 2:  {
    $44 = $21;$45 = $13;$_21$sroa$13$1$ph = 92;$iter$sroa$0$1$ph = 1;
    break;
   }
   case 3:  {
    $12 = $13&255;
    $trunc$i$i$clear = $12 & 7;
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     label = 22;
     break L11;
     break;
    }
    case 1:  {
     $28 = $13 & -256;
     $44 = $21;$45 = $28;$_21$sroa$13$1$ph = 125;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 2:  {
     $20 = $21 << 2;
     $22 = $20 & 28;
     $23 = $init_state$sroa$9$0$i >>> $22;
     $24 = $23 & 15;
     $25 = $24&255;
     $26 = ($25&255)<(10);
     $$sink4$v$i$i$i = $26 ? 48 : 87;
     $$sink4$i$i$i = (($$sink4$v$i$i$i) + ($24))|0;
     $27 = ($21|0)==(0);
     if ($27) {
      $29 = $13 & -256;
      $30 = $29 | 1;
      $44 = $21;$45 = $30;$_21$sroa$13$1$ph = $$sink4$i$i$i;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L13;
     } else {
      $31 = (($21) + -1)|0;
      $44 = $31;$45 = $13;$_21$sroa$13$1$ph = $$sink4$i$i$i;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L13;
     }
     break;
    }
    case 3:  {
     $18 = $13 & -256;
     $19 = $18 | 2;
     $44 = $21;$45 = $19;$_21$sroa$13$1$ph = 123;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 4:  {
     $16 = $13 & -256;
     $17 = $16 | 3;
     $44 = $21;$45 = $17;$_21$sroa$13$1$ph = 117;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 5:  {
     $14 = $13 & -256;
     $15 = $14 | 4;
     $44 = $21;$45 = $15;$_21$sroa$13$1$ph = 92;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    default: {
     label = 19;
     break L11;
    }
    }
    break;
   }
   default: {
    label = 11;
    break L11;
   }
   }
  } while(0);
  $37 = HEAP32[$0>>2]|0;
  $38 = HEAP32[$2>>2]|0;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (FUNCTION_TABLE_iii[$40 & 255]($37,$_21$sroa$13$1$ph)|0);
  $switch8 = ($41<<24>>24)==(0);
  if ($switch8) {
   $13 = $45;$21 = $44;$iter$sroa$0$0 = $iter$sroa$0$1$ph;
  } else {
   $_0$sroa$0$0 = 1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 11) {
  // unreachable;
 }
 else if ((label|0) == 19) {
  // unreachable;
 }
 else if ((label|0) == 22) {
  $32 = HEAP32[$0>>2]|0;
  $33 = HEAP32[$2>>2]|0;
  $34 = ((($33)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_iii[$35 & 255]($32,39)|0);
  $_0$sroa$0$0 = $36;
  return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN71__LT_core__ops__range__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h5a8199c1d0bc1c38E($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_4$sroa$4$0$$sroa_idx6 = 0, $_4$sroa$5$0$$sroa_idx8 = 0, $_4$sroa$6$0$$sroa_idx10 = 0, $_4$sroa$7$0$$sroa_idx12 = 0, $_4$sroa$8$0$$sroa_idx14 = 0, $_5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5$i = sp + 16|0;
 $_11 = sp;
 $0 = ((($self)) + 4|0);
 $1 = $self;
 $2 = $0;
 HEAP32[$_11>>2] = $1;
 $3 = ((($_11)) + 4|0);
 HEAP32[$3>>2] = (158);
 $4 = ((($_11)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_11)) + 12|0);
 HEAP32[$5>>2] = (158);
 $6 = ((($fmt)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($fmt)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$_5$i>>2] = 4292;
 $_4$sroa$4$0$$sroa_idx6 = ((($_5$i)) + 4|0);
 HEAP32[$_4$sroa$4$0$$sroa_idx6>>2] = 2;
 $_4$sroa$5$0$$sroa_idx8 = ((($_5$i)) + 8|0);
 HEAP32[$_4$sroa$5$0$$sroa_idx8>>2] = 3556;
 $_4$sroa$6$0$$sroa_idx10 = ((($_5$i)) + 12|0);
 HEAP32[$_4$sroa$6$0$$sroa_idx10>>2] = 2;
 $_4$sroa$7$0$$sroa_idx12 = ((($_5$i)) + 16|0);
 HEAP32[$_4$sroa$7$0$$sroa_idx12>>2] = $_11;
 $_4$sroa$8$0$$sroa_idx14 = ((($_5$i)) + 20|0);
 HEAP32[$_4$sroa$8$0$$sroa_idx14>>2] = 2;
 $10 = (__ZN4core3fmt5write17h450a6417baf49a9bE($7,$9,$_5$i)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17hfe0f7424930b02b7E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h5a7782e29a5631cdE($self,$f)|0);
 return ($0|0);
}
function __ZN4core3fmt5write17h450a6417baf49a9bE($0,$1,$args) {
 $0 = $0|0;
 $1 = $1|0;
 $args = $args|0;
 var $$cast = 0, $$sink = 0, $$sink6$i = 0, $$sroa_idx = 0, $$sroa_idx41 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_10$sroa$7$2$i = 0, $_4$sroa$0$0$$sroa_idx = 0, $_5$sroa$0$0$$sroa_idx = 0, $_6$sroa$7$2$i = 0, $formatter = 0, $iter$sroa$0$0$in = 0, $iter1$sroa$0$0$in = 0;
 var $switch = 0, $switch$i = 0, $switch17 = 0, $switch18 = 0, $switch20 = 0, $switch21 = 0, $switch22 = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i11$i = 0, $trunc$i11$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $formatter = sp;
 $2 = ((($args)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($args)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $$cast = $3;
 $6 = (($$cast) + ($5<<3)|0);
 $7 = $6;
 HEAP32[$formatter>>2] = 0;
 $8 = ((($formatter)) + 4|0);
 HEAP32[$8>>2] = 32;
 $9 = ((($formatter)) + 48|0);
 HEAP8[$9>>0] = 3;
 $_4$sroa$0$0$$sroa_idx = ((($formatter)) + 8|0);
 HEAP32[$_4$sroa$0$0$$sroa_idx>>2] = 0;
 $_5$sroa$0$0$$sroa_idx = ((($formatter)) + 16|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx>>2] = 0;
 $10 = ((($formatter)) + 24|0);
 HEAP32[$10>>2] = $0;
 $11 = ((($formatter)) + 28|0);
 HEAP32[$11>>2] = $1;
 $$sroa_idx = ((($formatter)) + 32|0);
 HEAP32[$$sroa_idx>>2] = $3;
 $$sroa_idx41 = ((($formatter)) + 36|0);
 HEAP32[$$sroa_idx41>>2] = $7;
 $12 = ((($formatter)) + 40|0);
 HEAP32[$12>>2] = $3;
 $13 = ((($formatter)) + 44|0);
 HEAP32[$13>>2] = $5;
 $14 = HEAP32[$args>>2]|0;
 $15 = ((($args)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16<<3)|0);
 $18 = ((($args)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $switch = ($19|0)==(0|0);
 L1: do {
  if ($switch) {
   $30 = $14;$iter$sroa$0$0$in = $$cast;
   while(1) {
    $28 = ($iter$sroa$0$0$in|0)==($6|0);
    if ($28) {
     $$sink = $30;
     label = 3;
     break L1;
    }
    $29 = ((($iter$sroa$0$0$in)) + 8|0);
    $31 = ($30|0)==($17|0);
    if ($31) {
     label = 42;
     break L1;
    }
    $32 = HEAP32[$10>>2]|0;
    $33 = HEAP32[$11>>2]|0;
    $34 = HEAP32[$30>>2]|0;
    $35 = ((($30)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($33)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiii[$38 & 255]($32,$34,$36)|0);
    $switch17 = ($39<<24>>24)==(0);
    if (!($switch17)) {
     label = 9;
     break L1;
    }
    $40 = ((($30)) + 8|0);
    $41 = ((($iter$sroa$0$0$in)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$iter$sroa$0$0$in>>2]|0;
    $44 = (FUNCTION_TABLE_iii[$42 & 255]($43,$formatter)|0);
    $switch18 = ($44<<24>>24)==(0);
    if ($switch18) {
     $30 = $40;$iter$sroa$0$0$in = $29;
    } else {
     label = 9;
     break;
    }
   }
  } else {
   $20 = ((($args)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + (($21*36)|0)|0);
   $23 = ((($formatter)) + 8|0);
   $24 = ((($formatter)) + 16|0);
   $25 = ((($formatter)) + 40|0);
   $26 = ((($formatter)) + 32|0);
   $47 = $14;$iter1$sroa$0$0$in = $19;
   L8: while(1) {
    $45 = ($iter1$sroa$0$0$in|0)==($22|0);
    if ($45) {
     $$sink = $47;
     label = 3;
     break L1;
    }
    $46 = ((($iter1$sroa$0$0$in)) + 36|0);
    $48 = ($47|0)==($17|0);
    if ($48) {
     label = 42;
     break L1;
    }
    $49 = ((($47)) + 8|0);
    $50 = HEAP32[$10>>2]|0;
    $51 = HEAP32[$11>>2]|0;
    $52 = HEAP32[$47>>2]|0;
    $53 = ((($47)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($51)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (FUNCTION_TABLE_iiii[$56 & 255]($50,$52,$54)|0);
    $switch20 = ($57<<24>>24)==(0);
    if (!($switch20)) {
     label = 9;
     break L1;
    }
    $58 = ((($iter1$sroa$0$0$in)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    HEAP32[$8>>2] = $59;
    $60 = ((($iter1$sroa$0$0$in)) + 32|0);
    $61 = HEAP8[$60>>0]|0;
    HEAP8[$9>>0] = $61;
    $62 = ((($iter1$sroa$0$0$in)) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$formatter>>2] = $63;
    $64 = ((($iter1$sroa$0$0$in)) + 24|0);
    $65 = HEAP32[$64>>2]|0;
    $trunc$i$i = $65&255;
    $trunc$i$i$clear = $trunc$i$i & 3;
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     $75 = ((($iter1$sroa$0$0$in)) + 28|0);
     $76 = HEAP32[$75>>2]|0;
     $89 = 0;$92 = 1;$_6$sroa$7$2$i = $76;
     break;
    }
    case 1:  {
     $77 = ((($iter1$sroa$0$0$in)) + 28|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = HEAP32[$13>>2]|0;
     $80 = ($78>>>0)<($79>>>0);
     if (!($80)) {
      label = 22;
      break L8;
     }
     $81 = HEAP32[$25>>2]|0;
     $82 = (((($81) + ($78<<3)|0)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==((159)|0);
     if ($84) {
      $85 = (($81) + ($78<<3)|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = HEAP32[$86>>2]|0;
      $89 = 0;$92 = 1;$_6$sroa$7$2$i = $87;
     } else {
      $89 = 0;$92 = 0;$_6$sroa$7$2$i = 0;
     }
     break;
    }
    case 2:  {
     $66 = HEAP32[$26>>2]|0;
     $67 = HEAP32[$$sroa_idx41>>2]|0;
     $68 = ($66|0)==($67|0);
     if ($68) {
      $89 = 0;$92 = 0;$_6$sroa$7$2$i = 0;
     } else {
      $69 = ((($66)) + 8|0);
      HEAP32[$26>>2] = $69;
      $70 = ((($66)) + 4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)==((159)|0);
      if ($72) {
       $73 = HEAP32[$66>>2]|0;
       $74 = HEAP32[$73>>2]|0;
       $89 = 0;$92 = 1;$_6$sroa$7$2$i = $74;
      } else {
       $89 = 0;$92 = 0;$_6$sroa$7$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $89 = 0;$92 = 0;$_6$sroa$7$2$i = 0;
     break;
    }
    default: {
     label = 17;
     break L8;
    }
    }
    $88 = $_6$sroa$7$2$i | $89;
    $90 = $23;
    $91 = $90;
    HEAP32[$91>>2] = $92;
    $93 = (($90) + 4)|0;
    $94 = $93;
    HEAP32[$94>>2] = $88;
    $95 = ((($iter1$sroa$0$0$in)) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $trunc$i11$i = $96&255;
    $trunc$i11$i$clear = $trunc$i11$i & 3;
    switch ($trunc$i11$i$clear<<24>>24) {
    case 0:  {
     $106 = ((($iter1$sroa$0$0$in)) + 20|0);
     $107 = HEAP32[$106>>2]|0;
     $120 = 0;$123 = 1;$_10$sroa$7$2$i = $107;
     break;
    }
    case 1:  {
     $108 = ((($iter1$sroa$0$0$in)) + 20|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = HEAP32[$13>>2]|0;
     $111 = ($109>>>0)<($110>>>0);
     if (!($111)) {
      label = 32;
      break L8;
     }
     $112 = HEAP32[$25>>2]|0;
     $113 = (((($112) + ($109<<3)|0)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==((159)|0);
     if ($115) {
      $116 = (($112) + ($109<<3)|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = HEAP32[$117>>2]|0;
      $120 = 0;$123 = 1;$_10$sroa$7$2$i = $118;
     } else {
      $120 = 0;$123 = 0;$_10$sroa$7$2$i = 0;
     }
     break;
    }
    case 2:  {
     $97 = HEAP32[$26>>2]|0;
     $98 = HEAP32[$$sroa_idx41>>2]|0;
     $99 = ($97|0)==($98|0);
     if ($99) {
      $120 = 0;$123 = 0;$_10$sroa$7$2$i = 0;
     } else {
      $100 = ((($97)) + 8|0);
      HEAP32[$26>>2] = $100;
      $101 = ((($97)) + 4|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)==((159)|0);
      if ($103) {
       $104 = HEAP32[$97>>2]|0;
       $105 = HEAP32[$104>>2]|0;
       $120 = 0;$123 = 1;$_10$sroa$7$2$i = $105;
      } else {
       $120 = 0;$123 = 0;$_10$sroa$7$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $120 = 0;$123 = 0;$_10$sroa$7$2$i = 0;
     break;
    }
    default: {
     label = 27;
     break L8;
    }
    }
    $119 = $_10$sroa$7$2$i | $120;
    $121 = $24;
    $122 = $121;
    HEAP32[$122>>2] = $123;
    $124 = (($121) + 4)|0;
    $125 = $124;
    HEAP32[$125>>2] = $119;
    $126 = HEAP32[$iter1$sroa$0$0$in>>2]|0;
    $switch$i = ($126|0)==(1);
    if ($switch$i) {
     $131 = ((($iter1$sroa$0$0$in)) + 4|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = HEAP32[$13>>2]|0;
     $134 = ($132>>>0)<($133>>>0);
     if (!($134)) {
      label = 39;
      break;
     }
     $135 = HEAP32[$25>>2]|0;
     $136 = (($135) + ($132<<3)|0);
     $$sink6$i = $136;
    } else {
     $127 = HEAP32[$26>>2]|0;
     $128 = HEAP32[$$sroa_idx41>>2]|0;
     $129 = ($127|0)==($128|0);
     if ($129) {
      label = 35;
      break;
     }
     $130 = ((($127)) + 8|0);
     HEAP32[$26>>2] = $130;
     $$sink6$i = $127;
    }
    $137 = ((($$sink6$i)) + 4|0);
    $138 = HEAP32[$$sink6$i>>2]|0;
    $139 = HEAP32[$137>>2]|0;
    $140 = (FUNCTION_TABLE_iii[$139 & 255]($138,$formatter)|0);
    $switch21 = ($140<<24>>24)==(0);
    if ($switch21) {
     $47 = $49;$iter1$sroa$0$0$in = $46;
    } else {
     label = 9;
     break L1;
    }
   }
   if ((label|0) == 17) {
    // unreachable;
   }
   else if ((label|0) == 22) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(4308,$78,$79);
    // unreachable;
   }
   else if ((label|0) == 27) {
    // unreachable;
   }
   else if ((label|0) == 32) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(4308,$109,$110);
    // unreachable;
   }
   else if ((label|0) == 35) {
    __ZN4core9panicking5panic17hdf4baf73e8b6719eE(4032);
    // unreachable;
   }
   else if ((label|0) == 39) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(4324,$132,$133);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = ($$sink|0)==($17|0);
  if ($27) {
   label = 42;
  } else {
   $141 = HEAP32[$10>>2]|0;
   $142 = HEAP32[$11>>2]|0;
   $143 = HEAP32[$$sink>>2]|0;
   $144 = ((($$sink)) + 4|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($142)) + 12|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (FUNCTION_TABLE_iiii[$147 & 255]($141,$143,$145)|0);
   $switch22 = ($148<<24>>24)==(0);
   if ($switch22) {
    label = 42;
   } else {
    label = 9;
   }
  }
 }
 if ((label|0) == 9) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 42) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV110show_usize17hbae3c2acb149f11eE($x,$f) {
 $x = $x|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h5a7782e29a5631cdE($x,$f)|0);
 return ($0|0);
}
function __ZN4core12char_private12is_printable17hcab8f2c72eb8c5dfE($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $not$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond28 = 0, $x$off = 0;
 var $x$off10 = 0, $x$off11 = 0, $x$off12 = 0, $x$off7 = 0, $x$off9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x&65535;
 $1 = ($x>>>0)<(65536);
 if ($1) {
  $2 = (__ZN4core12char_private5check17h382f856d885c7016E($0,9816,41,9898,304,10202,326)|0);
  $_0$0$shrunk = $2;
  return ($_0$0$shrunk|0);
 }
 $3 = ($x>>>0)<(131072);
 if ($3) {
  $4 = (__ZN4core12char_private5check17h382f856d885c7016E($0,10528,33,10594,150,10744,360)|0);
  $_0$0$shrunk = $4;
  return ($_0$0$shrunk|0);
 }
 $x$off = (($x) + -173783)|0;
 $5 = ($x$off>>>0)<(41);
 $x$off7 = (($x) + -177973)|0;
 $6 = ($x$off7>>>0)<(11);
 $or$cond = $5 | $6;
 $7 = $x & -2;
 $8 = ($7|0)==(178206);
 $or$cond22 = $8 | $or$cond;
 $x$off9 = (($x) + -183970)|0;
 $9 = ($x$off9>>>0)<(14);
 $or$cond24 = $9 | $or$cond22;
 $x$off10 = (($x) + -191457)|0;
 $10 = ($x$off10>>>0)<(3103);
 $or$cond26 = $10 | $or$cond24;
 $x$off11 = (($x) + -195102)|0;
 $11 = ($x$off11>>>0)<(722658);
 $or$cond28 = $11 | $or$cond26;
 if ($or$cond28) {
  $_0$0$shrunk = 0;
  return ($_0$0$shrunk|0);
 } else {
  $x$off12 = (($x) + -918000)|0;
  $not$ = ($x$off12>>>0)>(196111);
  return ($not$|0);
 }
 return (0)|0;
}
function __ZN4core12char_private5check17h382f856d885c7016E($x,$singletonuppers$ptr,$singletonuppers$meta,$singletonlowers$ptr,$singletonlowers$meta,$normal$ptr,$normal$meta) {
 $x = $x|0;
 $singletonuppers$ptr = $singletonuppers$ptr|0;
 $singletonuppers$meta = $singletonuppers$meta|0;
 $singletonlowers$ptr = $singletonlowers$ptr|0;
 $singletonlowers$meta = $singletonlowers$meta|0;
 $normal$ptr = $normal$ptr|0;
 $normal$meta = $normal$meta|0;
 var $$old = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$0$off0 = 0, $current$0$off0104 = 0, $iter1$sroa$0$0$in = 0, $len$0 = 0, $lowerstart$072 = 0, $normal$sroa$0$0$in102 = 0, $normal$sroa$0$3$in = 0, $or$cond = 0, $phitmp$i$i$i = 0, $x2$0103 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x&65535) >>> 8;
 $1 = $0&255;
 $2 = (($singletonuppers$ptr) + ($singletonuppers$meta<<1)|0);
 $3 = ($singletonuppers$meta|0)==(0);
 L1: do {
  if (!($3)) {
   $4 = $x&255;
   $6 = $singletonuppers$ptr;$lowerstart$072 = 0;
   L3: while(1) {
    $5 = ((($6)) + 2|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ((($6)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = (($10) + ($lowerstart$072))|0;
    $12 = ($1<<24>>24)==($7<<24>>24);
    if (!($12)) {
     $20 = ($1&255)<($7&255);
     $21 = ($5|0)==($2|0);
     $or$cond = $20 | $21;
     if ($or$cond) {
      break L1;
     } else {
      $6 = $5;$lowerstart$072 = $11;
      continue;
     }
    }
    $16 = ($11>>>0)<($lowerstart$072>>>0);
    if ($16) {
     label = 7;
     break;
    }
    $17 = ($11>>>0)>($singletonlowers$meta>>>0);
    if ($17) {
     label = 9;
     break;
    }
    $18 = (($singletonlowers$ptr) + ($lowerstart$072)|0);
    $19 = (($18) + ($10)|0);
    $iter1$sroa$0$0$in = $18;
    while(1) {
     $22 = ($iter1$sroa$0$0$in|0)==($19|0);
     if ($22) {
      break;
     }
     $23 = ((($iter1$sroa$0$0$in)) + 1|0);
     $24 = HEAP8[$iter1$sroa$0$0$in>>0]|0;
     $25 = ($24<<24>>24)==($4<<24>>24);
     if ($25) {
      $_0$0$off0 = 0;
      label = 15;
      break L3;
     } else {
      $iter1$sroa$0$0$in = $23;
     }
    }
    $$old = ($5|0)==($2|0);
    if ($$old) {
     break L1;
    } else {
     $6 = $5;$lowerstart$072 = $11;
    }
   }
   if ((label|0) == 7) {
    __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($lowerstart$072,$11);
    // unreachable;
   }
   else if ((label|0) == 9) {
    __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($11,$singletonlowers$meta);
    // unreachable;
   }
   else if ((label|0) == 15) {
    return ($_0$0$off0|0);
   }
  }
 } while(0);
 $13 = (($normal$ptr) + ($normal$meta)|0);
 $14 = ($normal$meta|0)==(0);
 if ($14) {
  $_0$0$off0 = 1;
  return ($_0$0$off0|0);
 }
 $15 = $x&65535;
 $current$0$off0104 = 1;$normal$sroa$0$0$in102 = $normal$ptr;$x2$0103 = $15;
 while(1) {
  $26 = ((($normal$sroa$0$0$in102)) + 1|0);
  $27 = HEAP8[$normal$sroa$0$0$in102>>0]|0;
  $28 = ($27<<24>>24)<(0);
  if ($28) {
   $29 = ($26|0)==($13|0);
   if ($29) {
    label = 18;
    break;
   }
   $30 = $27 & 127;
   $31 = $30&255;
   $32 = $31 << 8;
   $33 = ((($normal$sroa$0$0$in102)) + 2|0);
   $34 = HEAP8[$26>>0]|0;
   $phitmp$i$i$i = $34&255;
   $35 = $phitmp$i$i$i | $32;
   $len$0 = $35;$normal$sroa$0$3$in = $33;
  } else {
   $36 = $27&255;
   $len$0 = $36;$normal$sroa$0$3$in = $26;
  }
  $37 = (($x2$0103) - ($len$0))|0;
  $38 = ($37|0)<(0);
  if ($38) {
   $_0$0$off0 = $current$0$off0104;
   label = 15;
   break;
  }
  $39 = $current$0$off0104 ^ 1;
  $40 = ($normal$sroa$0$3$in|0)==($13|0);
  if ($40) {
   $_0$0$off0 = $39;
   label = 15;
   break;
  } else {
   $current$0$off0104 = $39;$normal$sroa$0$0$in102 = $normal$sroa$0$3$in;$x2$0103 = $37;
  }
 }
 if ((label|0) == 15) {
  return ($_0$0$off0|0);
 }
 else if ((label|0) == 18) {
  __ZN4core9panicking5panic17hdf4baf73e8b6719eE(4032);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt8builders10DebugTuple5field17h80aed126205c0495E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink$i$i = 0, $$sink12$i$i = 0, $$sink8$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$0$0$i$i = 0;
 var $_15$i$i = 0, $_22$i$i = 0, $_38$sroa$4$0$$sroa_idx27$i$i = 0, $_38$sroa$5$0$$sroa_idx29$i$i = 0, $_38$sroa$6$0$$sroa_idx31$i$i = 0, $_38$sroa$7$0$$sroa_idx33$i$i = 0, $_38$sroa$8$0$$sroa_idx35$i$i = 0, $_45$i$i = 0, $_5$i$i$i = 0, $_5$sroa$0$0$$sroa_idx = 0, $_5$sroa$0$0$$sroa_idx$i23$i$i = 0, $_5$sroa$0$0$copyload = 0, $_5$sroa$4$0$$sroa_idx2$i24$i$i = 0, $prefix$i$i = 0, $space$i$i = 0, $switch$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_5$i$i$i = sp + 96|0;
 $_45$i$i = sp + 72|0;
 $_22$i$i = sp + 56|0;
 $_15$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $space$i$i = sp + 16|0;
 $prefix$i$i = sp + 8|0;
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_5$sroa$0$0$$sroa_idx = ((($0)) + 8|0);
 $_5$sroa$0$0$copyload = HEAP8[$_5$sroa$0$0$$sroa_idx>>0]|0;
 $4 = $value;
 $switch$i = ($_5$sroa$0$0$copyload<<24>>24)==(0);
 $5 = ((($0)) + 4|0);
 if (!($switch$i)) {
  $_0$sroa$0$0$i = 1;
  HEAP8[$_5$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  $36 = HEAP32[$5>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$5>>2] = $37;
  STACKTOP = sp;return ($0|0);
 }
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $$sink12$i$i = $7 ? 5815 : 5806;
 $$sink8$i$i = $7 ? 11236 : 14140;
 $$sink$i$i = $7&1;
 HEAP32[$prefix$i$i>>2] = $$sink12$i$i;
 $8 = ((($prefix$i$i)) + 4|0);
 HEAP32[$8>>2] = 1;
 HEAP32[$space$i$i>>2] = $$sink8$i$i;
 $9 = ((($space$i$i)) + 4|0);
 HEAP32[$9>>2] = $$sink$i$i;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 4;
 $13 = ($12|0)==(0);
 if ($13) {
  $24 = $prefix$i$i;
  $25 = $space$i$i;
  HEAP32[$_45$i$i>>2] = $24;
  $26 = ((($_45$i$i)) + 4|0);
  HEAP32[$26>>2] = (155);
  $27 = ((($_45$i$i)) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = ((($_45$i$i)) + 12|0);
  HEAP32[$28>>2] = (155);
  $29 = ((($_45$i$i)) + 16|0);
  HEAP32[$29>>2] = $4;
  $30 = ((($_45$i$i)) + 20|0);
  HEAP32[$30>>2] = (160);
  $31 = ((($10)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($10)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$_5$i$i$i>>2] = 4428;
  $_38$sroa$4$0$$sroa_idx27$i$i = ((($_5$i$i$i)) + 4|0);
  HEAP32[$_38$sroa$4$0$$sroa_idx27$i$i>>2] = 3;
  $_38$sroa$5$0$$sroa_idx29$i$i = ((($_5$i$i$i)) + 8|0);
  HEAP32[$_38$sroa$5$0$$sroa_idx29$i$i>>2] = 3716;
  $_38$sroa$6$0$$sroa_idx31$i$i = ((($_5$i$i$i)) + 12|0);
  HEAP32[$_38$sroa$6$0$$sroa_idx31$i$i>>2] = 3;
  $_38$sroa$7$0$$sroa_idx33$i$i = ((($_5$i$i$i)) + 16|0);
  HEAP32[$_38$sroa$7$0$$sroa_idx33$i$i>>2] = $_45$i$i;
  $_38$sroa$8$0$$sroa_idx35$i$i = ((($_5$i$i$i)) + 20|0);
  HEAP32[$_38$sroa$8$0$$sroa_idx35$i$i>>2] = 3;
  $35 = (__ZN4core3fmt5write17h450a6417baf49a9bE($32,$34,$_5$i$i$i)|0);
  $_0$sroa$0$0$i$i = $35;
 } else {
  $14 = $10;
  HEAP32[$writer$i$i>>2] = $14;
  $15 = ((($writer$i$i)) + 4|0);
  HEAP8[$15>>0] = 0;
  $16 = $prefix$i$i;
  HEAP32[$_22$i$i>>2] = $16;
  $17 = ((($_22$i$i)) + 4|0);
  HEAP32[$17>>2] = (155);
  $18 = ((($_22$i$i)) + 8|0);
  HEAP32[$18>>2] = $4;
  $19 = ((($_22$i$i)) + 12|0);
  HEAP32[$19>>2] = (160);
  HEAP32[$_15$i$i>>2] = 4340;
  $20 = ((($_15$i$i)) + 4|0);
  HEAP32[$20>>2] = 2;
  $_5$sroa$0$0$$sroa_idx$i23$i$i = ((($_15$i$i)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i23$i$i>>2] = 4356;
  $_5$sroa$4$0$$sroa_idx2$i24$i$i = ((($_15$i$i)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i24$i$i>>2] = 2;
  $21 = ((($_15$i$i)) + 16|0);
  HEAP32[$21>>2] = $_22$i$i;
  $22 = ((($_15$i$i)) + 20|0);
  HEAP32[$22>>2] = 2;
  $23 = (__ZN4core3fmt5write17h450a6417baf49a9bE($writer$i$i,2152,$_15$i$i)|0);
  $_0$sroa$0$0$i$i = $23;
 }
 $_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$_5$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
 $36 = HEAP32[$5>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$5>>2] = $37;
 STACKTOP = sp;return ($0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7527db06e3ec6d8aE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = ((($self)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 255]($0,$f)|0);
 return ($5|0);
}
function __ZN4core3ptr13drop_in_place17hee88afbf19fcdb4aE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h8882c7fa9e81277aE($self,$0,$1) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$cast$i$i$i$i$i = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$ph$iZ2D = 0, $$sink5$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $_0$0$i14$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i = 0, $_0$sroa$0$0 = 0, $_2$sroa$0$0$i$i$i = 0, $_2$sroa$6$0$i$i$i = 0, $_2$sroa$6$1$i$i$i = 0, $_4$sroa$4$0$ph$i$i$i$i$i = 0, $_5$sroa$6$0$i = 0, $_5$sroa$6$1$i = 0, $not$$i$i$i$i = 0, $or$cond$i$i$i$i28 = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp26$i$i$i$i$i$i$i = 0, $phitmp27$i$i$i$i$i$i$i = 0;
 var $s$sroa$0$044 = 0, $s$sroa$7$043 = 0, $split$0 = 0, $switch = 0, $switch7 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $_0$sroa$0$0 = 0;
  return ($_0$sroa$0$0|0);
 }
 $3 = ((($self)) + 4|0);
 $s$sroa$0$044 = $0;$s$sroa$7$043 = $1;
 while(1) {
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   $6 = HEAP32[$self>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($6)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_iiii[$12 & 255]($8,11237,4)|0);
   $switch = ($13<<24>>24)==(0);
   if (!($switch)) {
    $_0$sroa$0$0 = 1;
    label = 5;
    break;
   }
  }
  $14 = (($s$sroa$0$044) + ($s$sroa$7$043)|0);
  $15 = $s$sroa$0$044;
  $16 = $15;$_2$sroa$6$0$i$i$i = 0;$_5$sroa$6$0$i = 0;
  L9: while(1) {
   $$cast$i$i$i$i$i = $16;
   $17 = ($$cast$i$i$i$i$i|0)==($14|0);
   if ($17) {
    $79 = $16;$_2$sroa$0$0$i$i$i = 2;$_2$sroa$6$1$i$i$i = $_2$sroa$6$0$i$i$i;$_5$sroa$6$1$i = $_5$sroa$6$0$i;
   } else {
    $22 = ((($$cast$i$i$i$i$i)) + 1|0);
    $19 = HEAP8[$$cast$i$i$i$i$i>>0]|0;
    $31 = ($19<<24>>24)>(-1);
    $32 = $22;
    if ($31) {
     $18 = $19&255;
     $57 = $32;$_4$sroa$4$0$ph$i$i$i$i$i = $18;
    } else {
     $20 = $19 & 31;
     $21 = $20&255;
     $23 = ($22|0)==($14|0);
     if ($23) {
      $33 = $14;$80 = $32;$_0$0$i20$i$i$i$i$i$i$i = 0;
     } else {
      $24 = ((($$cast$i$i$i$i$i)) + 2|0);
      $25 = HEAP8[$22>>0]|0;
      $phitmp$i$i$i$i$i$i$i = $25 & 63;
      $26 = $24;
      $33 = $24;$80 = $26;$_0$0$i20$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i;
     }
     $27 = $21 << 6;
     $28 = $_0$0$i20$i$i$i$i$i$i$i&255;
     $29 = $28 | $27;
     $30 = ($19&255)>(223);
     if ($30) {
      $34 = ($33|0)==($14|0);
      if ($34) {
       $44 = $14;$81 = $80;$_0$0$i14$i$i$i$i$i$i$i = 0;
      } else {
       $35 = ((($33)) + 1|0);
       $36 = HEAP8[$33>>0]|0;
       $phitmp26$i$i$i$i$i$i$i = $36 & 63;
       $37 = $35;
       $44 = $35;$81 = $37;$_0$0$i14$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i;
      }
      $38 = $28 << 6;
      $39 = $_0$0$i14$i$i$i$i$i$i$i&255;
      $40 = $39 | $38;
      $41 = $21 << 12;
      $42 = $40 | $41;
      $43 = ($19&255)>(239);
      if ($43) {
       $45 = ($44|0)==($14|0);
       if ($45) {
        $82 = $81;$_0$0$i9$i$i$i$i$i$i$i = 0;
       } else {
        $46 = ((($44)) + 1|0);
        $47 = HEAP8[$44>>0]|0;
        $phitmp27$i$i$i$i$i$i$i = $47 & 63;
        $48 = $46;
        $82 = $48;$_0$0$i9$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i;
       }
       $49 = $21 << 18;
       $50 = $49 & 1835008;
       $51 = $40 << 6;
       $52 = $_0$0$i9$i$i$i$i$i$i$i&255;
       $53 = $51 | $50;
       $54 = $53 | $52;
       $57 = $82;$_4$sroa$4$0$ph$i$i$i$i$i = $54;
      } else {
       $57 = $81;$_4$sroa$4$0$ph$i$i$i$i$i = $42;
      }
     } else {
      $57 = $80;$_4$sroa$4$0$ph$i$i$i$i$i = $29;
     }
    }
    $55 = (($_5$sroa$6$0$i) - ($16))|0;
    $56 = (($55) + ($57))|0;
    $not$$i$i$i$i = ($_4$sroa$4$0$ph$i$i$i$i$i|0)!=(10);
    $$sink5$i$i$i$i = $not$$i$i$i$i&1;
    $79 = $57;$_2$sroa$0$0$i$i$i = $$sink5$i$i$i$i;$_2$sroa$6$1$i$i$i = $_5$sroa$6$0$i;$_5$sroa$6$1$i = $56;
   }
   $trunc$i$i$i = $_2$sroa$0$0$i$i$i&255;
   $trunc$i$i$i$clear = $trunc$i$i$i & 3;
   switch ($trunc$i$i$i$clear<<24>>24) {
   case 0:  {
    label = 22;
    break L9;
    break;
   }
   case 2:  {
    label = 21;
    break L9;
    break;
   }
   default: {
    $16 = $79;$_2$sroa$6$0$i$i$i = $_2$sroa$6$1$i$i$i;$_5$sroa$6$0$i = $_5$sroa$6$1$i;
   }
   }
  }
  if ((label|0) == 21) {
   label = 0;
   HEAP8[$3>>0] = 0;
   $split$0 = $s$sroa$7$043;
  }
  else if ((label|0) == 22) {
   label = 0;
   HEAP8[$3>>0] = 1;
   $58 = (($_2$sroa$6$1$i$i$i) + 1)|0;
   $split$0 = $58;
  }
  $59 = HEAP32[$self>>2]|0;
  $60 = ($split$0|0)==(0);
  $61 = ($s$sroa$7$043|0)==($split$0|0);
  $or$cond$i$i$i$i28 = $60 | $61;
  if (!($or$cond$i$i$i$i28)) {
   $62 = ($s$sroa$7$043>>>0)>($split$0>>>0);
   if (!($62)) {
    label = 26;
    break;
   }
   $63 = (($s$sroa$0$044) + ($split$0)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)>(-65);
   if (!($65)) {
    label = 26;
    break;
   }
  }
  $66 = ((($59)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($59)) + 28|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (FUNCTION_TABLE_iiii[$71 & 255]($67,$s$sroa$0$044,$split$0)|0);
  $switch7 = ($72<<24>>24)==(0);
  if (!($switch7)) {
   $_0$sroa$0$0 = 1;
   label = 5;
   break;
  }
  if ($or$cond$i$i$i$i28) {
   $$pre$i$i$i = (($s$sroa$0$044) + ($split$0)|0);
   $$pre$phi$i$i$ph$iZ2D = $$pre$i$i$i;
  } else {
   $73 = ($s$sroa$7$043>>>0)>($split$0>>>0);
   if (!($73)) {
    label = 32;
    break;
   }
   $74 = (($s$sroa$0$044) + ($split$0)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = ($75<<24>>24)>(-65);
   if ($76) {
    $$pre$phi$i$i$ph$iZ2D = $74;
   } else {
    label = 32;
    break;
   }
  }
  $77 = (($s$sroa$7$043) - ($split$0))|0;
  $78 = ($77|0)==(0);
  if ($78) {
   $_0$sroa$0$0 = 0;
   label = 5;
   break;
  } else {
   $s$sroa$0$044 = $$pre$phi$i$i$ph$iZ2D;$s$sroa$7$043 = $77;
  }
 }
 if ((label|0) == 5) {
  return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 26) {
  __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($s$sroa$0$044,$s$sroa$7$043,0,$split$0);
  // unreachable;
 }
 else if ((label|0) == 32) {
  __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($s$sroa$0$044,$s$sroa$7$043,$split$0,$s$sroa$7$043);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt5Write10write_char17h6d66b075142ab1ebE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0;
 var $len$1$i = 0, $len$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_10 = sp;
 HEAP32[$_10>>2] = 0;
 $0 = ($c>>>0)<(128);
 if ($0) {
  $1 = $c&255;
  HEAP8[$_10>>0] = $1;
  $len$2$i = 1;
  $35 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h8882c7fa9e81277aE($self,$_10,$len$2$i)|0);
  STACKTOP = sp;return ($35|0);
 }
 $2 = ($c>>>0)<(2048);
 do {
  if ($2) {
   $3 = $c >>> 6;
   $4 = $3 & 31;
   $5 = $4&255;
   $6 = $5 | -64;
   $$sink$i = $6;$$sink$sink$i = 1;$$sink15$i = $_10;$len$1$i = 2;
  } else {
   $7 = ($c>>>0)<(65536);
   if ($7) {
    $8 = $c >>> 12;
    $9 = $8 & 15;
    $10 = $9&255;
    $11 = $10 | -32;
    HEAP8[$_10>>0] = $11;
    $12 = $c >>> 6;
    $13 = $12 & 63;
    $14 = $13&255;
    $15 = ((($_10)) + 1|0);
    $16 = $14 | -128;
    $$sink$i = $16;$$sink$sink$i = 2;$$sink15$i = $15;$len$1$i = 3;
    break;
   } else {
    $17 = $c >>> 18;
    $18 = $17 & 7;
    $19 = $18&255;
    $20 = $19 | -16;
    HEAP8[$_10>>0] = $20;
    $21 = $c >>> 12;
    $22 = $21 & 63;
    $23 = $22&255;
    $24 = ((($_10)) + 1|0);
    $25 = $23 | -128;
    HEAP8[$24>>0] = $25;
    $26 = $c >>> 6;
    $27 = $26 & 63;
    $28 = $27&255;
    $29 = ((($_10)) + 2|0);
    $30 = $28 | -128;
    $$sink$i = $30;$$sink$sink$i = 3;$$sink15$i = $29;$len$1$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i>>0] = $$sink$i;
 $31 = $c & 63;
 $32 = $31&255;
 $33 = (($_10) + ($$sink$sink$i)|0);
 $34 = $32 | -128;
 HEAP8[$33>>0] = $34;
 $len$2$i = $len$1$i;
 $35 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h8882c7fa9e81277aE($self,$_10,$len$2$i)|0);
 STACKTOP = sp;return ($35|0);
}
function __ZN4core3fmt5Write9write_fmt17h6cfc1c3e572b4fcdE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self;
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0;
 $0 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6,2176,$_8)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr13drop_in_place17hb03963b2d0e909e3E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he7492b52cef34e1bE($self,$s$ptr,$s$meta) {
 $self = $self|0;
 $s$ptr = $s$ptr|0;
 $s$meta = $s$meta|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h8882c7fa9e81277aE($0,$s$ptr,$s$meta)|0);
 return ($1|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h0d11039e1390d6a3E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_10$i = 0, $len$1$i$i = 0, $len$2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_10$i = sp;
 $0 = HEAP32[$self>>2]|0;
 HEAP32[$_10$i>>2] = 0;
 $1 = ($c>>>0)<(128);
 if ($1) {
  $2 = $c&255;
  HEAP8[$_10$i>>0] = $2;
  $len$2$i$i = 1;
  $36 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h8882c7fa9e81277aE($0,$_10$i,$len$2$i$i)|0);
  STACKTOP = sp;return ($36|0);
 }
 $3 = ($c>>>0)<(2048);
 do {
  if ($3) {
   $4 = $c >>> 6;
   $5 = $4 & 31;
   $6 = $5&255;
   $7 = $6 | -64;
   $$sink$i$i = $7;$$sink$sink$i$i = 1;$$sink15$i$i = $_10$i;$len$1$i$i = 2;
  } else {
   $8 = ($c>>>0)<(65536);
   if ($8) {
    $9 = $c >>> 12;
    $10 = $9 & 15;
    $11 = $10&255;
    $12 = $11 | -32;
    HEAP8[$_10$i>>0] = $12;
    $13 = $c >>> 6;
    $14 = $13 & 63;
    $15 = $14&255;
    $16 = ((($_10$i)) + 1|0);
    $17 = $15 | -128;
    $$sink$i$i = $17;$$sink$sink$i$i = 2;$$sink15$i$i = $16;$len$1$i$i = 3;
    break;
   } else {
    $18 = $c >>> 18;
    $19 = $18 & 7;
    $20 = $19&255;
    $21 = $20 | -16;
    HEAP8[$_10$i>>0] = $21;
    $22 = $c >>> 12;
    $23 = $22 & 63;
    $24 = $23&255;
    $25 = ((($_10$i)) + 1|0);
    $26 = $24 | -128;
    HEAP8[$25>>0] = $26;
    $27 = $c >>> 6;
    $28 = $27 & 63;
    $29 = $28&255;
    $30 = ((($_10$i)) + 2|0);
    $31 = $29 | -128;
    $$sink$i$i = $31;$$sink$sink$i$i = 3;$$sink15$i$i = $30;$len$1$i$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
 $32 = $c & 63;
 $33 = $32&255;
 $34 = (($_10$i) + ($$sink$sink$i$i)|0);
 $35 = $33 | -128;
 HEAP8[$34>>0] = $35;
 $len$2$i$i = $len$1$i$i;
 $36 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h8882c7fa9e81277aE($0,$_10$i,$len$2$i$i)|0);
 STACKTOP = sp;return ($36|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hc31fb39594cd489dE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0;
 HEAP32[$_6$i>>2] = $0;
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0;
 $1 = (__ZN4core3fmt5write17h450a6417baf49a9bE($_6$i,2176,$_8$i)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17h115891ff7b31874eE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 255]($1,11241,11)|0);
 return ($6|0);
}
function __ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17h3a40997f09e04e38E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 255]($1,11252,14)|0);
 return ($6|0);
}
function __ZN76__LT_core__char__EscapeDefault_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h9f97e9bccb328c28E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$sink4$i$i = 0, $$sink4$v$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$self>>2]|0;
 $trunc = $1&255;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  HEAP32[$0>>2] = 0;
  return;
  break;
 }
 case 1:  {
  $2 = ((($self)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$self>>2] = 0;
  HEAP32[$0>>2] = 1;
  $4 = ((($0)) + 4|0);
  HEAP32[$4>>2] = $3;
  return;
  break;
 }
 case 2:  {
  HEAP32[$self>>2] = 1;
  HEAP32[$0>>2] = 1;
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = 92;
  return;
  break;
 }
 case 3:  {
  $6 = ((($self)) + 12|0);
  $trunc$i = HEAP8[$6>>0]|0;
  $trunc$i$clear = $trunc$i & 7;
  switch ($trunc$i$clear<<24>>24) {
  case 0:  {
   HEAP32[$0>>2] = 0;
   return;
   break;
  }
  case 1:  {
   HEAP8[$6>>0] = 0;
   HEAP32[$0>>2] = 1;
   $21 = ((($0)) + 4|0);
   HEAP32[$21>>2] = 125;
   return;
   break;
  }
  case 2:  {
   $10 = ((($self)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($self)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 << 2;
   $15 = $14 & 28;
   $16 = $11 >>> $15;
   $17 = $16 & 15;
   $18 = $17&255;
   $19 = ($18&255)<(10);
   $$sink4$v$i$i = $19 ? 48 : 87;
   $$sink4$i$i = (($$sink4$v$i$i) + ($17))|0;
   $20 = ($13|0)==(0);
   if ($20) {
    HEAP8[$6>>0] = 1;
   } else {
    $22 = (($13) + -1)|0;
    HEAP32[$12>>2] = $22;
   }
   HEAP32[$0>>2] = 1;
   $23 = ((($0)) + 4|0);
   HEAP32[$23>>2] = $$sink4$i$i;
   return;
   break;
  }
  case 3:  {
   HEAP8[$6>>0] = 2;
   HEAP32[$0>>2] = 1;
   $9 = ((($0)) + 4|0);
   HEAP32[$9>>2] = 123;
   return;
   break;
  }
  case 4:  {
   HEAP8[$6>>0] = 3;
   HEAP32[$0>>2] = 1;
   $8 = ((($0)) + 4|0);
   HEAP32[$8>>2] = 117;
   return;
   break;
  }
  case 5:  {
   HEAP8[$6>>0] = 4;
   HEAP32[$0>>2] = 1;
   $7 = ((($0)) + 4|0);
   HEAP32[$7>>2] = 92;
   return;
   break;
  }
  default: {
   // unreachable;
  }
  }
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h4dd91f6cd3836e26E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN76__LT_core__char__EscapeDefault_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h9f97e9bccb328c28E($0,$self);
 return;
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hc14e294a78a2c8eaE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0$0$i$i = 0, $_3$0$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$self>>2]|0;
 $trunc$i$i = $1&255;
 $trunc$i$i$clear = $trunc$i$i & 3;
 switch ($trunc$i$i$clear<<24>>24) {
 case 0:  {
  $_0$0$i$i = 0;
  break;
 }
 case 1:  {
  $_0$0$i$i = 1;
  break;
 }
 case 2:  {
  $_0$0$i$i = 2;
  break;
 }
 case 3:  {
  $2 = ((($self)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($self)) + 12|0);
  $trunc$i$i$i = HEAP8[$4>>0]|0;
  $trunc$i$i$i$clear = $trunc$i$i$i & 7;
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 0:  {
   $_3$0$i$i$i = 0;
   break;
  }
  case 1:  {
   $_3$0$i$i$i = 1;
   break;
  }
  case 2:  {
   $_3$0$i$i$i = 2;
   break;
  }
  case 3:  {
   $_3$0$i$i$i = 3;
   break;
  }
  case 4:  {
   $_3$0$i$i$i = 4;
   break;
  }
  case 5:  {
   $_3$0$i$i$i = 5;
   break;
  }
  default: {
   // unreachable;
  }
  }
  $5 = (($_3$0$i$i$i) + ($3))|0;
  $_0$0$i$i = $5;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$0>>2] = $_0$0$i$i;
 $_5$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 1;
 $_5$sroa$4$0$$sroa_idx2$i = ((($0)) + 8|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = $_0$0$i$i;
 return;
}
function __ZN4core6option13expect_failed17h6800fb08054f8544E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_2 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_9 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_9 = sp + 32|0;
 $_2 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = $msg;
 HEAP32[$_9>>2] = $3;
 $4 = ((($_9)) + 4|0);
 HEAP32[$4>>2] = (155);
 HEAP32[$_2>>2] = 4452;
 $5 = ((($_2)) + 4|0);
 HEAP32[$5>>2] = 1;
 $_5$sroa$0$0$$sroa_idx$i = ((($_2)) + 8|0);
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 4460;
 $_5$sroa$4$0$$sroa_idx2$i = ((($_2)) + 12|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1;
 $6 = ((($_2)) + 16|0);
 HEAP32[$6>>2] = $_9;
 $7 = ((($_2)) + 20|0);
 HEAP32[$7>>2] = 1;
 __ZN4core9panicking9panic_fmt17h340ca2c354a23edeE($_2,4496);
 // unreachable;
}
function __ZN4core3str7pattern11StrSearcher3new17h608fb1447ba385b9E($0,$haystack$ptr,$haystack$meta,$needle$ptr,$needle$meta) {
 $0 = $0|0;
 $haystack$ptr = $haystack$ptr|0;
 $haystack$meta = $haystack$meta|0;
 $needle$ptr = $needle$ptr|0;
 $needle$meta = $needle$meta|0;
 var $$20$$i$i = 0, $$20$$i70$i = 0, $$20$i$i = 0, $$20$i68$i = 0, $$21$i$i = 0, $$21$i40$i = 0, $$neg$i$i = 0, $$neg$i59$i = 0, $$neg24$i$i = 0, $$neg24$i60$i = 0, $$neg25$i$i = 0, $$neg26$i$i = 0, $$neg26$i63$i = 0, $$not$not$i35$i = 0, $$not$not$i66$i = 0, $$right$0$$i$i = 0, $$right$0$$i72$i = 0, $$right$0$$v$i$i = 0, $$right$0$$v$i71$i = 0, $$right$0$i$i = 0;
 var $$right$0$i41$i = 0, $$sink$i = 0, $$sink13$i = 0, $$sink15$i = 0, $$sink3$i = 0, $$sink5$i = 0, $$sink7$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$sroa$speculated$i$i$i = 0, $_0$0$sroa$speculated$i$i88$i = 0, $_13$sroa$4$0$$sroa_idx = 0, $_13$sroa$4$sroa$10$0$_13$sroa$4$0$$sroa_cast$sroa_idx54 = 0, $_13$sroa$4$sroa$3$0$_13$sroa$4$0$$sroa_cast$sroa_idx43 = 0;
 var $_13$sroa$4$sroa$4$0$_13$sroa$4$0$$sroa_cast$sroa_idx45 = 0, $_13$sroa$4$sroa$5$0$_13$sroa$4$0$$sroa_cast$sroa_cast = 0, $_13$sroa$4$sroa$6$0$_13$sroa$4$0$$sroa_cast$sroa_idx48 = 0, $_13$sroa$4$sroa$7$0$_13$sroa$4$0$$sroa_cast$sroa_cast = 0, $_13$sroa$4$sroa$8$0$_13$sroa$4$0$$sroa_cast$sroa_idx51 = 0, $_13$sroa$4$sroa$9$0$_13$sroa$4$0$$sroa_cast$sroa_cast = 0, $_7$sroa$4$sroa$0$0$_7$sroa$4$0$$sroa_cast$sroa_idx = 0, $_7$sroa$4$sroa$4$0$_7$sroa$4$0$$sroa_cast$sroa_idx17 = 0, $_7$sroa$4$sroa$5$0$_7$sroa$4$0$$sroa_cast$sroa_raw_idx = 0, $_7$sroa$4$sroa$6$0$_7$sroa$4$0$$sroa_cast$sroa_raw_idx = 0, $left$0$i$i = 0, $left$0$i56$i = 0, $left$0$ph$ph$lcssa33$i$i = 0, $left$0$ph$ph$lcssa33$i29$i = 0, $left$0$ph$ph$lcssa33$i93$i = 0, $left$0$ph$ph49$i$i = 0, $left$0$ph$ph49$i25$i = 0, $left$0$right$0$i$i = 0, $left$0$right$0$i73$i = 0, $left$1$i$i = 0;
 var $left$1$i58$i = 0, $left$2$i$i = 0, $left$2$i79$i = 0, $not$$i$i = 0, $not$$i42$i = 0, $not$34$i$i = 0, $not$34$i38$i = 0, $not$3440$i$i = 0, $not$3440$i44$i = 0, $offset$0$i$i = 0, $offset$0$i54$i = 0, $offset$035$i$i = 0, $offset$035$i32$i = 0, $offset$1$i$i = 0, $offset$1$i77$i = 0, $period$0$$i$i = 0, $period$0$$i69$i = 0, $period$0$i$i = 0, $period$0$i53$i = 0, $period$0$ph$lcssa32$i$i = 0;
 var $period$0$ph$lcssa32$i30$i = 0, $period$0$ph$lcssa32$i94$i = 0, $period$0$ph41$i$i = 0, $period$0$ph41$i27$i = 0, $period$1$i$i = 0, $period$1$i76$i = 0, $right$0$i$i = 0, $right$0$i55$i = 0, $right$036$i$i = 0, $right$036$i31$i = 0, $right$1$i$i = 0, $right$1$i78$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($needle$meta|0) {
 case 0:  {
  $1 = ((($0)) + 48|0);
  HEAP32[$1>>2] = $haystack$ptr;
  $2 = ((($0)) + 52|0);
  HEAP32[$2>>2] = $haystack$meta;
  $3 = ((($0)) + 56|0);
  HEAP32[$3>>2] = $needle$ptr;
  $4 = ((($0)) + 60|0);
  HEAP32[$4>>2] = 0;
  HEAP32[$0>>2] = 0;
  $_7$sroa$4$sroa$0$0$_7$sroa$4$0$$sroa_cast$sroa_idx = ((($0)) + 4|0);
  HEAP32[$_7$sroa$4$sroa$0$0$_7$sroa$4$0$$sroa_cast$sroa_idx>>2] = 0;
  $_7$sroa$4$sroa$4$0$_7$sroa$4$0$$sroa_cast$sroa_idx17 = ((($0)) + 8|0);
  HEAP32[$_7$sroa$4$sroa$4$0$_7$sroa$4$0$$sroa_cast$sroa_idx17>>2] = $haystack$meta;
  $_7$sroa$4$sroa$5$0$_7$sroa$4$0$$sroa_cast$sroa_raw_idx = ((($0)) + 12|0);
  HEAP8[$_7$sroa$4$sroa$5$0$_7$sroa$4$0$$sroa_cast$sroa_raw_idx>>0] = 1;
  $_7$sroa$4$sroa$6$0$_7$sroa$4$0$$sroa_cast$sroa_raw_idx = ((($0)) + 13|0);
  HEAP8[$_7$sroa$4$sroa$6$0$_7$sroa$4$0$$sroa_cast$sroa_raw_idx>>0] = 1;
  return;
  break;
 }
 case 1:  {
  $left$0$ph$ph$lcssa33$i29$i = 0;$left$0$ph$ph$lcssa33$i93$i = 0;$period$0$ph$lcssa32$i30$i = 1;$period$0$ph$lcssa32$i94$i = 1;
  break;
 }
 default: {
  $125 = 1;$left$0$ph$ph49$i$i = 0;
  label = 3;
 }
 }
 L4: do {
  if ((label|0) == 3) {
   L5: while(1) {
    label = 0;
    $126 = $125;$period$0$ph41$i$i = 1;
    L7: while(1) {
     $6 = $126;$offset$035$i$i = 0;$right$036$i$i = $126;
     while(1) {
      $5 = (($needle$ptr) + ($6)|0);
      $7 = HEAP8[$5>>0]|0;
      $8 = (($offset$035$i$i) + ($left$0$ph$ph49$i$i))|0;
      $9 = ($8>>>0)<($needle$meta>>>0);
      if (!($9)) {
       label = 6;
       break L5;
      }
      $10 = (($needle$ptr) + ($8)|0);
      $11 = HEAP8[$10>>0]|0;
      $12 = ($7&255)<($11&255);
      if ($12) {
       break;
      }
      $13 = ($7<<24>>24)==($11<<24>>24);
      if (!($13)) {
       break L7;
      }
      $17 = (($offset$035$i$i) + 1)|0;
      $18 = ($17|0)==($period$0$ph41$i$i|0);
      $$21$i$i = $18 ? 0 : $17;
      $19 = $18 ? $17 : 0;
      $$right$0$i$i = (($19) + ($right$036$i$i))|0;
      $20 = (($$right$0$i$i) + ($$21$i$i))|0;
      $not$$i$i = ($20>>>0)<($needle$meta>>>0);
      if ($not$$i$i) {
       $6 = $20;$offset$035$i$i = $$21$i$i;$right$036$i$i = $$right$0$i$i;
      } else {
       $left$0$ph$ph$lcssa33$i$i = $left$0$ph$ph49$i$i;$period$0$ph$lcssa32$i$i = $period$0$ph41$i$i;
       break L5;
      }
     }
     $14 = (($right$036$i$i) + 1)|0;
     $15 = (($14) + ($offset$035$i$i))|0;
     $16 = (($15) - ($left$0$ph$ph49$i$i))|0;
     $not$34$i$i = ($15>>>0)<($needle$meta>>>0);
     if ($not$34$i$i) {
      $126 = $15;$period$0$ph41$i$i = $16;
     } else {
      $left$0$ph$ph$lcssa33$i$i = $left$0$ph$ph49$i$i;$period$0$ph$lcssa32$i$i = $16;
      break L5;
     }
    }
    $21 = (($right$036$i$i) + 1)|0;
    $not$3440$i$i = ($21>>>0)<($needle$meta>>>0);
    if ($not$3440$i$i) {
     $125 = $21;$left$0$ph$ph49$i$i = $right$036$i$i;
     label = 3;
    } else {
     $left$0$ph$ph$lcssa33$i$i = $right$036$i$i;$period$0$ph$lcssa32$i$i = 1;
     break;
    }
   }
   if ((label|0) == 6) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3524,$8,$needle$meta);
    // unreachable;
   }
   $127 = 1;$left$0$ph$ph49$i25$i = 0;
   L19: while(1) {
    $128 = $127;$period$0$ph41$i27$i = 1;
    L21: while(1) {
     $23 = $128;$offset$035$i32$i = 0;$right$036$i31$i = $128;
     while(1) {
      $22 = (($needle$ptr) + ($23)|0);
      $24 = HEAP8[$22>>0]|0;
      $25 = (($offset$035$i32$i) + ($left$0$ph$ph49$i25$i))|0;
      $26 = ($25>>>0)<($needle$meta>>>0);
      if (!($26)) {
       break L19;
      }
      $27 = (($needle$ptr) + ($25)|0);
      $28 = HEAP8[$27>>0]|0;
      $$not$not$i35$i = ($24&255)>($28&255);
      if ($$not$not$i35$i) {
       break;
      }
      $29 = ($24<<24>>24)==($28<<24>>24);
      if (!($29)) {
       break L21;
      }
      $33 = (($offset$035$i32$i) + 1)|0;
      $34 = ($33|0)==($period$0$ph41$i27$i|0);
      $$21$i40$i = $34 ? 0 : $33;
      $35 = $34 ? $33 : 0;
      $$right$0$i41$i = (($35) + ($right$036$i31$i))|0;
      $36 = (($$right$0$i41$i) + ($$21$i40$i))|0;
      $not$$i42$i = ($36>>>0)<($needle$meta>>>0);
      if ($not$$i42$i) {
       $23 = $36;$offset$035$i32$i = $$21$i40$i;$right$036$i31$i = $$right$0$i41$i;
      } else {
       $left$0$ph$ph$lcssa33$i29$i = $left$0$ph$ph49$i25$i;$left$0$ph$ph$lcssa33$i93$i = $left$0$ph$ph$lcssa33$i$i;$period$0$ph$lcssa32$i30$i = $period$0$ph41$i27$i;$period$0$ph$lcssa32$i94$i = $period$0$ph$lcssa32$i$i;
       break L4;
      }
     }
     $30 = (($right$036$i31$i) + 1)|0;
     $31 = (($30) + ($offset$035$i32$i))|0;
     $32 = (($31) - ($left$0$ph$ph49$i25$i))|0;
     $not$34$i38$i = ($31>>>0)<($needle$meta>>>0);
     if ($not$34$i38$i) {
      $128 = $31;$period$0$ph41$i27$i = $32;
     } else {
      $left$0$ph$ph$lcssa33$i29$i = $left$0$ph$ph49$i25$i;$left$0$ph$ph$lcssa33$i93$i = $left$0$ph$ph$lcssa33$i$i;$period$0$ph$lcssa32$i30$i = $32;$period$0$ph$lcssa32$i94$i = $period$0$ph$lcssa32$i$i;
      break L4;
     }
    }
    $37 = (($right$036$i31$i) + 1)|0;
    $not$3440$i44$i = ($37>>>0)<($needle$meta>>>0);
    if ($not$3440$i44$i) {
     $127 = $37;$left$0$ph$ph49$i25$i = $right$036$i31$i;
    } else {
     $left$0$ph$ph$lcssa33$i29$i = $right$036$i31$i;$left$0$ph$ph$lcssa33$i93$i = $left$0$ph$ph$lcssa33$i$i;$period$0$ph$lcssa32$i30$i = 1;$period$0$ph$lcssa32$i94$i = $period$0$ph$lcssa32$i$i;
     break L4;
    }
   }
   __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3524,$25,$needle$meta);
   // unreachable;
  }
 } while(0);
 $38 = ($left$0$ph$ph$lcssa33$i93$i>>>0)>($left$0$ph$ph$lcssa33$i29$i>>>0);
 $$sink3$i = $38 ? $left$0$ph$ph$lcssa33$i93$i : $left$0$ph$ph$lcssa33$i29$i;
 $$sink$i = $38 ? $period$0$ph$lcssa32$i94$i : $period$0$ph$lcssa32$i30$i;
 $39 = ($$sink3$i>>>0)>($needle$meta>>>0);
 if ($39) {
  __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($$sink3$i,$needle$meta);
  // unreachable;
 }
 $40 = (($$sink$i) + ($$sink3$i))|0;
 $41 = ($40>>>0)<($$sink$i>>>0);
 if ($41) {
  __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($$sink$i,$40);
  // unreachable;
 }
 $42 = ($40>>>0)>($needle$meta>>>0);
 if ($42) {
  __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($40,$needle$meta);
  // unreachable;
 }
 $43 = (($needle$ptr) + ($$sink$i)|0);
 $44 = ($$sink$i|0)==(0);
 if ($44) {
  label = 30;
 } else {
  $45 = (_memcmp($needle$ptr,$43,$$sink3$i)|0);
  $46 = ($45|0)==(0);
  if ($46) {
   label = 30;
  } else {
   $99 = (($needle$meta) - ($$sink3$i))|0;
   $100 = ($99>>>0)>=($$sink3$i>>>0);
   $_0$0$sroa$speculated$i$i88$i = $100 ? $99 : $$sink3$i;
   $101 = (($needle$ptr) + ($needle$meta)|0);
   $103 = $needle$ptr;$110 = 0;$112 = 0;
   while(1) {
    $102 = ((($103)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104 & 63;
    $106 = $105&255;
    $107 = (_bitshift64Shl(1,0,($106|0))|0);
    $108 = tempRet0;
    $109 = $107 | $110;
    $111 = $108 | $112;
    $113 = ($102|0)==($101|0);
    if ($113) {
     break;
    } else {
     $103 = $102;$110 = $109;$112 = $111;
    }
   }
   $114 = (($_0$0$sroa$speculated$i$i88$i) + 1)|0;
   $$sink13$i = $114;$$sink15$i = $$sink3$i;$$sink5$i = -1;$$sink7$i = -1;$121 = $109;$124 = $111;
  }
 }
 do {
  if ((label|0) == 30) {
   $$neg25$i$i = (($needle$meta) + -1)|0;
   $left$0$i$i = 0;$offset$0$i$i = 0;$period$0$i$i = 1;$right$0$i$i = 1;
   while(1) {
    $47 = (($right$0$i$i) + ($offset$0$i$i))|0;
    $48 = ($47>>>0)<($needle$meta>>>0);
    if (!($48)) {
     $left$1$i$i = $left$0$i$i;
     label = 40;
     break;
    }
    $$neg$i$i = $right$0$i$i ^ -1;
    $$neg24$i$i = (($needle$meta) - ($offset$0$i$i))|0;
    $49 = (($$neg24$i$i) + ($$neg$i$i))|0;
    $50 = ($49>>>0)<($needle$meta>>>0);
    if (!($50)) {
     label = 33;
     break;
    }
    $51 = (($needle$ptr) + ($49)|0);
    $52 = HEAP8[$51>>0]|0;
    $$neg26$i$i = (($$neg25$i$i) - ($offset$0$i$i))|0;
    $53 = (($$neg26$i$i) - ($left$0$i$i))|0;
    $54 = ($53>>>0)<($needle$meta>>>0);
    if (!($54)) {
     label = 35;
     break;
    }
    $55 = (($needle$ptr) + ($53)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = ($52&255)<($56&255);
    if ($57) {
     $62 = (($offset$0$i$i) + 1)|0;
     $63 = (($62) + ($right$0$i$i))|0;
     $64 = (($63) - ($left$0$i$i))|0;
     $left$2$i$i = $left$0$i$i;$offset$1$i$i = 0;$period$1$i$i = $64;$right$1$i$i = $63;
    } else {
     $58 = ($52<<24>>24)==($56<<24>>24);
     $59 = (($offset$0$i$i) + 1)|0;
     $60 = ($59|0)==($period$0$i$i|0);
     $$20$i$i = $60 ? 0 : $59;
     $61 = $60 ? $59 : 0;
     $period$0$$i$i = $58 ? $period$0$i$i : 1;
     $$20$$i$i = $58 ? $$20$i$i : 0;
     $$right$0$$v$i$i = $58 ? $61 : 1;
     $$right$0$$i$i = (($$right$0$$v$i$i) + ($right$0$i$i))|0;
     $left$0$right$0$i$i = $58 ? $left$0$i$i : $right$0$i$i;
     $left$2$i$i = $left$0$right$0$i$i;$offset$1$i$i = $$20$$i$i;$period$1$i$i = $period$0$$i$i;$right$1$i$i = $$right$0$$i$i;
    }
    $65 = ($period$1$i$i|0)==($$sink$i|0);
    if ($65) {
     $left$1$i$i = $left$2$i$i;
     label = 40;
     break;
    } else {
     $left$0$i$i = $left$2$i$i;$offset$0$i$i = $offset$1$i$i;$period$0$i$i = $period$1$i$i;$right$0$i$i = $right$1$i$i;
    }
   }
   if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3524,$49,$needle$meta);
    // unreachable;
   }
   else if ((label|0) == 35) {
    __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3524,$53,$needle$meta);
    // unreachable;
   }
   else if ((label|0) == 40) {
    $left$0$i56$i = 0;$offset$0$i54$i = 0;$period$0$i53$i = 1;$right$0$i55$i = 1;
    while(1) {
     $66 = (($right$0$i55$i) + ($offset$0$i54$i))|0;
     $67 = ($66>>>0)<($needle$meta>>>0);
     if (!($67)) {
      $left$1$i58$i = $left$0$i56$i;
      label = 50;
      break;
     }
     $$neg$i59$i = $right$0$i55$i ^ -1;
     $$neg24$i60$i = (($needle$meta) - ($offset$0$i54$i))|0;
     $68 = (($$neg24$i60$i) + ($$neg$i59$i))|0;
     $69 = ($68>>>0)<($needle$meta>>>0);
     if (!($69)) {
      label = 43;
      break;
     }
     $70 = (($needle$ptr) + ($68)|0);
     $71 = HEAP8[$70>>0]|0;
     $$neg26$i63$i = (($$neg25$i$i) - ($offset$0$i54$i))|0;
     $72 = (($$neg26$i63$i) - ($left$0$i56$i))|0;
     $73 = ($72>>>0)<($needle$meta>>>0);
     if (!($73)) {
      label = 45;
      break;
     }
     $74 = (($needle$ptr) + ($72)|0);
     $75 = HEAP8[$74>>0]|0;
     $$not$not$i66$i = ($71&255)>($75&255);
     if ($$not$not$i66$i) {
      $80 = (($offset$0$i54$i) + 1)|0;
      $81 = (($80) + ($right$0$i55$i))|0;
      $82 = (($81) - ($left$0$i56$i))|0;
      $left$2$i79$i = $left$0$i56$i;$offset$1$i77$i = 0;$period$1$i76$i = $82;$right$1$i78$i = $81;
     } else {
      $76 = ($71<<24>>24)==($75<<24>>24);
      $77 = (($offset$0$i54$i) + 1)|0;
      $78 = ($77|0)==($period$0$i53$i|0);
      $$20$i68$i = $78 ? 0 : $77;
      $79 = $78 ? $77 : 0;
      $period$0$$i69$i = $76 ? $period$0$i53$i : 1;
      $$20$$i70$i = $76 ? $$20$i68$i : 0;
      $$right$0$$v$i71$i = $76 ? $79 : 1;
      $$right$0$$i72$i = (($$right$0$$v$i71$i) + ($right$0$i55$i))|0;
      $left$0$right$0$i73$i = $76 ? $left$0$i56$i : $right$0$i55$i;
      $left$2$i79$i = $left$0$right$0$i73$i;$offset$1$i77$i = $$20$$i70$i;$period$1$i76$i = $period$0$$i69$i;$right$1$i78$i = $$right$0$$i72$i;
     }
     $83 = ($period$1$i76$i|0)==($$sink$i|0);
     if ($83) {
      $left$1$i58$i = $left$2$i79$i;
      label = 50;
      break;
     } else {
      $left$0$i56$i = $left$2$i79$i;$offset$0$i54$i = $offset$1$i77$i;$period$0$i53$i = $period$1$i76$i;$right$0$i55$i = $right$1$i78$i;
     }
    }
    if ((label|0) == 43) {
     __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3524,$68,$needle$meta);
     // unreachable;
    }
    else if ((label|0) == 45) {
     __ZN4core9panicking18panic_bounds_check17hbb625994aed54df2E(3524,$72,$needle$meta);
     // unreachable;
    }
    else if ((label|0) == 50) {
     $84 = ($left$1$i58$i>>>0)>=($left$1$i$i>>>0);
     $_0$0$sroa$speculated$i$i$i = $84 ? $left$1$i58$i : $left$1$i$i;
     $85 = (($needle$meta) - ($_0$0$sroa$speculated$i$i$i))|0;
     $86 = ($$sink$i>>>0)>($needle$meta>>>0);
     if ($86) {
      __ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE($$sink$i,$needle$meta);
      // unreachable;
     }
     if ($44) {
      $$sink13$i = 0;$$sink15$i = $85;$$sink5$i = $needle$meta;$$sink7$i = 0;$121 = 0;$124 = 0;
      break;
     } else {
      $88 = $needle$ptr;$95 = 0;$97 = 0;
     }
     while(1) {
      $87 = ((($88)) + 1|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = $89 & 63;
      $91 = $90&255;
      $92 = (_bitshift64Shl(1,0,($91|0))|0);
      $93 = tempRet0;
      $94 = $92 | $95;
      $96 = $93 | $97;
      $98 = ($87|0)==($43|0);
      if ($98) {
       $$sink13$i = $$sink$i;$$sink15$i = $85;$$sink5$i = $needle$meta;$$sink7$i = 0;$121 = $94;$124 = $96;
       break;
      } else {
       $88 = $87;$95 = $94;$97 = $96;
      }
     }
    }
   }
  }
 } while(0);
 $115 = ((($0)) + 48|0);
 HEAP32[$115>>2] = $haystack$ptr;
 $116 = ((($0)) + 52|0);
 HEAP32[$116>>2] = $haystack$meta;
 $117 = ((($0)) + 56|0);
 HEAP32[$117>>2] = $needle$ptr;
 $118 = ((($0)) + 60|0);
 HEAP32[$118>>2] = $needle$meta;
 HEAP32[$0>>2] = 1;
 $_13$sroa$4$0$$sroa_idx = ((($0)) + 4|0);
 $_13$sroa$4$sroa$3$0$_13$sroa$4$0$$sroa_cast$sroa_idx43 = ((($0)) + 8|0);
 $119 = $_13$sroa$4$sroa$3$0$_13$sroa$4$0$$sroa_cast$sroa_idx43;
 $120 = $119;
 HEAP32[$120>>2] = $121;
 $122 = (($119) + 4)|0;
 $123 = $122;
 HEAP32[$123>>2] = $124;
 $_13$sroa$4$sroa$4$0$_13$sroa$4$0$$sroa_cast$sroa_idx45 = ((($0)) + 16|0);
 HEAP32[$_13$sroa$4$sroa$4$0$_13$sroa$4$0$$sroa_cast$sroa_idx45>>2] = $$sink3$i;
 $_13$sroa$4$sroa$5$0$_13$sroa$4$0$$sroa_cast$sroa_cast = ((($_13$sroa$4$0$$sroa_idx)) + 16|0);
 HEAP32[$_13$sroa$4$sroa$5$0$_13$sroa$4$0$$sroa_cast$sroa_cast>>2] = $$sink15$i;
 $_13$sroa$4$sroa$6$0$_13$sroa$4$0$$sroa_cast$sroa_idx48 = ((($0)) + 24|0);
 HEAP32[$_13$sroa$4$sroa$6$0$_13$sroa$4$0$$sroa_cast$sroa_idx48>>2] = $$sink13$i;
 $_13$sroa$4$sroa$7$0$_13$sroa$4$0$$sroa_cast$sroa_cast = ((($_13$sroa$4$0$$sroa_idx)) + 24|0);
 HEAP32[$_13$sroa$4$sroa$7$0$_13$sroa$4$0$$sroa_cast$sroa_cast>>2] = 0;
 $_13$sroa$4$sroa$8$0$_13$sroa$4$0$$sroa_cast$sroa_idx51 = ((($0)) + 32|0);
 HEAP32[$_13$sroa$4$sroa$8$0$_13$sroa$4$0$$sroa_cast$sroa_idx51>>2] = $haystack$meta;
 $_13$sroa$4$sroa$9$0$_13$sroa$4$0$$sroa_cast$sroa_cast = ((($_13$sroa$4$0$$sroa_idx)) + 32|0);
 HEAP32[$_13$sroa$4$sroa$9$0$_13$sroa$4$0$$sroa_cast$sroa_cast>>2] = $$sink7$i;
 $_13$sroa$4$sroa$10$0$_13$sroa$4$0$$sroa_cast$sroa_idx54 = ((($0)) + 40|0);
 HEAP32[$_13$sroa$4$sroa$10$0$_13$sroa$4$0$$sroa_cast$sroa_idx54>>2] = $$sink5$i;
 return;
}
function __ZN4core3str9from_utf817h350e3a6fdb8dca1aE($0,$v$ptr,$v$meta) {
 $0 = $0|0;
 $v$ptr = $v$ptr|0;
 $v$meta = $v$meta|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$0$0$copyload = 0, $_3$sroa$5$0$$sroa_idx10 = 0, $_4 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4 = sp;
 __ZN4core3str19run_utf8_validation17h6c7c0cd110b2b92eE($_4,$v$ptr,$v$meta);
 $_3$sroa$0$0$copyload = HEAP32[$_4>>2]|0;
 $_3$sroa$5$0$$sroa_idx10 = ((($_4)) + 4|0);
 $1 = $_3$sroa$5$0$$sroa_idx10;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $switch = ($_3$sroa$0$0$copyload|0)==(1);
 if ($switch) {
  HEAP32[$0>>2] = 1;
  $9 = ((($0)) + 4|0);
  $10 = $9;
  $11 = $10;
  HEAP32[$11>>2] = $3;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $6;
  STACKTOP = sp;return;
 } else {
  HEAP32[$0>>2] = 0;
  $7 = ((($0)) + 4|0);
  HEAP32[$7>>2] = $v$ptr;
  $8 = ((($0)) + 8|0);
  HEAP32[$8>>2] = $v$meta;
  STACKTOP = sp;return;
 }
}
function __ZN4core3str19run_utf8_validation17h6c7c0cd110b2b92eE($0,$v$ptr,$v$meta) {
 $0 = $0|0;
 $v$ptr = $v$ptr|0;
 $v$meta = $v$meta|0;
 var $$ = 0, $$off = 0, $$off211 = 0, $$off213 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $_110$sroa$4$sroa$0$0$_110$sroa$4$0$$sroa_idx$sroa_idx = 0, $_125$sroa$4$sroa$0$0$_125$sroa$4$0$$sroa_idx$sroa_idx = 0, $_125$sroa$4$sroa$4$0$_125$sroa$4$0$$sroa_idx$sroa_idx = 0, $_136$sroa$4$sroa$0$0$_136$sroa$4$0$$sroa_idx$sroa_idx = 0, $_144$sroa$4$sroa$0$0$_144$sroa$4$0$$sroa_idx$sroa_idx = 0;
 var $_144$sroa$4$sroa$4$0$_144$sroa$4$0$$sroa_idx$sroa_idx = 0, $_154$sroa$4$sroa$0$0$_154$sroa$4$0$$sroa_idx$sroa_idx = 0, $_162$sroa$4$sroa$0$0$_162$sroa$4$0$$sroa_idx$sroa_idx = 0, $_162$sroa$4$sroa$4$0$_162$sroa$4$0$$sroa_idx$sroa_idx = 0, $_165$sroa$4$sroa$0$0$_165$sroa$4$0$$sroa_idx$sroa_idx = 0, $_165$sroa$4$sroa$4$0$_165$sroa$4$0$$sroa_idx$sroa_idx = 0, $_43$sroa$4$sroa$0$0$_43$sroa$4$0$$sroa_idx$sroa_idx = 0, $_51$sroa$4$sroa$0$0$_51$sroa$4$0$$sroa_idx$sroa_idx = 0, $_51$sroa$4$sroa$4$0$_51$sroa$4$0$$sroa_idx$sroa_idx = 0, $_62$sroa$4$sroa$0$0$_62$sroa$4$0$$sroa_idx$sroa_idx = 0, $_81$sroa$4$sroa$0$0$_81$sroa$4$0$$sroa_idx$sroa_idx = 0, $_81$sroa$4$sroa$4$0$_81$sroa$4$0$$sroa_idx$sroa_idx = 0, $_91$sroa$4$sroa$0$0$_91$sroa$4$0$$sroa_idx$sroa_idx = 0, $_99$sroa$4$sroa$0$0$_99$sroa$4$0$$sroa_idx$sroa_idx = 0, $_99$sroa$4$sroa$4$0$_99$sroa$4$0$$sroa_idx$sroa_idx = 0, $cond = 0, $cond10 = 0, $cond11 = 0, $cond9 = 0, $index$0$be = 0;
 var $index$0233 = 0, $index$1 = 0, $index$2$lcssa = 0, $index$2228 = 0, $index$3230 = 0, $or$cond184 = 0, $or$cond185 = 0, $or$cond186 = 0, $or$cond187 = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or$cond195 = 0, $or$cond196 = 0, $or$cond197 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($v$meta>>>0)>(7);
 $2 = (($v$meta) + -7)|0;
 $$ = $1 ? $2 : 0;
 $3 = ($v$meta|0)==(0);
 L1: do {
  if (!($3)) {
   $index$0233 = 0;
   L2: while(1) {
    $4 = (($v$ptr) + ($index$0233)|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = ($5<<24>>24)<(0);
    L4: do {
     if ($6) {
      $11 = $5&255;
      $12 = (9066 + ($11)|0);
      $13 = HEAP8[$12>>0]|0;
      switch ($13<<24>>24) {
      case 2:  {
       $14 = (($index$0233) + 1)|0;
       $15 = ($14>>>0)<($v$meta>>>0);
       if (!($15)) {
        label = 12;
        break L2;
       }
       $23 = (($v$ptr) + ($14)|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = $24 & -64;
       $26 = ($25<<24>>24)==(-128);
       if ($26) {
        $index$1 = $14;
       } else {
        label = 15;
        break L2;
       }
       break;
      }
      case 3:  {
       $16 = (($index$0233) + 1)|0;
       $17 = ($16>>>0)<($v$meta>>>0);
       if (!($17)) {
        label = 16;
        break L2;
       }
       $29 = (($v$ptr) + ($16)|0);
       $30 = HEAP8[$29>>0]|0;
       $cond10 = ($5<<24>>24)==(-32);
       $31 = ($30&255)<(192);
       $32 = $30 & -32;
       $33 = ($32<<24>>24)==(-96);
       $34 = $cond10 & $33;
       if (!($34)) {
        $$off213 = (($5) + 31)<<24>>24;
        $38 = ($$off213&255)<(12);
        $39 = ($30<<24>>24)<(0);
        $or$cond184 = $38 & $39;
        $or$cond185 = $31 & $or$cond184;
        if (!($or$cond185)) {
         $cond11 = ($5<<24>>24)==(-19);
         $or$cond186 = $cond11 & $39;
         $40 = ($30&255)<(160);
         $or$cond187 = $40 & $or$cond186;
         if (!($or$cond187)) {
          $41 = $5 & -2;
          $42 = ($41<<24>>24)==(-18);
          $or$cond189 = $42 & $39;
          $or$cond190 = $31 & $or$cond189;
          if (!($or$cond190)) {
           label = 19;
           break L2;
          }
         }
        }
       }
       $35 = (($index$0233) + 2)|0;
       $36 = ($35>>>0)<($v$meta>>>0);
       if (!($36)) {
        label = 23;
        break L2;
       }
       $44 = (($v$ptr) + ($35)|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45 & -64;
       $47 = ($46<<24>>24)==(-128);
       if ($47) {
        $index$1 = $35;
       } else {
        label = 25;
        break L2;
       }
       break;
      }
      case 4:  {
       $18 = (($index$0233) + 1)|0;
       $19 = ($18>>>0)<($v$meta>>>0);
       if (!($19)) {
        label = 26;
        break L2;
       }
       $50 = (($v$ptr) + ($18)|0);
       $51 = HEAP8[$50>>0]|0;
       $cond = ($5<<24>>24)==(-16);
       $$off = (($51) + 112)<<24>>24;
       $52 = ($$off&255)<(48);
       $53 = $cond & $52;
       if (!($53)) {
        $57 = ($51&255)<(192);
        $$off211 = (($5) + 15)<<24>>24;
        $58 = ($$off211&255)<(3);
        $59 = ($51<<24>>24)<(0);
        $or$cond194 = $58 & $59;
        $or$cond195 = $57 & $or$cond194;
        if (!($or$cond195)) {
         $cond9 = ($5<<24>>24)==(-12);
         $or$cond196 = $cond9 & $59;
         $60 = ($51&255)<(144);
         $or$cond197 = $60 & $or$cond196;
         if (!($or$cond197)) {
          label = 29;
          break L2;
         }
        }
       }
       $54 = (($index$0233) + 2)|0;
       $55 = ($54>>>0)<($v$meta>>>0);
       if (!($55)) {
        label = 32;
        break L2;
       }
       $62 = (($v$ptr) + ($54)|0);
       $63 = HEAP8[$62>>0]|0;
       $64 = $63 & -64;
       $65 = ($64<<24>>24)==(-128);
       if (!($65)) {
        label = 34;
        break L2;
       }
       $67 = (($index$0233) + 3)|0;
       $68 = ($67>>>0)<($v$meta>>>0);
       if (!($68)) {
        label = 36;
        break L2;
       }
       $70 = (($v$ptr) + ($67)|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = $71 & -64;
       $73 = ($72<<24>>24)==(-128);
       if ($73) {
        $index$1 = $67;
       } else {
        label = 38;
        break L2;
       }
       break;
      }
      default: {
       label = 10;
       break L2;
      }
      }
      $21 = (($index$1) + 1)|0;
      $index$0$be = $21;
     } else {
      $7 = $4;
      $8 = $7 & 3;
      $9 = ($8|0)==(0);
      if (!($9)) {
       $75 = (($index$0233) + 1)|0;
       $index$0$be = $75;
       break;
      }
      $10 = ($index$0233>>>0)<($$>>>0);
      L31: do {
       if ($10) {
        $index$2228 = $index$0233;
        while(1) {
         $77 = (($v$ptr) + ($index$2228)|0);
         $78 = HEAP32[$77>>2]|0;
         $79 = ((($77)) + 4|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = $80 | $78;
         $82 = $81 & -2139062144;
         $83 = ($82|0)==(0);
         if (!($83)) {
          $index$2$lcssa = $index$2228;
          break L31;
         }
         $85 = (($index$2228) + 8)|0;
         $86 = ($85>>>0)<($$>>>0);
         if ($86) {
          $index$2228 = $85;
         } else {
          $index$2$lcssa = $85;
          break;
         }
        }
       } else {
        $index$2$lcssa = $index$0233;
       }
      } while(0);
      $84 = ($index$2$lcssa>>>0)<($v$meta>>>0);
      if ($84) {
       $index$3230 = $index$2$lcssa;
       while(1) {
        $87 = (($v$ptr) + ($index$3230)|0);
        $88 = HEAP8[$87>>0]|0;
        $89 = ($88<<24>>24)>(-1);
        if (!($89)) {
         $index$0$be = $index$3230;
         break L4;
        }
        $90 = (($index$3230) + 1)|0;
        $91 = ($90>>>0)<($v$meta>>>0);
        if ($91) {
         $index$3230 = $90;
        } else {
         $index$0$be = $90;
         break;
        }
       }
      } else {
       $index$0$be = $index$2$lcssa;
      }
     }
    } while(0);
    $76 = ($index$0$be>>>0)<($v$meta>>>0);
    if ($76) {
     $index$0233 = $index$0$be;
    } else {
     break L1;
    }
   }
   switch (label|0) {
    case 10: {
     HEAP32[$0>>2] = 1;
     $20 = ((($0)) + 4|0);
     HEAP32[$20>>2] = $index$0233;
     $_165$sroa$4$sroa$0$0$_165$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_165$sroa$4$sroa$0$0$_165$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_165$sroa$4$sroa$4$0$_165$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_165$sroa$4$sroa$4$0$_165$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 12: {
     HEAP32[$0>>2] = 1;
     $22 = ((($0)) + 4|0);
     HEAP32[$22>>2] = $index$0233;
     $_43$sroa$4$sroa$0$0$_43$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_43$sroa$4$sroa$0$0$_43$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 15: {
     HEAP32[$0>>2] = 1;
     $27 = ((($0)) + 4|0);
     HEAP32[$27>>2] = $index$0233;
     $_51$sroa$4$sroa$0$0$_51$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_51$sroa$4$sroa$0$0$_51$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_51$sroa$4$sroa$4$0$_51$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_51$sroa$4$sroa$4$0$_51$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 16: {
     HEAP32[$0>>2] = 1;
     $28 = ((($0)) + 4|0);
     HEAP32[$28>>2] = $index$0233;
     $_62$sroa$4$sroa$0$0$_62$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_62$sroa$4$sroa$0$0$_62$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 19: {
     HEAP32[$0>>2] = 1;
     $37 = ((($0)) + 4|0);
     HEAP32[$37>>2] = $index$0233;
     $_81$sroa$4$sroa$0$0$_81$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_81$sroa$4$sroa$0$0$_81$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_81$sroa$4$sroa$4$0$_81$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_81$sroa$4$sroa$4$0$_81$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 23: {
     HEAP32[$0>>2] = 1;
     $43 = ((($0)) + 4|0);
     HEAP32[$43>>2] = $index$0233;
     $_91$sroa$4$sroa$0$0$_91$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_91$sroa$4$sroa$0$0$_91$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 25: {
     HEAP32[$0>>2] = 1;
     $48 = ((($0)) + 4|0);
     HEAP32[$48>>2] = $index$0233;
     $_99$sroa$4$sroa$0$0$_99$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_99$sroa$4$sroa$0$0$_99$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_99$sroa$4$sroa$4$0$_99$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_99$sroa$4$sroa$4$0$_99$sroa$4$0$$sroa_idx$sroa_idx>>0] = 2;
     return;
     break;
    }
    case 26: {
     HEAP32[$0>>2] = 1;
     $49 = ((($0)) + 4|0);
     HEAP32[$49>>2] = $index$0233;
     $_110$sroa$4$sroa$0$0$_110$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_110$sroa$4$sroa$0$0$_110$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 29: {
     HEAP32[$0>>2] = 1;
     $56 = ((($0)) + 4|0);
     HEAP32[$56>>2] = $index$0233;
     $_125$sroa$4$sroa$0$0$_125$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_125$sroa$4$sroa$0$0$_125$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_125$sroa$4$sroa$4$0$_125$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_125$sroa$4$sroa$4$0$_125$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 32: {
     HEAP32[$0>>2] = 1;
     $61 = ((($0)) + 4|0);
     HEAP32[$61>>2] = $index$0233;
     $_136$sroa$4$sroa$0$0$_136$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_136$sroa$4$sroa$0$0$_136$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 34: {
     HEAP32[$0>>2] = 1;
     $66 = ((($0)) + 4|0);
     HEAP32[$66>>2] = $index$0233;
     $_144$sroa$4$sroa$0$0$_144$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_144$sroa$4$sroa$0$0$_144$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_144$sroa$4$sroa$4$0$_144$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_144$sroa$4$sroa$4$0$_144$sroa$4$0$$sroa_idx$sroa_idx>>0] = 2;
     return;
     break;
    }
    case 36: {
     HEAP32[$0>>2] = 1;
     $69 = ((($0)) + 4|0);
     HEAP32[$69>>2] = $index$0233;
     $_154$sroa$4$sroa$0$0$_154$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_154$sroa$4$sroa$0$0$_154$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 38: {
     HEAP32[$0>>2] = 1;
     $74 = ((($0)) + 4|0);
     HEAP32[$74>>2] = $index$0233;
     $_162$sroa$4$sroa$0$0$_162$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_162$sroa$4$sroa$0$0$_162$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_162$sroa$4$sroa$4$0$_162$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_162$sroa$4$sroa$4$0$_162$sroa$4$0$$sroa_idx$sroa_idx>>0] = 3;
     return;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN4core3fmt8builders11DebugStruct5field17hb442aec97bec4c71E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $$sink8$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0;
 var $_0$sroa$0$0$i$i = 0, $_13$i$i = 0, $_20$i$i = 0, $_41$sroa$4$0$$sroa_idx20$i$i = 0, $_41$sroa$5$0$$sroa_idx22$i$i = 0, $_41$sroa$6$0$$sroa_idx24$i$i = 0, $_41$sroa$7$0$$sroa_idx26$i$i = 0, $_41$sroa$8$0$$sroa_idx28$i$i = 0, $_48$i$i = 0, $_5$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i16$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i17$i$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_6$sroa$0$0$copyload = 0, $name = 0, $prefix$i$i = 0, $switch$i = 0, $value = 0, $writer$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_5$i$i$i = sp + 104|0;
 $_48$i$i = sp + 80|0;
 $_20$i$i = sp + 56|0;
 $_13$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $value = sp + 8|0;
 $name = sp;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$value>>2] = $3;
 $6 = ((($value)) + 4|0);
 HEAP32[$6>>2] = $4;
 $_6$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 $_6$sroa$0$0$copyload = HEAP8[$_6$sroa$0$0$$sroa_idx>>0]|0;
 $7 = $name;
 $8 = $value;
 $switch$i = ($_6$sroa$0$0$copyload<<24>>24)==(0);
 if (!($switch$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return ($0|0);
 }
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 $$sink8$i$i = $11 ? 5815 : 11266;
 $$sink$i$i = $11 ? 1 : 2;
 HEAP32[$prefix$i$i>>2] = $$sink8$i$i;
 $12 = ((($prefix$i$i)) + 4|0);
 HEAP32[$12>>2] = $$sink$i$i;
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 4;
 $16 = ($15|0)==(0);
 if ($16) {
  $29 = $prefix$i$i;
  HEAP32[$_48$i$i>>2] = $29;
  $30 = ((($_48$i$i)) + 4|0);
  HEAP32[$30>>2] = (155);
  $31 = ((($_48$i$i)) + 8|0);
  HEAP32[$31>>2] = $7;
  $32 = ((($_48$i$i)) + 12|0);
  HEAP32[$32>>2] = (155);
  $33 = ((($_48$i$i)) + 16|0);
  HEAP32[$33>>2] = $8;
  $34 = ((($_48$i$i)) + 20|0);
  HEAP32[$34>>2] = (160);
  $35 = ((($13)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($13)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$_5$i$i$i>>2] = 4644;
  $_41$sroa$4$0$$sroa_idx20$i$i = ((($_5$i$i$i)) + 4|0);
  HEAP32[$_41$sroa$4$0$$sroa_idx20$i$i>>2] = 3;
  $_41$sroa$5$0$$sroa_idx22$i$i = ((($_5$i$i$i)) + 8|0);
  HEAP32[$_41$sroa$5$0$$sroa_idx22$i$i>>2] = 3716;
  $_41$sroa$6$0$$sroa_idx24$i$i = ((($_5$i$i$i)) + 12|0);
  HEAP32[$_41$sroa$6$0$$sroa_idx24$i$i>>2] = 3;
  $_41$sroa$7$0$$sroa_idx26$i$i = ((($_5$i$i$i)) + 16|0);
  HEAP32[$_41$sroa$7$0$$sroa_idx26$i$i>>2] = $_48$i$i;
  $_41$sroa$8$0$$sroa_idx28$i$i = ((($_5$i$i$i)) + 20|0);
  HEAP32[$_41$sroa$8$0$$sroa_idx28$i$i>>2] = 3;
  $39 = (__ZN4core3fmt5write17h450a6417baf49a9bE($36,$38,$_5$i$i$i)|0);
  $_0$sroa$0$0$i$i = $39;
 } else {
  $17 = $13;
  HEAP32[$writer$i$i>>2] = $17;
  $18 = ((($writer$i$i)) + 4|0);
  HEAP8[$18>>0] = 0;
  $19 = $prefix$i$i;
  HEAP32[$_20$i$i>>2] = $19;
  $20 = ((($_20$i$i)) + 4|0);
  HEAP32[$20>>2] = (155);
  $21 = ((($_20$i$i)) + 8|0);
  HEAP32[$21>>2] = $7;
  $22 = ((($_20$i$i)) + 12|0);
  HEAP32[$22>>2] = (155);
  $23 = ((($_20$i$i)) + 16|0);
  HEAP32[$23>>2] = $8;
  $24 = ((($_20$i$i)) + 20|0);
  HEAP32[$24>>2] = (160);
  HEAP32[$_13$i$i>>2] = 4512;
  $25 = ((($_13$i$i)) + 4|0);
  HEAP32[$25>>2] = 3;
  $_5$sroa$0$0$$sroa_idx$i16$i$i = ((($_13$i$i)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i16$i$i>>2] = 4536;
  $_5$sroa$4$0$$sroa_idx2$i17$i$i = ((($_13$i$i)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i17$i$i>>2] = 3;
  $26 = ((($_13$i$i)) + 16|0);
  HEAP32[$26>>2] = $_20$i$i;
  $27 = ((($_13$i$i)) + 20|0);
  HEAP32[$27>>2] = 3;
  $28 = (__ZN4core3fmt5write17h450a6417baf49a9bE($writer$i$i,2152,$_13$i$i)|0);
  $_0$sroa$0$0$i$i = $28;
 }
 $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
 HEAP8[$$pre$phiZ2D>>0] = 1;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3fmt8builders11DebugStruct6finish17hf2bdbf18f30e331dE($0) {
 $0 = $0|0;
 var $$sink$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_8$sroa$0$0$$sroa_idx$phi$trans$insert = 0, $_8$sroa$0$0$copyload = 0, $_8$sroa$0$0$copyload$pre = 0, $switch$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $_8$sroa$0$0$$sroa_idx$phi$trans$insert = ((($0)) + 4|0);
 $_8$sroa$0$0$copyload$pre = HEAP8[$_8$sroa$0$0$$sroa_idx$phi$trans$insert>>0]|0;
 if ($3) {
  $_8$sroa$0$0$copyload = $_8$sroa$0$0$copyload$pre;
  return ($_8$sroa$0$0$copyload|0);
 }
 $switch$i = ($_8$sroa$0$0$copyload$pre<<24>>24)==(0);
 if ($switch$i) {
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 4;
  $7 = ($6|0)!=(0);
  $$sink$i$i = $7 ? 11270 : 11272;
  $8 = ((($4)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($4)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,$$sink$i$i,2)|0);
  $_0$sroa$0$0$i = $14;
 } else {
  $_0$sroa$0$0$i = 1;
 }
 HEAP8[$_8$sroa$0$0$$sroa_idx$phi$trans$insert>>0] = $_0$sroa$0$0$i;
 $_8$sroa$0$0$copyload = $_0$sroa$0$0$i;
 return ($_8$sroa$0$0$copyload|0);
}
function __ZN4core3fmt8builders10DebugTuple6finish17h4786c3841902a71dE($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_9$sroa$0$0$$sroa_idx$phi$trans$insert = 0, $_9$sroa$0$0$copyload = 0, $_9$sroa$0$0$copyload$pre = 0;
 var $switch$i = 0, $switch$i$i = 0, $switch8$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $_9$sroa$0$0$$sroa_idx$phi$trans$insert = ((($0)) + 8|0);
 $_9$sroa$0$0$copyload$pre = HEAP8[$_9$sroa$0$0$$sroa_idx$phi$trans$insert>>0]|0;
 if ($3) {
  $_9$sroa$0$0$copyload = $_9$sroa$0$0$copyload$pre;
  return ($_9$sroa$0$0$copyload|0);
 }
 $switch$i = ($_9$sroa$0$0$copyload$pre<<24>>24)==(0);
 do {
  if ($switch$i) {
   $4 = HEAP32[$0>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 4;
   $7 = ($6|0)==(0);
   if ($7) {
    $15 = $2;
   } else {
    $8 = ((($4)) + 24|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($4)) + 28|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,11234,1)|0);
    $switch$i$i = ($14<<24>>24)==(0);
    if (!($switch$i$i)) {
     $_0$sroa$0$0$i = 1;
     break;
    }
    $$pre = HEAP32[$1>>2]|0;
    $15 = $$pre;
   }
   $16 = ($15|0)==(1);
   if ($16) {
    $17 = ((($0)) + 9|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if (!($19)) {
     $20 = HEAP32[$0>>2]|0;
     $21 = ((($20)) + 24|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($20)) + 28|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_iiii[$26 & 255]($22,5815,1)|0);
     $switch8$i$i = ($27<<24>>24)==(0);
     if (!($switch8$i$i)) {
      $_0$sroa$0$0$i = 1;
      break;
     }
    }
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iiii[$34 & 255]($30,11235,1)|0);
   $_0$sroa$0$0$i = $35;
  } else {
   $_0$sroa$0$0$i = 1;
  }
 } while(0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$phi$trans$insert>>0] = $_0$sroa$0$0$i;
 $_9$sroa$0$0$copyload = $_0$sroa$0$0$i;
 return ($_9$sroa$0$0$copyload|0);
}
function __ZN4core3fmt8builders10DebugInner5entry17hc022686baf50f73aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink11$i$i = 0, $$sink7$i$i = 0, $$sink9$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_13$i$i = 0, $_20$i$i = 0;
 var $_39$sroa$4$0$$sroa_idx21$i$i = 0, $_39$sroa$5$0$$sroa_idx23$i$i = 0, $_39$sroa$6$0$$sroa_idx25$i$i = 0, $_39$sroa$7$0$$sroa_idx27$i$i = 0, $_39$sroa$8$0$$sroa_idx29$i$i = 0, $_4$sroa$0$0$$sroa_idx = 0, $_4$sroa$0$0$copyload = 0, $_46$i$i = 0, $_5$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i17$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i18$i$i = 0, $entry = 0, $prefix$i$i = 0, $prefix1$i$i = 0, $switch$i = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_5$i$i$i = sp + 88|0;
 $_46$i$i = sp + 72|0;
 $prefix1$i$i = sp + 64|0;
 $_20$i$i = sp + 48|0;
 $_13$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $writer$i$i = sp + 8|0;
 $entry = sp;
 HEAP32[$entry>>2] = $1;
 $3 = ((($entry)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_4$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 $_4$sroa$0$0$copyload = HEAP8[$_4$sroa$0$0$$sroa_idx>>0]|0;
 $4 = $entry;
 $switch$i = ($_4$sroa$0$0$copyload<<24>>24)==(0);
 if (!($switch$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$_4$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4;
 $8 = ($7|0)==(0);
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 if ($8) {
  $24 = ($10<<24>>24)!=(0);
  $$sink11$i$i = $24 ? 11274 : 14140;
  $$sink9$i$i = $24 ? 2 : 0;
  HEAP32[$prefix1$i$i>>2] = $$sink11$i$i;
  $25 = ((($prefix1$i$i)) + 4|0);
  HEAP32[$25>>2] = $$sink9$i$i;
  $26 = $prefix1$i$i;
  HEAP32[$_46$i$i>>2] = $26;
  $27 = ((($_46$i$i)) + 4|0);
  HEAP32[$27>>2] = (155);
  $28 = ((($_46$i$i)) + 8|0);
  HEAP32[$28>>2] = $4;
  $29 = ((($_46$i$i)) + 12|0);
  HEAP32[$29>>2] = (160);
  $30 = ((($5)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($5)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$_5$i$i$i>>2] = 4668;
  $_39$sroa$4$0$$sroa_idx21$i$i = ((($_5$i$i$i)) + 4|0);
  HEAP32[$_39$sroa$4$0$$sroa_idx21$i$i>>2] = 2;
  $_39$sroa$5$0$$sroa_idx23$i$i = ((($_5$i$i$i)) + 8|0);
  HEAP32[$_39$sroa$5$0$$sroa_idx23$i$i>>2] = 3556;
  $_39$sroa$6$0$$sroa_idx25$i$i = ((($_5$i$i$i)) + 12|0);
  HEAP32[$_39$sroa$6$0$$sroa_idx25$i$i>>2] = 2;
  $_39$sroa$7$0$$sroa_idx27$i$i = ((($_5$i$i$i)) + 16|0);
  HEAP32[$_39$sroa$7$0$$sroa_idx27$i$i>>2] = $_46$i$i;
  $_39$sroa$8$0$$sroa_idx29$i$i = ((($_5$i$i$i)) + 20|0);
  HEAP32[$_39$sroa$8$0$$sroa_idx29$i$i>>2] = 2;
  $34 = (__ZN4core3fmt5write17h450a6417baf49a9bE($31,$33,$_5$i$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $34;
  HEAP8[$_4$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $11 = $5;
  HEAP32[$writer$i$i>>2] = $11;
  $12 = ((($writer$i$i)) + 4|0);
  HEAP8[$12>>0] = 0;
  $13 = ($10<<24>>24)!=(0);
  $$sink7$i$i = $13 ? 5815 : 14140;
  $14 = $10&255;
  HEAP32[$prefix$i$i>>2] = $$sink7$i$i;
  $15 = ((($prefix$i$i)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = $prefix$i$i;
  HEAP32[$_20$i$i>>2] = $16;
  $17 = ((($_20$i$i)) + 4|0);
  HEAP32[$17>>2] = (155);
  $18 = ((($_20$i$i)) + 8|0);
  HEAP32[$18>>2] = $4;
  $19 = ((($_20$i$i)) + 12|0);
  HEAP32[$19>>2] = (160);
  HEAP32[$_13$i$i>>2] = 4340;
  $20 = ((($_13$i$i)) + 4|0);
  HEAP32[$20>>2] = 2;
  $_5$sroa$0$0$$sroa_idx$i17$i$i = ((($_13$i$i)) + 8|0);
  HEAP32[$_5$sroa$0$0$$sroa_idx$i17$i$i>>2] = 4356;
  $_5$sroa$4$0$$sroa_idx2$i18$i$i = ((($_13$i$i)) + 12|0);
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i18$i$i>>2] = 2;
  $21 = ((($_13$i$i)) + 16|0);
  HEAP32[$21>>2] = $_20$i$i;
  $22 = ((($_13$i$i)) + 20|0);
  HEAP32[$22>>2] = 2;
  $23 = (__ZN4core3fmt5write17h450a6417baf49a9bE($writer$i$i,2152,$_13$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $23;
  HEAP8[$_4$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
}
function __ZN4core3fmt8builders9DebugList5entry17hc69279ffc2cc05f2E($self,$0,$1) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3fmt8builders10DebugInner5entry17hc022686baf50f73aE($self,$0,$1);
 return ($self|0);
}
function __ZN4core3fmt8builders9DebugList6finish17h1e62b681b4d0f440E($0) {
 $0 = $0|0;
 var $$sink$i = 0, $$sink2$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_3$0$off0$i = 0, $_9$sroa$0$0$$sroa_idx$i = 0, $_9$sroa$0$0$copyload$i = 0, $switch$i = 0, $switch$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  label = 2;
 } else {
  $5 = ((($0)) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 2;
  } else {
   $_3$0$off0$i = 1;
  }
 }
 if ((label|0) == 2) {
  $_3$0$off0$i = 0;
 }
 $_9$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 $_9$sroa$0$0$copyload$i = HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0]|0;
 $switch$i$i = ($_9$sroa$0$0$copyload$i<<24>>24)==(0);
 if (!($switch$i$i)) {
  HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0] = 1;
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $$sink$i = $_3$0$off0$i&1;
 $$sink2$i = $_3$0$off0$i ? 11234 : 14140;
 $8 = ((($1)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,$$sink2$i,$$sink$i)|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0] = $14;
 $switch$i = ($14<<24>>24)==(0);
 if (!($switch$i)) {
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_iiii[$21 & 255]($17,5845,1)|0);
 $_0$sroa$0$0$i = $22;
 return ($_0$sroa$0$0$i|0);
}
function __ZN4core3fmt10ArgumentV110from_usize17h002f4bf68d5451d7E($0,$x) {
 $0 = $0|0;
 $x = $x|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $x;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 159;
 return;
}
function __ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h980c5a6078ca23cdE($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp;
 $0 = ((($fmt)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fmt)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 ;HEAP32[$_5>>2]=HEAP32[$self>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_5+12>>2]=HEAP32[$self+12>>2]|0;HEAP32[$_5+16>>2]=HEAP32[$self+16>>2]|0;HEAP32[$_5+20>>2]=HEAP32[$self+20>>2]|0;
 $4 = (__ZN4core3fmt5write17h450a6417baf49a9bE($1,$3,$_5)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3fmt9Formatter9write_str17hee69431d143ad848E($self,$data$ptr,$data$meta) {
 $self = $self|0;
 $data$ptr = $data$ptr|0;
 $data$meta = $data$meta|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($self)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($self)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 255]($1,$data$ptr,$data$meta)|0);
 return ($6|0);
}
function __ZN4core3fmt9Formatter9write_fmt17h2f9d3d275a85e25eE($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp;
 $0 = ((($self)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($self)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 ;HEAP32[$_5>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_5+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_5+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_5+20>>2]=HEAP32[$fmt+20>>2]|0;
 $4 = (__ZN4core3fmt5write17h450a6417baf49a9bE($1,$3,$_5)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3fmt9Formatter9alternate17h059b3b7b0d842031E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = $0 & 4;
 $2 = ($1|0)!=(0);
 return ($2|0);
}
function __ZN4core3fmt9Formatter12debug_struct17h5dce02a643da4789E($0,$self,$name$ptr,$name$meta) {
 $0 = $0|0;
 $self = $self|0;
 $name$ptr = $name$ptr|0;
 $name$meta = $name$meta|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_7$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($self)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$6 & 255]($2,$name$ptr,$name$meta)|0);
 HEAP32[$0>>2] = $self;
 $_7$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 HEAP8[$_7$sroa$0$0$$sroa_idx$i>>0] = $7;
 $8 = ((($0)) + 5|0);
 HEAP8[$8>>0] = 0;
 return;
}
function __ZN4core3fmt9Formatter11debug_tuple17ha2c636477efdcc06E($0,$self,$name$ptr,$name$meta) {
 $0 = $0|0;
 $self = $self|0;
 $name$ptr = $name$ptr|0;
 $name$meta = $name$meta|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($self)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$6 & 255]($2,$name$ptr,$name$meta)|0);
 $8 = ($name$meta|0)==(0);
 HEAP32[$0>>2] = $self;
 $_7$sroa$0$0$$sroa_idx$i = ((($0)) + 8|0);
 HEAP8[$_7$sroa$0$0$$sroa_idx$i>>0] = $7;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 9|0);
 $11 = $8&1;
 HEAP8[$10>>0] = $11;
 return;
}
function __ZN4core3fmt9Formatter10debug_list17h5c50530e1e0230a4E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_12$sroa$4$0$$sroa_idx$i = 0, $_12$sroa$5$0$$sroa_idx$i = 0, $_4$sroa$4$0$$sroa_idx9$i = 0, $_4$sroa$5$0$$sroa_idx11$i = 0, $_4$sroa$614$0$$sroa_idx16$i = 0, $_4$sroa$7$0$$sroa_idx18$i = 0, $_5$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5$i$i = sp;
 $1 = ((($self)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($self)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$_5$i$i>>2] = 4684;
 $_4$sroa$4$0$$sroa_idx9$i = ((($_5$i$i)) + 4|0);
 HEAP32[$_4$sroa$4$0$$sroa_idx9$i>>2] = 1;
 $_4$sroa$5$0$$sroa_idx11$i = ((($_5$i$i)) + 8|0);
 HEAP32[$_4$sroa$5$0$$sroa_idx11$i>>2] = 0;
 $_4$sroa$614$0$$sroa_idx16$i = ((($_5$i$i)) + 16|0);
 HEAP32[$_4$sroa$614$0$$sroa_idx16$i>>2] = 13564;
 $_4$sroa$7$0$$sroa_idx18$i = ((($_5$i$i)) + 20|0);
 HEAP32[$_4$sroa$7$0$$sroa_idx18$i>>2] = 0;
 $5 = (__ZN4core3fmt5write17h450a6417baf49a9bE($2,$4,$_5$i$i)|0);
 HEAP32[$0>>2] = $self;
 $_12$sroa$4$0$$sroa_idx$i = ((($0)) + 4|0);
 HEAP8[$_12$sroa$4$0$$sroa_idx$i>>0] = $5;
 $_12$sroa$5$0$$sroa_idx$i = ((($0)) + 5|0);
 HEAP8[$_12$sroa$5$0$$sroa_idx$i>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he3ddf20e55de23f2E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($self)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($self)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 255]($1,$c)|0);
 return ($6|0);
}
function __ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hf94a8588ca8ba088E($self$ptr,$self$meta,$f) {
 $self$ptr = $self$ptr|0;
 $self$meta = $self$meta|0;
 $f = $f|0;
 var $$$$$i = 0, $$$$i = 0, $$$i = 0, $$cast$i = 0, $$cast$i171 = 0, $$cast$i171181 = 0, $$cast$i174 = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$ph$iZ2D = 0, $$sink4$i$i$i = 0, $$sink4$v$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $_0$0$i14$i$i$i = 0, $_0$0$i20$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_0$sroa$0$0 = 0, $_3$0$i$i$i$i$i = 0, $_4$sroa$4$0$ph$i = 0, $_59$sroa$13$2$ph = 0, $from$0$ph$lcssa170 = 0, $from$0$ph$lcssa170220 = 0, $from$0$ph$lcssa170221 = 0, $from$0$ph179 = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0$ph177 = 0, $iter$sroa$0$0173 = 0, $iter$sroa$6$0$ph176 = 0, $iter$sroa$6$0172 = 0, $iter$sroa$6$1 = 0, $iter$sroa$6$2 = 0, $iter$sroa$6$3 = 0;
 var $iter$sroa$6$4 = 0, $iter1$sroa$0$0 = 0, $iter1$sroa$0$1$ph = 0, $or$cond$i$i$i$i = 0, $or$cond$i$i$i$i46 = 0, $or$cond$i3$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp26$i$i$i = 0, $phitmp27$i$i$i = 0, $switch = 0, $switch15 = 0, $switch16 = 0, $switch18 = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$i$clear = 0, $trunc$i$i$i$i = 0, $trunc$i$i$i$i$clear = 0, $trunc$i$i$i$i$i$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 255]($1,34)|0);
 $switch = ($6<<24>>24)==(0);
 if (!($switch)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $7 = (($self$ptr) + ($self$meta)|0);
 $8 = ($self$meta|0)==(0);
 do {
  if ($8) {
   $from$0$ph$lcssa170221 = 0;
   label = 17;
  } else {
   $9 = $self$ptr;
   $$cast$i171181 = $self$ptr;$from$0$ph179 = 0;$iter$sroa$0$0$ph177 = 0;$iter$sroa$6$0$ph176 = $9;
   L6: while(1) {
    $$cast$i174 = $$cast$i171181;$iter$sroa$0$0173 = $iter$sroa$0$0$ph177;$iter$sroa$6$0172 = $iter$sroa$6$0$ph176;
    L8: while(1) {
     $14 = ((($$cast$i174)) + 1|0);
     $23 = $14;
     $11 = HEAP8[$$cast$i174>>0]|0;
     $24 = ($11<<24>>24)>(-1);
     if ($24) {
      $10 = $11&255;
      $_4$sroa$4$0$ph$i = $10;$iter$sroa$6$4 = $23;
     } else {
      $12 = $11 & 31;
      $13 = $12&255;
      $15 = ($14|0)==($7|0);
      if ($15) {
       $25 = $7;$_0$0$i20$i$i$i = 0;$iter$sroa$6$1 = $23;
      } else {
       $16 = ((($$cast$i174)) + 2|0);
       $17 = $16;
       $18 = HEAP8[$14>>0]|0;
       $phitmp$i$i$i = $18 & 63;
       $25 = $16;$_0$0$i20$i$i$i = $phitmp$i$i$i;$iter$sroa$6$1 = $17;
      }
      $19 = $13 << 6;
      $20 = $_0$0$i20$i$i$i&255;
      $21 = $20 | $19;
      $22 = ($11&255)>(223);
      if ($22) {
       $26 = ($25|0)==($7|0);
       if ($26) {
        $36 = $7;$_0$0$i14$i$i$i = 0;$iter$sroa$6$2 = $iter$sroa$6$1;
       } else {
        $27 = ((($25)) + 1|0);
        $28 = $27;
        $29 = HEAP8[$25>>0]|0;
        $phitmp26$i$i$i = $29 & 63;
        $36 = $27;$_0$0$i14$i$i$i = $phitmp26$i$i$i;$iter$sroa$6$2 = $28;
       }
       $30 = $20 << 6;
       $31 = $_0$0$i14$i$i$i&255;
       $32 = $31 | $30;
       $33 = $13 << 12;
       $34 = $32 | $33;
       $35 = ($11&255)>(239);
       if ($35) {
        $37 = ($36|0)==($7|0);
        if ($37) {
         $_0$0$i9$i$i$i = 0;$iter$sroa$6$3 = $iter$sroa$6$2;
        } else {
         $38 = ((($36)) + 1|0);
         $39 = $38;
         $40 = HEAP8[$36>>0]|0;
         $phitmp27$i$i$i = $40 & 63;
         $_0$0$i9$i$i$i = $phitmp27$i$i$i;$iter$sroa$6$3 = $39;
        }
        $41 = $13 << 18;
        $42 = $41 & 1835008;
        $43 = $32 << 6;
        $44 = $_0$0$i9$i$i$i&255;
        $45 = $43 | $42;
        $46 = $45 | $44;
        $_4$sroa$4$0$ph$i = $46;$iter$sroa$6$4 = $iter$sroa$6$3;
       } else {
        $_4$sroa$4$0$ph$i = $34;$iter$sroa$6$4 = $iter$sroa$6$2;
       }
      } else {
       $_4$sroa$4$0$ph$i = $21;$iter$sroa$6$4 = $iter$sroa$6$1;
      }
     }
     $59 = (($iter$sroa$0$0173) - ($iter$sroa$6$0172))|0;
     $60 = (($59) + ($iter$sroa$6$4))|0;
     switch ($_4$sroa$4$0$ph$i|0) {
     case 9:  {
      $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
      break;
     }
     case 13:  {
      $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
      break;
     }
     case 10:  {
      $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
      break;
     }
     case 34: case 39: case 92:  {
      $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $_4$sroa$4$0$ph$i;
      break;
     }
     default: {
      $65 = (__ZN4core12char_private12is_printable17hcab8f2c72eb8c5dfE($_4$sroa$4$0$ph$i)|0);
      if ($65) {
       $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $_4$sroa$4$0$ph$i;
      } else {
       $61 = $_4$sroa$4$0$ph$i | 1;
       $62 = (Math_clz32(($61|0))|0);
       $63 = $62 >>> 2;
       $64 = $63 ^ 7;
       $67 = 5;$69 = $64;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $_4$sroa$4$0$ph$i;
      }
     }
     }
     $trunc$i$i$i$i = $init_state$sroa$0$0$i&255;
     $trunc$i$i$i$i$clear = $trunc$i$i$i$i & 3;
     switch ($trunc$i$i$i$i$clear<<24>>24) {
     case 2: case 0:  {
      break L8;
      break;
     }
     case 1:  {
      break;
     }
     case 3:  {
      $66 = $67&255;
      $trunc$i$i$i$i$i$clear = $66 & 7;
      switch ($trunc$i$i$i$i$i$clear<<24>>24) {
      case 0:  {
       $_3$0$i$i$i$i$i = 0;
       break;
      }
      case 1:  {
       $_3$0$i$i$i$i$i = 1;
       break;
      }
      case 2:  {
       $_3$0$i$i$i$i$i = 2;
       break;
      }
      case 3:  {
       $_3$0$i$i$i$i$i = 3;
       break;
      }
      case 4:  {
       $_3$0$i$i$i$i$i = 4;
       break;
      }
      case 5:  {
       $_3$0$i$i$i$i$i = 5;
       break;
      }
      default: {
       label = 36;
       break L6;
      }
      }
      $68 = (($_3$0$i$i$i$i$i) + ($69))|0;
      $70 = ($68|0)==(1);
      if (!($70)) {
       break L8;
      }
      break;
     }
     default: {
      label = 29;
      break L6;
     }
     }
     $$cast$i = $iter$sroa$6$4;
     $71 = ($$cast$i|0)==($7|0);
     if ($71) {
      $from$0$ph$lcssa170 = $from$0$ph179;
      label = 16;
      break L6;
     } else {
      $$cast$i174 = $$cast$i;$iter$sroa$0$0173 = $60;$iter$sroa$6$0172 = $iter$sroa$6$4;
     }
    }
    $72 = ($iter$sroa$0$0173>>>0)<($from$0$ph179>>>0);
    if ($72) {
     label = 46;
     break;
    }
    $79 = ($from$0$ph179|0)==(0);
    $80 = ($from$0$ph179|0)==($self$meta|0);
    $or$cond$i3$i$i$i = $79 | $80;
    if (!($or$cond$i3$i$i$i)) {
     $81 = ($from$0$ph179>>>0)<($self$meta>>>0);
     if (!($81)) {
      label = 46;
      break;
     }
     $82 = (($self$ptr) + ($from$0$ph179)|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = ($83<<24>>24)>(-65);
     if (!($84)) {
      label = 46;
      break;
     }
    }
    $73 = ($iter$sroa$0$0173|0)==(0);
    $74 = ($iter$sroa$0$0173|0)==($self$meta|0);
    $or$cond$i$i$i$i = $73 | $74;
    if (!($or$cond$i$i$i$i)) {
     $75 = ($iter$sroa$0$0173>>>0)<($self$meta>>>0);
     if (!($75)) {
      label = 46;
      break;
     }
     $76 = (($self$ptr) + ($iter$sroa$0$0173)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = ($77<<24>>24)>(-65);
     if (!($78)) {
      label = 46;
      break;
     }
    }
    $85 = (($self$ptr) + ($from$0$ph179)|0);
    $86 = (($iter$sroa$0$0173) - ($from$0$ph179))|0;
    $87 = HEAP32[$0>>2]|0;
    $88 = HEAP32[$2>>2]|0;
    $89 = ((($88)) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (FUNCTION_TABLE_iiii[$90 & 255]($87,$85,$86)|0);
    $switch16 = ($91<<24>>24)==(0);
    if ($switch16) {
     $101 = $69;$93 = $67;$iter1$sroa$0$0 = $init_state$sroa$0$0$i;
    } else {
     $_0$sroa$0$0 = 1;
     label = 4;
     break;
    }
    L52: while(1) {
     $trunc$i = $iter1$sroa$0$0&255;
     $trunc$i$clear = $trunc$i & 3;
     L54: do {
      switch ($trunc$i$clear<<24>>24) {
      case 0:  {
       break L52;
       break;
      }
      case 1:  {
       $127 = $101;$128 = $93;$_59$sroa$13$2$ph = $init_state$sroa$9$0$i;$iter1$sroa$0$1$ph = 0;
       break;
      }
      case 2:  {
       $127 = $101;$128 = $93;$_59$sroa$13$2$ph = 92;$iter1$sroa$0$1$ph = 1;
       break;
      }
      case 3:  {
       $92 = $93&255;
       $trunc$i$i$clear = $92 & 7;
       switch ($trunc$i$i$clear<<24>>24) {
       case 0:  {
        break L52;
        break;
       }
       case 1:  {
        $108 = $93 & -256;
        $127 = $101;$128 = $108;$_59$sroa$13$2$ph = 125;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L54;
        break;
       }
       case 2:  {
        $100 = $101 << 2;
        $102 = $100 & 28;
        $103 = $init_state$sroa$9$0$i >>> $102;
        $104 = $103 & 15;
        $105 = $104&255;
        $106 = ($105&255)<(10);
        $$sink4$v$i$i$i = $106 ? 48 : 87;
        $$sink4$i$i$i = (($$sink4$v$i$i$i) + ($104))|0;
        $107 = ($101|0)==(0);
        if ($107) {
         $109 = $93 & -256;
         $110 = $109 | 1;
         $127 = $101;$128 = $110;$_59$sroa$13$2$ph = $$sink4$i$i$i;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
         break L54;
        } else {
         $111 = (($101) + -1)|0;
         $127 = $111;$128 = $93;$_59$sroa$13$2$ph = $$sink4$i$i$i;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
         break L54;
        }
        break;
       }
       case 3:  {
        $98 = $93 & -256;
        $99 = $98 | 2;
        $127 = $101;$128 = $99;$_59$sroa$13$2$ph = 123;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L54;
        break;
       }
       case 4:  {
        $96 = $93 & -256;
        $97 = $96 | 3;
        $127 = $101;$128 = $97;$_59$sroa$13$2$ph = 117;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L54;
        break;
       }
       case 5:  {
        $94 = $93 & -256;
        $95 = $94 | 4;
        $127 = $101;$128 = $95;$_59$sroa$13$2$ph = 92;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L54;
        break;
       }
       default: {
        label = 57;
        break L6;
       }
       }
       break;
      }
      default: {
       label = 49;
       break L6;
      }
      }
     } while(0);
     $117 = HEAP32[$0>>2]|0;
     $118 = HEAP32[$2>>2]|0;
     $119 = ((($118)) + 16|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (FUNCTION_TABLE_iii[$120 & 255]($117,$_59$sroa$13$2$ph)|0);
     $switch18 = ($121<<24>>24)==(0);
     if ($switch18) {
      $101 = $127;$93 = $128;$iter1$sroa$0$0 = $iter1$sroa$0$1$ph;
     } else {
      $_0$sroa$0$0 = 1;
      label = 4;
      break L6;
     }
    }
    $112 = ($_4$sroa$4$0$ph$i>>>0)<(128);
    $113 = ($_4$sroa$4$0$ph$i>>>0)<(2048);
    $114 = ($_4$sroa$4$0$ph$i>>>0)<(65536);
    $$$i = $114 ? 3 : 4;
    $$$$i = $113 ? 2 : $$$i;
    $$$$$i = $112 ? 1 : $$$$i;
    $115 = (($$$$$i) + ($iter$sroa$0$0173))|0;
    $$cast$i171 = $iter$sroa$6$4;
    $116 = ($$cast$i171|0)==($7|0);
    if ($116) {
     $from$0$ph$lcssa170 = $115;
     label = 16;
     break;
    } else {
     $$cast$i171181 = $$cast$i171;$from$0$ph179 = $115;$iter$sroa$0$0$ph177 = $60;$iter$sroa$6$0$ph176 = $iter$sroa$6$4;
    }
   }
   if ((label|0) == 4) {
    return ($_0$sroa$0$0|0);
   }
   else if ((label|0) == 16) {
    $47 = ($from$0$ph$lcssa170|0)==(0);
    $48 = ($from$0$ph$lcssa170|0)==($self$meta|0);
    $or$cond$i$i$i$i46 = $47 | $48;
    if ($or$cond$i$i$i$i46) {
     $from$0$ph$lcssa170221 = $from$0$ph$lcssa170;
     label = 17;
     break;
    }
    $49 = ($from$0$ph$lcssa170>>>0)<($self$meta>>>0);
    if (!($49)) {
     __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($self$ptr,$self$meta,$from$0$ph$lcssa170,$self$meta);
     // unreachable;
    }
    $50 = (($self$ptr) + ($from$0$ph$lcssa170)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = ($51<<24>>24)>(-65);
    if ($52) {
     $$pre$phi$i$i$ph$iZ2D = $50;$from$0$ph$lcssa170220 = $from$0$ph$lcssa170;
     break;
    }
    __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($self$ptr,$self$meta,$from$0$ph$lcssa170,$self$meta);
    // unreachable;
   }
   else if ((label|0) == 29) {
    // unreachable;
   }
   else if ((label|0) == 36) {
    // unreachable;
   }
   else if ((label|0) == 46) {
    __ZN4core3str16slice_error_fail17h3e0cb47fe44b9957E($self$ptr,$self$meta,$from$0$ph179,$iter$sroa$0$0173);
    // unreachable;
   }
   else if ((label|0) == 49) {
    // unreachable;
   }
   else if ((label|0) == 57) {
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $$pre$i$i$i = (($self$ptr) + ($from$0$ph$lcssa170221)|0);
  $$pre$phi$i$i$ph$iZ2D = $$pre$i$i$i;$from$0$ph$lcssa170220 = $from$0$ph$lcssa170221;
 }
 $53 = (($self$meta) - ($from$0$ph$lcssa170220))|0;
 $54 = HEAP32[$0>>2]|0;
 $55 = HEAP32[$2>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_iiii[$57 & 255]($54,$$pre$phi$i$i$ph$iZ2D,$53)|0);
 $switch15 = ($58<<24>>24)==(0);
 if (!($switch15)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $122 = HEAP32[$0>>2]|0;
 $123 = HEAP32[$2>>2]|0;
 $124 = ((($123)) + 16|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (FUNCTION_TABLE_iii[$125 & 255]($122,34)|0);
 $_0$sroa$0$0 = $126;
 return ($_0$sroa$0$0|0);
}
function __ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h3950e9a41b16bb75E($self$ptr,$self$meta,$f) {
 $self$ptr = $self$ptr|0;
 $self$meta = $self$meta|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt9Formatter3pad17h1fecb2876abbb102E($f,$self$ptr,$self$meta)|0);
 return ($0|0);
}
function __ZN4core3ptr13drop_in_place17h2056e2e350fea942E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha2757a94ff56c86eE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf31$i$i = 0, $curr$232$i$i = 0, $curr$3$i$i = 0, $div$i$i = 0, $n1$033$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31$i$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ($1&255)>(99);
 if ($3) {
  $4 = (($1&255) % 100)&-1;
  $5 = ($4 << 1)&255;
  $6 = $5&255;
  $div$i$i = (($1&255) / 100)&-1;
  $7 = $div$i$i&255;
  $8 = (9406 + ($6)|0);
  $9 = ((($buf31$i$i)) + 37|0);
  $10 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8);
  HEAP8[$9>>0]=$10&255;HEAP8[$9+1>>0]=$10>>8;
  $curr$232$i$i = 36;$n1$033$i$i = $7;
  label = 4;
 } else {
  $11 = ($1&255)<(10);
  if ($11) {
   $curr$232$i$i = 38;$n1$033$i$i = $2;
   label = 4;
  } else {
   $15 = $2 << 1;
   $16 = (9406 + ($15)|0);
   $17 = ((($buf31$i$i)) + 37|0);
   $18 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$17>>0]=$18&255;HEAP8[$17+1>>0]=$18>>8;
   $curr$3$i$i = 37;
  }
 }
 if ((label|0) == 4) {
  $12 = $n1$033$i$i&255;
  $13 = (($buf31$i$i) + ($curr$232$i$i)|0);
  $14 = (($12) + 48)<<24>>24;
  HEAP8[$13>>0] = $14;
  $curr$3$i$i = $curr$232$i$i;
 }
 $19 = (($buf31$i$i) + ($curr$3$i$i)|0);
 $20 = (39 - ($curr$3$i$i))|0;
 $21 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,14140,0,$19,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZN4core3ptr13drop_in_place17h6aeb5fe7683b7c06E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hae52a8e45f8c85c0E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $1 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h5a7782e29a5631cdE($0,$f)|0);
 return ($1|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u8_GT_3fmt17hb6b267a1ea525253E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$in$i = 0, $x$0$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $buf$i = sp;
 $0 = HEAP8[$self>>0]|0;
 dest=$buf$i; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($buf$i)) + 128|0);
 $curr$0$i = 128;$iter$sroa$4$0$in$i = $1;$x$0$i = $0;
 while(1) {
  $2 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $3 = $x$0$i & 15;
  $4 = ($x$0$i&255) >>> 4;
  $5 = ($3&255)<(10);
  $$$i = $5 ? 48 : 87;
  $6 = (($$$i) + ($3))<<24>>24;
  HEAP8[$2>>0] = $6;
  $7 = (($curr$0$i) + -1)|0;
  $8 = ($4<<24>>24)==(0);
  if ($8) {
   break;
  } else {
   $curr$0$i = $7;$iter$sroa$4$0$in$i = $2;$x$0$i = $4;
  }
 }
 $9 = ($7>>>0)>(128);
 if ($9) {
  __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($7,128);
  // unreachable;
 } else {
  $10 = (($buf$i) + ($7)|0);
  $11 = (129 - ($curr$0$i))|0;
  $12 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,11286,2,$10,$11)|0);
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h20376f4e8fe7a5fcE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$old5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = ($0>>>0)>(9999);
 if ($1) {
  $curr$0 = 39;$n$1 = $0;
  while(1) {
   $2 = (($n$1>>>0) % 10000)&-1;
   $3 = (($n$1>>>0) / 10000)&-1;
   $4 = (($2>>>0) / 100)&-1;
   $5 = $4 << 1;
   $6 = (($2>>>0) % 100)&-1;
   $7 = $6 << 1;
   $8 = (($curr$0) + -4)|0;
   $9 = (9406 + ($5)|0);
   $10 = (($buf31) + ($8)|0);
   $11 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
   HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8;
   $12 = (9406 + ($7)|0);
   $13 = (($curr$0) + -2)|0;
   $14 = (($buf31) + ($13)|0);
   $15 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $8;$n$1 = $3;
   } else {
    $curr$1 = $8;$n$2 = $3;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $0;
 }
 $16 = ($n$2|0)>(99);
 if ($16) {
  $17 = (($n$2>>>0) % 100)&-1;
  $18 = $17 << 1;
  $19 = (($n$2>>>0) / 100)&-1;
  $20 = (($curr$1) + -2)|0;
  $21 = (9406 + ($18)|0);
  $22 = (($buf31) + ($20)|0);
  $23 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8);
  HEAP8[$22>>0]=$23&255;HEAP8[$22+1>>0]=$23>>8;
  $curr$2 = $20;$n1$0 = $19;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $24 = ($n1$0|0)<(10);
 if ($24) {
  $25 = (($curr$2) + -1)|0;
  $26 = $n1$0&255;
  $27 = (($buf31) + ($25)|0);
  $28 = (($26) + 48)<<24>>24;
  HEAP8[$27>>0] = $28;
  $curr$3 = $25;
  $34 = (($buf31) + ($curr$3)|0);
  $35 = (39 - ($curr$3))|0;
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,14140,0,$34,$35)|0);
  STACKTOP = sp;return ($36|0);
 } else {
  $29 = $n1$0 << 1;
  $30 = (($curr$2) + -2)|0;
  $31 = (9406 + ($29)|0);
  $32 = (($buf31) + ($30)|0);
  $33 = HEAPU8[$31>>0]|(HEAPU8[$31+1>>0]<<8);
  HEAP8[$32>>0]=$33&255;HEAP8[$32+1>>0]=$33>>8;
  $curr$3 = $30;
  $34 = (($buf31) + ($curr$3)|0);
  $35 = (39 - ($curr$3))|0;
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,14140,0,$34,$35)|0);
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17ha5133f801bd4021cE($0,$src$ptr,$src$meta) {
 $0 = $0|0;
 $src$ptr = $src$ptr|0;
 $src$meta = $src$meta|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $$sink$i47$i = 0, $$sink110$i = 0, $$sink5109$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $iter$sroa$0$0$in125$i = 0, $result$0126$i = 0, $self$off$i40$i = 0, $self$off5$i43$i = 0, $self$off6$i45$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($src$meta|0)==(0);
 if ($1) {
  HEAP8[$0>>0] = 1;
  $2 = ((($0)) + 1|0);
  HEAP8[$2>>0] = 0;
  return;
 }
 $3 = HEAP8[$src$ptr>>0]|0;
 $cond$i = ($3<<24>>24)==(43);
 if ($cond$i) {
  $4 = ((($src$ptr)) + 1|0);
  $5 = (($src$meta) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP8[$0>>0] = 1;
   $7 = ((($0)) + 1|0);
   HEAP8[$7>>0] = 0;
   return;
  } else {
   $$sink110$i = $5;$$sink5109$i = $4;
  }
 } else {
  $$sink110$i = $src$meta;$$sink5109$i = $src$ptr;
 }
 $8 = (($$sink5109$i) + ($$sink110$i)|0);
 $iter$sroa$0$0$in125$i = $$sink5109$i;$result$0126$i = 0;
 while(1) {
  $9 = ((($iter$sroa$0$0$in125$i)) + 1|0);
  $10 = HEAP8[$iter$sroa$0$0$in125$i>>0]|0;
  $11 = $10&255;
  $self$off$i40$i = (($11) + -48)|0;
  $12 = ($self$off$i40$i>>>0)<(10);
  if ($12) {
   $$sink$i47$i = -48;
  } else {
   $self$off5$i43$i = (($11) + -97)|0;
   $13 = ($self$off5$i43$i>>>0)<(26);
   if ($13) {
    $$sink$i47$i = -87;
   } else {
    $self$off6$i45$i = (($11) + -65)|0;
    $14 = ($self$off6$i45$i>>>0)<(26);
    if ($14) {
     $$sink$i47$i = -55;
    } else {
     label = 11;
     break;
    }
   }
  }
  $15 = (($$sink$i47$i) + ($11))|0;
  $16 = ($15>>>0)<(10);
  if (!($16)) {
   label = 11;
   break;
  }
  $$arith2 = ($result$0126$i*10)|0;
  $$overflow3 = ($result$0126$i>>>0)>(429496729);
  if ($$overflow3) {
   label = 13;
   break;
  }
  $$arith = (($$arith2) + ($15))|0;
  $$overflow = ($$arith>>>0)<($$arith2>>>0);
  if ($$overflow) {
   label = 15;
   break;
  }
  $20 = ($9|0)==($8|0);
  if ($20) {
   label = 17;
   break;
  } else {
   $iter$sroa$0$0$in125$i = $9;$result$0126$i = $$arith;
  }
 }
 if ((label|0) == 11) {
  HEAP8[$0>>0] = 1;
  $17 = ((($0)) + 1|0);
  HEAP8[$17>>0] = 1;
  return;
 }
 else if ((label|0) == 13) {
  HEAP8[$0>>0] = 1;
  $18 = ((($0)) + 1|0);
  HEAP8[$18>>0] = 2;
  return;
 }
 else if ((label|0) == 15) {
  HEAP8[$0>>0] = 1;
  $19 = ((($0)) + 1|0);
  HEAP8[$19>>0] = 2;
  return;
 }
 else if ((label|0) == 17) {
  HEAP8[$0>>0] = 0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $$arith;
  return;
 }
}
function __ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h4a28537a6e2d94e8E($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $$sink$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_15 = 0, $_7$sroa$0$0$$sroa_idx$i$i = 0, $_8$sroa$0$0$copyload$i = 0, $_8$sroa$0$0$copyload$pre$i = 0, $builder = 0, $switch$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_15 = sp + 8|0;
 $builder = sp;
 $0 = ((($__arg_0)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($__arg_0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 255]($1,11288,13)|0);
 HEAP32[$builder>>2] = $__arg_0;
 $_7$sroa$0$0$$sroa_idx$i$i = ((($builder)) + 4|0);
 HEAP8[$_7$sroa$0$0$$sroa_idx$i$i>>0] = $6;
 $7 = ((($builder)) + 5|0);
 HEAP8[$7>>0] = 0;
 HEAP32[$_15>>2] = $self;
 (__ZN4core3fmt8builders11DebugStruct5field17hb442aec97bec4c71E($builder,11277,4,$_15,2232)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 $_8$sroa$0$0$copyload$pre$i = HEAP8[$_7$sroa$0$0$$sroa_idx$i$i>>0]|0;
 if ($9) {
  $_8$sroa$0$0$copyload$i = $_8$sroa$0$0$copyload$pre$i;
  STACKTOP = sp;return ($_8$sroa$0$0$copyload$i|0);
 }
 $switch$i$i = ($_8$sroa$0$0$copyload$pre$i<<24>>24)==(0);
 if ($switch$i$i) {
  $10 = HEAP32[$builder>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 4;
  $13 = ($12|0)!=(0);
  $$sink$i$i$i = $13 ? 11270 : 11272;
  $14 = ((($10)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($10)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_iiii[$19 & 255]($15,$$sink$i$i$i,2)|0);
  $_0$sroa$0$0$i$i = $20;
 } else {
  $_0$sroa$0$0$i$i = 1;
 }
 HEAP8[$_7$sroa$0$0$$sroa_idx$i$i>>0] = $_0$sroa$0$0$i$i;
 $_8$sroa$0$0$copyload$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($_8$sroa$0$0$copyload$i|0);
}
function __ZN4core3ptr13drop_in_place17h918ee1ab10efd9bcE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h966ddc8b8b8bb470E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0;
 $trunc$i = HEAP8[$0>>0]|0;
 $trunc$i$clear = $trunc$i & 3;
 switch ($trunc$i$clear<<24>>24) {
 case 0:  {
  $1 = ((($f)) + 24|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($2,11281,5)|0);
  $_0$sroa$0$0$i = $7;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 1:  {
  $8 = ((($f)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($f)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,11301,12)|0);
  $_0$sroa$0$0$i = $14;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 2:  {
  $15 = ((($f)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($f)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 255]($16,11313,8)|0);
  $_0$sroa$0$0$i = $21;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 3:  {
  $22 = ((($f)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($f)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iiii[$27 & 255]($23,11321,9)|0);
  $_0$sroa$0$0$i = $28;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17hd48441b71633fdb8E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31$i = 0, $curr$232$i = 0, $curr$3$i = 0, $div$i = 0, $n1$033$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31$i = sp;
 $0 = HEAP8[$self>>0]|0;
 $1 = $0&255;
 $2 = ($0&255)>(99);
 if ($2) {
  $3 = (($0&255) % 100)&-1;
  $4 = ($3 << 1)&255;
  $5 = $4&255;
  $div$i = (($0&255) / 100)&-1;
  $6 = $div$i&255;
  $7 = (9406 + ($5)|0);
  $8 = ((($buf31$i)) + 37|0);
  $9 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
  HEAP8[$8>>0]=$9&255;HEAP8[$8+1>>0]=$9>>8;
  $curr$232$i = 36;$n1$033$i = $6;
  label = 4;
 } else {
  $10 = ($0&255)<(10);
  if ($10) {
   $curr$232$i = 38;$n1$033$i = $1;
   label = 4;
  } else {
   $14 = $1 << 1;
   $15 = (9406 + ($14)|0);
   $16 = ((($buf31$i)) + 37|0);
   $17 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $curr$3$i = 37;
  }
 }
 if ((label|0) == 4) {
  $11 = $n1$033$i&255;
  $12 = (($buf31$i) + ($curr$232$i)|0);
  $13 = (($11) + 48)<<24>>24;
  HEAP8[$12>>0] = $13;
  $curr$3$i = $curr$232$i;
 }
 $18 = (($buf31$i) + ($curr$3$i)|0);
 $19 = (39 - ($curr$3$i))|0;
 $20 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,14140,0,$18,$19)|0);
 STACKTOP = sp;return ($20|0);
}
function __ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17hbbf3ce441032312dE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h6ab91bf06075ab5bE($self,$f)|0);
 return ($0|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h6ab91bf06075ab5bE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$ = 0, $$old5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = ($0|0)>(-1);
 $2 = (0 - ($0))|0;
 $$ = $1 ? $0 : $2;
 $3 = ($$>>>0)>(9999);
 if ($3) {
  $curr$0 = 39;$n$1 = $$;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (9406 + ($7)|0);
   $12 = (($buf31) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (9406 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf31) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $$;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (9406 + ($20)|0);
  $24 = (($buf31) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf31) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,$1,14140,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (9406 + ($31)|0);
  $34 = (($buf31) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,$1,14140,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17hfc47343afb310633E($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $$sink$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_16 = 0, $_24 = 0, $_7$sroa$0$0$$sroa_idx$i$i = 0, $_8$sroa$0$0$copyload$i = 0, $_8$sroa$0$0$copyload$pre$i = 0, $builder = 0, $switch$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_24 = sp + 12|0;
 $_16 = sp + 8|0;
 $builder = sp;
 $0 = ((($self)) + 4|0);
 $1 = ((($__arg_0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__arg_0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$6 & 255]($2,11330,9)|0);
 HEAP32[$builder>>2] = $__arg_0;
 $_7$sroa$0$0$$sroa_idx$i$i = ((($builder)) + 4|0);
 HEAP8[$_7$sroa$0$0$$sroa_idx$i$i>>0] = $7;
 $8 = ((($builder)) + 5|0);
 HEAP8[$8>>0] = 0;
 HEAP32[$_16>>2] = $self;
 (__ZN4core3fmt8builders11DebugStruct5field17hb442aec97bec4c71E($builder,11339,11,$_16,2200)|0);
 HEAP32[$_24>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17hb442aec97bec4c71E($builder,11350,9,$_24,2248)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 $_8$sroa$0$0$copyload$pre$i = HEAP8[$_7$sroa$0$0$$sroa_idx$i$i>>0]|0;
 if ($10) {
  $_8$sroa$0$0$copyload$i = $_8$sroa$0$0$copyload$pre$i;
  STACKTOP = sp;return ($_8$sroa$0$0$copyload$i|0);
 }
 $switch$i$i = ($_8$sroa$0$0$copyload$pre$i<<24>>24)==(0);
 if ($switch$i$i) {
  $11 = HEAP32[$builder>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 4;
  $14 = ($13|0)!=(0);
  $$sink$i$i$i = $14 ? 11270 : 11272;
  $15 = ((($11)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($11)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 255]($16,$$sink$i$i$i,2)|0);
  $_0$sroa$0$0$i$i = $21;
 } else {
  $_0$sroa$0$0$i$i = 1;
 }
 HEAP8[$_7$sroa$0$0$$sroa_idx$i$i>>0] = $_0$sroa$0$0$i$i;
 $_8$sroa$0$0$copyload$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($_8$sroa$0$0$copyload$i|0);
}
function __ZN4core3ptr13drop_in_place17hb63278727f6fd004E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h79f5acf50c73cc4eE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$pre$i14$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$0$0$i$i21$i = 0, $_21$i = 0, $_7$sroa$0$0$$sroa_idx$i$i6$i = 0, $_9$sroa$0$0$copyload$i23$i = 0, $_9$sroa$0$0$copyload$pre$i8$i = 0, $builder1$i = 0;
 var $or$cond$i = 0, $switch$i = 0, $switch$i$i$i12$i = 0, $switch$i$i9$i = 0, $switch8$i$i$i18$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_21$i = sp + 12|0;
 $builder1$i = sp;
 $0 = HEAP32[$self>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $switch$i = ($1<<24>>24)==(1);
 if (!($switch$i)) {
  $2 = ((($f)) + 24|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($f)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iiii[$7 & 255]($3,11359,4)|0);
  $_0$sroa$0$0$i = $8;
  STACKTOP = sp;return ($_0$sroa$0$0$i|0);
 }
 $9 = ((($0)) + 1|0);
 $10 = ((($f)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($f)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($11,11363,4)|0);
 HEAP32[$builder1$i>>2] = $f;
 $_7$sroa$0$0$$sroa_idx$i$i6$i = ((($builder1$i)) + 8|0);
 HEAP8[$_7$sroa$0$0$$sroa_idx$i$i6$i>>0] = $16;
 $17 = ((($builder1$i)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($builder1$i)) + 9|0);
 HEAP8[$18>>0] = 0;
 HEAP32[$_21$i>>2] = $9;
 (__ZN4core3fmt8builders10DebugTuple5field17h80aed126205c0495E($builder1$i,$_21$i,2216)|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = ($19|0)==(0);
 $_9$sroa$0$0$copyload$pre$i8$i = HEAP8[$_7$sroa$0$0$$sroa_idx$i$i6$i>>0]|0;
 if ($20) {
  $_9$sroa$0$0$copyload$i23$i = $_9$sroa$0$0$copyload$pre$i8$i;
 } else {
  $switch$i$i9$i = ($_9$sroa$0$0$copyload$pre$i8$i<<24>>24)==(0);
  do {
   if ($switch$i$i9$i) {
    $21 = HEAP32[$builder1$i>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 & 4;
    $24 = ($23|0)==(0);
    if ($24) {
     $32 = $19;
    } else {
     $25 = ((($21)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($21)) + 28|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($28)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_iiii[$30 & 255]($26,11234,1)|0);
     $switch$i$i$i12$i = ($31<<24>>24)==(0);
     if (!($switch$i$i$i12$i)) {
      $_0$sroa$0$0$i$i21$i = 1;
      break;
     }
     $$pre$i14$i = HEAP32[$17>>2]|0;
     $32 = $$pre$i14$i;
    }
    $33 = ($32|0)!=(1);
    $34 = HEAP8[$18>>0]|0;
    $35 = ($34<<24>>24)==(0);
    $or$cond$i = $33 | $35;
    if (!($or$cond$i)) {
     $36 = HEAP32[$builder1$i>>2]|0;
     $37 = ((($36)) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($36)) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (FUNCTION_TABLE_iiii[$42 & 255]($38,5815,1)|0);
     $switch8$i$i$i18$i = ($43<<24>>24)==(0);
     if (!($switch8$i$i$i18$i)) {
      $_0$sroa$0$0$i$i21$i = 1;
      break;
     }
    }
    $44 = HEAP32[$builder1$i>>2]|0;
    $45 = ((($44)) + 24|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($44)) + 28|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_iiii[$50 & 255]($46,11235,1)|0);
    $_0$sroa$0$0$i$i21$i = $51;
   } else {
    $_0$sroa$0$0$i$i21$i = 1;
   }
  } while(0);
  HEAP8[$_7$sroa$0$0$$sroa_idx$i$i6$i>>0] = $_0$sroa$0$0$i$i21$i;
  $_9$sroa$0$0$copyload$i23$i = $_0$sroa$0$0$i$i21$i;
 }
 $_0$sroa$0$0$i = $_9$sroa$0$0$copyload$i23$i;
 STACKTOP = sp;return ($_0$sroa$0$0$i|0);
}
function __ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17hd0e45f196424d9eeE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$in$i = 0, $x$0$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $buf$i = sp;
 $0 = HEAP32[$self>>2]|0;
 dest=$buf$i; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($buf$i)) + 128|0);
 $curr$0$i = 128;$iter$sroa$4$0$in$i = $1;$x$0$i = $0;
 while(1) {
  $2 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $3 = $x$0$i & 15;
  $4 = $x$0$i >>> 4;
  $5 = $3&255;
  $6 = ($5&255)<(10);
  $$$i = $6 ? 48 : 87;
  $7 = (($$$i) + ($5))<<24>>24;
  HEAP8[$2>>0] = $7;
  $8 = (($curr$0$i) + -1)|0;
  $9 = ($4|0)==(0);
  if ($9) {
   break;
  } else {
   $curr$0$i = $8;$iter$sroa$4$0$in$i = $2;$x$0$i = $4;
  }
 }
 $10 = ($8>>>0)>(128);
 if ($10) {
  __ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE($8,128);
  // unreachable;
 } else {
  $11 = (($buf$i) + ($8)|0);
  $12 = (129 - ($curr$0$i))|0;
  $13 = (__ZN4core3fmt9Formatter12pad_integral17h30d5c1858693c88bE($f,1,11286,2,$11,$12)|0);
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[3391]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (13604 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[3391] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(13572)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (13604 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[3391] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(13584)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (13604 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[3391] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(13572)>>2] = $76;
     HEAP32[(13584)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(13568)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (13868 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (13868 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(13568)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(13584)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (13604 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[3391] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(13572)>>2] = $$0173$lcssa$i;
       HEAP32[(13584)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(13568)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (13868 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (13868 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(13572)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (13868 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(13568)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (13604 + ($383<<2)|0);
          $385 = HEAP32[3391]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[3391] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (13868 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(13568)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(13572)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(13584)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(13584)>>2] = $462;
   HEAP32[(13572)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(13572)>>2] = 0;
   HEAP32[(13584)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(13576)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(13576)>>2] = $477;
  $478 = HEAP32[(13588)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(13588)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[3509]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(14044)>>2] = 4096;
  HEAP32[(14040)>>2] = 4096;
  HEAP32[(14048)>>2] = -1;
  HEAP32[(14052)>>2] = -1;
  HEAP32[(14056)>>2] = 0;
  HEAP32[(14008)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[3509] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(14044)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(14004)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(13996)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(14008)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(13588)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (14012);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(14040)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(13996)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(14004)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(14044)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(14008)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(14008)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(13996)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(13996)>>2] = $578;
  $579 = HEAP32[(14000)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(14000)>>2] = $578;
  }
  $581 = HEAP32[(13588)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(13580)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(13580)>>2] = $$748$i;
    }
    HEAP32[(14012)>>2] = $$748$i;
    HEAP32[(14016)>>2] = $$723947$i;
    HEAP32[(14024)>>2] = 0;
    $586 = HEAP32[3509]|0;
    HEAP32[(13600)>>2] = $586;
    HEAP32[(13596)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (13604 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(13588)>>2] = $600;
    HEAP32[(13576)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(14052)>>2]|0;
    HEAP32[(13592)>>2] = $606;
   } else {
    $$024370$i = (14012);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(13576)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(13588)>>2] = $630;
       HEAP32[(13576)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(14052)>>2]|0;
       HEAP32[(13592)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(13580)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(13580)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (14012);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(13576)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(13576)>>2] = $678;
        HEAP32[(13588)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(13584)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(13572)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(13572)>>2] = $684;
         HEAP32[(13584)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[3391]|0;
            $703 = $702 & $701;
            HEAP32[3391] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (13868 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(13568)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(13568)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (13604 + ($762<<2)|0);
         $764 = HEAP32[3391]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[3391] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (13868 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(13568)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(13568)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (14012);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(13588)>>2] = $865;
    HEAP32[(13576)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(14052)>>2]|0;
    HEAP32[(13592)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(14012)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(14012)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(14012)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(14012)+12>>2]|0;
    HEAP32[(14012)>>2] = $$748$i;
    HEAP32[(14016)>>2] = $$723947$i;
    HEAP32[(14024)>>2] = 0;
    HEAP32[(14020)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (13604 + ($887<<2)|0);
      $889 = HEAP32[3391]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[3391] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (13868 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(13568)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(13568)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(13576)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(13576)>>2] = $962;
   $963 = HEAP32[(13588)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(13588)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(13580)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(13584)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(13572)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[3391]|0;
     $29 = $28 & $27;
     HEAP32[3391] = $29;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$86 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (13868 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(13568)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(13568)>>2] = $62;
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$86 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$86 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$86 = $2;
  }
 } while(0);
 $87 = ($86>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(13588)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(13584)>>2]|0;
  if ($95) {
   $97 = HEAP32[(13576)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(13576)>>2] = $98;
   HEAP32[(13588)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(13584)>>2] = 0;
   HEAP32[(13572)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(13572)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(13572)>>2] = $104;
   HEAP32[(13584)>>2] = $86;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($86) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[3391]|0;
     $120 = $119 & $118;
     HEAP32[3391] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (13868 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(13568)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(13568)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($86) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(13584)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(13572)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($86) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (13604 + ($180<<2)|0);
  $182 = HEAP32[3391]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[3391] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (13868 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(13568)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(13568)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(13596)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(13596)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (14020);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(13596)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(14044)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = (($18) + ($16)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 1;
  HEAP32[$25>>2] = $27;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $28 = HEAP32[(13588)>>2]|0;
 $29 = ($5|0)==($28|0);
 if ($29) {
  $30 = HEAP32[(13576)>>2]|0;
  $31 = (($30) + ($4))|0;
  $32 = ($31>>>0)>($1>>>0);
  $33 = (($31) - ($1))|0;
  $34 = (($0) + ($1)|0);
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  $35 = $33 | 1;
  $36 = ((($34)) + 4|0);
  $37 = $3 & 1;
  $38 = $37 | $1;
  $39 = $38 | 2;
  HEAP32[$2>>2] = $39;
  HEAP32[$36>>2] = $35;
  HEAP32[(13588)>>2] = $34;
  HEAP32[(13576)>>2] = $33;
  $$2 = $0;
  return ($$2|0);
 }
 $40 = HEAP32[(13584)>>2]|0;
 $41 = ($5|0)==($40|0);
 if ($41) {
  $42 = HEAP32[(13572)>>2]|0;
  $43 = (($42) + ($4))|0;
  $44 = ($43>>>0)<($1>>>0);
  if ($44) {
   $$2 = 0;
   return ($$2|0);
  }
  $45 = (($43) - ($1))|0;
  $46 = ($45>>>0)>(15);
  $47 = $3 & 1;
  if ($46) {
   $48 = (($0) + ($1)|0);
   $49 = (($48) + ($45)|0);
   $50 = $47 | $1;
   $51 = $50 | 2;
   HEAP32[$2>>2] = $51;
   $52 = ((($48)) + 4|0);
   $53 = $45 | 1;
   HEAP32[$52>>2] = $53;
   HEAP32[$49>>2] = $45;
   $54 = ((($49)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
   $storemerge = $48;$storemerge1 = $45;
  } else {
   $57 = $47 | $43;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($43)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(13572)>>2] = $storemerge1;
  HEAP32[(13584)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[3391]|0;
    $81 = $80 & $79;
    HEAP32[3391] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (13868 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($5|0)==($109|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(13568)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(13568)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $not$ = ($116|0)!=($5|0);
     $$sink1 = $not$&1;
     $117 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$117>>2] = $$3;
     $118 = ($$3|0)==(0|0);
     if ($118) {
      break;
     }
    }
    $119 = ((($$3)) + 24|0);
    HEAP32[$119>>2] = $85;
    $120 = ((($5)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0|0);
    if (!($122)) {
     $123 = ((($$3)) + 16|0);
     HEAP32[$123>>2] = $121;
     $124 = ((($121)) + 24|0);
     HEAP32[$124>>2] = $$3;
    }
    $125 = ((($120)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(0|0);
    if (!($127)) {
     $128 = ((($$3)) + 20|0);
     HEAP32[$128>>2] = $126;
     $129 = ((($126)) + 24|0);
     HEAP32[$129>>2] = $$3;
    }
   }
  }
 } while(0);
 $130 = ($70>>>0)<(16);
 $131 = $3 & 1;
 if ($130) {
  $132 = $68 | $131;
  $133 = $132 | 2;
  HEAP32[$2>>2] = $133;
  $134 = (($0) + ($68)|0);
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 | 1;
  HEAP32[$135>>2] = $137;
  $$2 = $0;
  return ($$2|0);
 } else {
  $138 = (($0) + ($1)|0);
  $139 = $131 | $1;
  $140 = $139 | 2;
  HEAP32[$2>>2] = $140;
  $141 = ((($138)) + 4|0);
  $142 = $70 | 3;
  HEAP32[$141>>2] = $142;
  $143 = (($138) + ($70)|0);
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 1;
  HEAP32[$144>>2] = $146;
  _dispose_chunk($138,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(13584)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(13572)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[3391]|0;
     $25 = $24 & $23;
     HEAP32[3391] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (13868 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(13568)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(13568)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(13588)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(13584)>>2]|0;
  if ($87) {
   $89 = HEAP32[(13576)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(13576)>>2] = $90;
   HEAP32[(13588)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(13584)>>2] = 0;
   HEAP32[(13572)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(13572)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(13572)>>2] = $96;
   HEAP32[(13584)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[3391]|0;
     $112 = $111 & $110;
     HEAP32[3391] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (13868 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(13568)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(13568)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(13584)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(13572)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (13604 + ($172<<2)|0);
  $174 = HEAP32[3391]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[3391] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (13868 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(13568)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(13568)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)>(16);
 $$ = $2 ? $0 : 16;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $20 & $21;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;$72 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;$72 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;$72 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($72) + ($14)|0);
   $73 = $64 & 1;
   $74 = $14 | $73;
   $75 = $74 | 2;
   HEAP32[$63>>2] = $75;
   $76 = ((($71)) + 4|0);
   $77 = $70 | 3;
   HEAP32[$76>>2] = $77;
   $78 = (($71) + ($70)|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 1;
   HEAP32[$79>>2] = $81;
   _dispose_chunk($71,$70);
  }
 }
 $82 = ((($72)) + 8|0);
 $$198 = $82;
 return ($$198|0);
}
function _posix_memalign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(8);
 do {
  if ($3) {
   $4 = (_malloc($2)|0);
   $$2 = $4;
  } else {
   $5 = $1 >>> 2;
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($5|0)==(0);
   $or$cond = $7 | $8;
   if ($or$cond) {
    $$1 = 22;
    return ($$1|0);
   }
   $9 = (($5) + 1073741823)|0;
   $10 = $9 & $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$1 = 22;
    return ($$1|0);
   }
   $12 = (-64 - ($1))|0;
   $13 = ($12>>>0)<($2>>>0);
   if ($13) {
    $$1 = 12;
    return ($$1|0);
   } else {
    $14 = ($1>>>0)>(16);
    $$ = $14 ? $1 : 16;
    $15 = (_internal_memalign($$,$2)|0);
    $$2 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$2|0)==(0|0);
 if ($16) {
  $$1 = 12;
  return ($$1|0);
 }
 HEAP32[$0>>2] = $$2;
 $$1 = 0;
 return ($$1|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14060|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$25 = $17;
   while(1) {
    $26 = ($25|0)<(0);
    if ($26) {
     break;
    }
    $34 = (($$04855) - ($25))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($25>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($25) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$25 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 161;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _htons($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16($0)|0);
 return ($1|0);
}
function ___bswap_16($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_767()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4820|0);
}
function ___pthread_self_767() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (11367 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 11455;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 11455;
  } else {
   $$01214 = 11455;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16_27($0)|0);
 return ($1|0);
}
function ___bswap_16_27($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_32($0)|0);
 return ($1|0);
}
function ___bswap_32($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((14128|0));
 return (14136|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((14128|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1204]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1204]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 255]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 255]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function runPostSets() {
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&255]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4() {
 ; nullFunc_v(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN3std2io5stdio6stdout11stdout_init17hfaa3f66fb886e63fE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h3a2d2603f3a648d6E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN3std10sys_common11thread_info11THREAD_INFO7__getit17h592ba3c0c96cc1d3E,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hcc06bc57105da8a5E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN3std5error5Error7type_id17hd20849972e300d39E,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZN3std5error5Error7type_id17h352881c6e6294928E,b1,b1,b1,b1,b1,b1,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hdc90534263627cf0E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_close,b1,b1,b1,b1,__ZN3std6thread6Thread3new17ha003124fd8d98d59E
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h38b21bc534aa4521E,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h2a12e2e2320a2626E,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h5be03bb8847056e2E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h6b9bc56754e54ee9E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3fmt5Write10write_char17h0192ce65845ccc6fE,__ZN4core3fmt5Write9write_fmt17h4171583f8e30087fE,b2,b2,b2,b2,__ZN282__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h3af2178b22ae2801E,__ZN280__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h013eceb1853d799dE,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h08f5116eeddafd3cE,b2,b2,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h49fa34020e9d106eE
,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h94e4033f94db61b9E,b2,b2,b2,b2,__ZN90__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Display_GT_3fmt17h6c2d57dad41df862E,__ZN88__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Debug_GT_3fmt17h217acc78a24d1474E,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb3fea24a53defe37E,b2,b2,b2,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h2a24af98bc764614E,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha825db9cdcf0887dE,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hdb3bff9a78661df4E,b2,b2,b2,b2,b2,__ZN4core3fmt5Write10write_char17hb7d9af0eab0fd278E,__ZN4core3fmt5Write9write_fmt17h20bbf582546b0b9fE,b2,b2,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h83f15d305ba1842aE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h6ba5e2c5c76fed99E,b2
,b2,b2,b2,b2,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hc236f72f0c352aa7E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h9bab9c7e8a28efebE,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6dcfcac692001bd4E,b2,b2,__ZN4core3fmt5Write10write_char17h6d66b075142ab1ebE,__ZN4core3fmt5Write9write_fmt17h6cfc1c3e572b4fcdE,b2,b2,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h0d11039e1390d6a3E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hc31fb39594cd489dE,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hae52a8e45f8c85c0E,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha2757a94ff56c86eE,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h966ddc8b8b8bb470E,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h79f5acf50c73cc4eE,b2,b2,b2,b2,b2,b2
,b2,b2,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h432b9a854ec0b461E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h3c2c4aa06f847fbbE,__ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17h115891ff7b31874eE,b2,b2,__ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17h3a40997f09e04e38E,__ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17hd79102c2b7e193fbE,b2,b2,b2,b2,b2,b2,b2,b2,__ZN68__LT_std__thread__local__AccessError_u20_as_u20_core__fmt__Debug_GT_3fmt17h3c3cef4761113c2aE,b2,b2,b2,b2,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h20376f4e8fe7a5fcE,__ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h980c5a6078ca23cdE,b2,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h461c08ea92e48f23E,__ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17ha1c54cc75ad6f417E,b2
,b2,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h5a7782e29a5631cdE,__ZN52__LT__BP_const_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h3b9afd7b6ed6ce83E,b2,b2,b2,b2,__ZN3std3sys3imp9backtrace7tracing3imp8trace_fn17h146d16014d99306bE,__ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h4a28537a6e2d94e8E,__ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h4c459d07e068ff31E,__ZN60__LT_alloc__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17hc572529c92bce7a6E,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h6ab91bf06075ab5bE,__ZN4core3fmt9Formatter9write_fmt17h2f9d3d275a85e25eE,__ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17hfc47343afb310633E,b2,b2,b2,__ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h5ba69c89de6cc6e7E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,__ZN65__LT_alloc__allocator__AllocErr_u20_as_u20_core__fmt__Display_GT_3fmt17h4680e65ca869147aE,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h41f84f8c56e98577E,b2,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h23d7287061c27b40E,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u8_GT_3fmt17hb6b267a1ea525253E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17hcd081525bfbbabbcE,__ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17hb1bff36a33e99380E,__ZN71__LT_core__ops__range__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h5a8199c1d0bc1c38E,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17hfe0f7424930b02b7E,__ZN4core3fmt10ArgumentV110show_usize17hbae3c2acb149f11eE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7527db06e3ec6d8aE,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,b3,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0aa55deeb468b616E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h841b048bfd8be0e9E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h139d2b64d1bd5f27E,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h07d3a1e6e74a20f8E,b3,b3,b3,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h6270b4850f75135aE,b3,b3,b3
,b3,b3,b3,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h6124e026c94c6447E,b3,b3,b3,b3,b3,__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h8882c7fa9e81277aE,b3,b3,b3,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he7492b52cef34e1bE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___stdout_write,___stdio_seek,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4core3fmt5write17h450a6417baf49a9bE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___stdio_write,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_v = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4main4main17hdb2247a3d8e3b570E,__ZN4core6result13unwrap_failed17h0e4f698c49d94c0aE,b4
,__ZN4core6result13unwrap_failed17hc56d5bdb79226250E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4core6result13unwrap_failed17h6e9520dde6482bf3E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std6thread4park17haecaae8bee40cd5dE,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vi = [b5,__ZN3std6thread5local2os13destroy_value17h81fe8297255d2077E,__ZN4core3ptr13drop_in_place17h68ba065c751b89cdE,b5,b5,b5,__ZN4core3ptr13drop_in_place17he89d6e432b57bbf5E,b5,__ZN4core3ptr13drop_in_place17hed93d1d506b1af45E,b5,b5,b5,b5,__ZN3std6thread5local2os13destroy_value17h3c298d9b34ef294dE,__ZN4core3ptr13drop_in_place17h8134895c89cb0ec2E,b5,b5,b5,__ZN4core3ptr13drop_in_place17h645ed031612dfee1E,b5,b5,b5,b5,b5,__ZN4core3ptr13drop_in_place17hd5346f9d88e6ac7bE,b5,__ZN4core3ptr13drop_in_place17h0fb24cfdfb717612E,b5,b5
,b5,__ZN4core3ptr13drop_in_place17h6e05235029be469eE,b5,b5,b5,b5,b5,__ZN4core3ptr13drop_in_place17h3d3cc9a3ac23f033E,b5,__ZN3std6thread5local2os13destroy_value17hac5b41b1a377288fE,__ZN4core3ptr13drop_in_place17h73cb49d55a3566efE,b5,__ZN4core3ptr13drop_in_place17h3062914d23b9cc05E,b5,__ZN4core3ptr13drop_in_place17h4a0711aab1c6b1b3E,b5,__ZN4core3ptr13drop_in_place17hb3b32e92b20bffebE,b5,b5,__ZN4core3ptr13drop_in_place17h3e3023433e3be95fE,__ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17hcdcc383566b9089aE,__ZN4core3ptr13drop_in_place17he5bf24d8a0f450abE,b5,b5,b5,__ZN4core3ptr13drop_in_place17h6b486329dc8ab9a4E,b5,b5,b5,__ZN4core3ptr13drop_in_place17h0f88ba7175dd4980E
,b5,b5,__ZN4core3ptr13drop_in_place17h15d86509b45406f0E,b5,b5,b5,__ZN4core3ptr13drop_in_place17hef5fc046610fac57E,b5,__ZN4core3ptr13drop_in_place17hee88afbf19fcdb4aE,b5,b5,b5,__ZN4core3ptr13drop_in_place17hb03963b2d0e909e3E,b5,b5,b5,__ZN4core3ptr13drop_in_place17h6aeb5fe7683b7c06E,b5,__ZN4core3ptr13drop_in_place17h2056e2e350fea942E,b5,__ZN4core3ptr13drop_in_place17h918ee1ab10efd9bcE,b5,__ZN4core3ptr13drop_in_place17hb63278727f6fd004E,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hd2cee920c40e3974E,__ZN4core9panicking5panic17hdf4baf73e8b6719eE,b5,b5,b5,b5,__ZN3std3sys3imp7condvar7Condvar4init17h0a6fc507c5b0f2ccE,b5,b5,b5,b5,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h2970720f160b80b7E,b5,b5,b5,__ZN3std10sys_common4util10dumb_print17hfc0c323ae8a674b6E,__ZN3std9panicking12default_hook17h4556ac4f9c07bfb2E,b5,b5,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h8e0a33686c59d41dE,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN4core3ptr13drop_in_place17h4000831a22082efeE,b5,b5,b5,b5,__ZN4core3ptr13drop_in_place17hff6abf3e64b8d9d6E,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4core6result13unwrap_failed17h9ef61d4721a2abfdE,__ZN4core3ptr13drop_in_place17h9a38c2a898c5e094E,b5,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h89ce0fba6bf46c77E,b5,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h1842960a728cf569E,b5,b5,b5,b5,__ZN3std6thread6Thread6unpark17hdf0c9c337ba9ba11E,b5,__ZN4core3ptr13drop_in_place17hbd5692331b548e10E,b5,__ZN3std9panicking3try7do_call17h1a82342fb969d953E
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17hf67eedd4c446a7c8E,b6,b6,b6,b6,b6,b6,b6,b6,__ZN281__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h701ec9dd2fe1bf4dE,__ZN3std5error5Error5cause17h3333ff42cbf45fbfE,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZN89__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_std__error__Error_GT_11description17hb6136ff6aaedaab5E,__ZN3std5error5Error5cause17h7863ec4fee22b1f3E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17h8493f05a525ecf02E,__ZN4core3ops8function6FnOnce9call_once17h84874e26aa349f75E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core9panicking9panic_fmt17h340ca2c354a23edeE,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_13reserve_exact17h3b80a3d8a12787faE,b6,b6,b6,b6,b6,b6,b6,__ZN4core5slice20slice_index_len_fail17h0a9ab206debc0dcaE,b6,b6,b6,b6,b6,__ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17h2c66c89eb579c69bE,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h0f2743b3e3d41cbeE,b6,b6,__ZN3std9panicking15begin_panic_fmt17hd304120be034f2e8E
,b6,b6,b6,b6,b6,b6,__ZN4core5slice22slice_index_order_fail17h6c8abc2e052d023dE,b6,b6,b6,b6,b6,b6,b6,__ZN4core6option13expect_failed17h6800fb08054f8544E,b6,b6,b6,b6,__ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h1fc90e4056f7bc50E,b6,b6,b6,b6,b6,b6,b6,b6,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h99219cca8058aad9E,b6
,b6,b6,b6,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h7a996d021357c41cE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h5b82451d78bd8664E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,__ZN3std9panicking11begin_panic17hcf7fe98bc81661f2E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h7909033ebd12f15aE,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,__ZN87__LT_alloc__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hf06d463333ace052E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h6093e12f7527bee1E,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17h30f933b89f146ba6E,b8,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17hac9d2aee4d26b5fcE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std3sys3imp6memchr7memrchr17hb6d3b4592a69615cE,__ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h812b567e87c90b35E,b8,b8,b8,b8,b8,b8,b8
,__ZN3std4sync4once4Once10call_inner17h0cc4a7759d5194a2E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];

  return { ___errno_location: ___errno_location, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _htonl: _htonl, _htons: _htons, _i64Add: _i64Add, _llvm_bswap_i16: _llvm_bswap_i16, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _ntohs: _ntohs, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _rust_eh_personality: _rust_eh_personality, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htonl.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htons.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i16.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ntohs.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__rust_eh_personality = asm["_rust_eh_personality"]; asm["_rust_eh_personality"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rust_eh_personality.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _htons = Module["_htons"] = asm["_htons"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _rust_eh_personality = Module["_rust_eh_personality"] = asm["_rust_eh_personality"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = _malloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function exit(status, implicit) {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var flush = FS.quit;
  if (flush) {
    var print = Module['print'];
    var printErr = Module['printErr'];
    var has = false;
    Module['print'] = Module['printErr'] = function(x) {
      has = true;
    }
    try { // it doesn't matter if it fails
      flush(0);
    } catch(e) {}
    Module['print'] = print;
    Module['printErr'] = printErr;
    if (has) {
      warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
    }
  }

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



